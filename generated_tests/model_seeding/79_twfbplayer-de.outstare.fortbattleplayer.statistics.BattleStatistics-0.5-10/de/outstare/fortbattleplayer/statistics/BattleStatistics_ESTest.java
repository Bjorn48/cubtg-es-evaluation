/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 18:40:40 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.SectorBonus;
import de.outstare.fortbattleplayer.model.Weapon;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.AreaStatistic;
import de.outstare.fortbattleplayer.statistics.BattleStatistics;
import de.outstare.fortbattleplayer.statistics.CriticalHit;
import de.outstare.fortbattleplayer.statistics.LabeledData;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import de.outstare.fortbattleplayer.statistics.RoundStatistics;
import de.outstare.fortbattleplayer.statistics.WeaponModCounter;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BattleStatistics_ESTest extends BattleStatistics_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-868), (-868));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      Area area1 = mock(Area.class, new ViolatedAssumptionAnswer());
      CombatantState combatantState0 = new CombatantState(area0, (-1594), area1, true);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-3127), "ZdCO}B5DEST-K", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-3127), "", characterClass0, simpleWeapon0, ";1x;");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      battleStatistics0.setRound((-1));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      battleStatistics0.setRound((-26));
      battleStatistics0.setRound((-26));
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getNotShootersPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 67, area0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "", 1, 67);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1, (String) null, characterClass0, simpleWeapon0, "d9!w?RS),XH{");
      // Undeclared exception!
      try { 
        battleStatistics0.criticalShot((Combatant) null, simpleCombatant0, (-618));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.CriticalHit", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, (-1674));
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-913), true, true, (-913), 2, false, 227, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(0, (-4932), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3000, "Zg:j@)Jt#eA11", characterClass0, (Weapon) null, "round statistics for players and shots differ!");
      // Undeclared exception!
      try { 
        battleStatistics0.aimsAt(simpleCombatant0, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 3125);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(158, 158);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(3, true, true, 158, 158, false, 913, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(0, (-905), simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, (-905), simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "de.outstare.fortbattleplayer.statistics.BattleStatistics$1", 3, 1071);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1071, "cS!GIFw6", characterClass0, simpleWeapon0, "cS!GIFw6");
      battleStatistics0.hasMoved(simpleCombatant0, simpleArea0);
      assertEquals("cS!GIFw6", simpleCombatant0.getCity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      HashMap<CombatantSide, AtomicInteger> hashMap0 = new HashMap<CombatantSide, AtomicInteger>();
      Hashtable<CombatantSide, RoundStatistics> hashtable0 = new Hashtable<CombatantSide, RoundStatistics>();
      battleStatistics0.addAndResetRoundCounter(hashMap0, hashtable0);
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.isAlive((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(60, (-588));
      int int0 = battleStatistics0.round(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-1), (-1));
      int int0 = battleStatistics0.round((-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      doReturn((String) null).when(area0).toString();
      CombatantState combatantState0 = new CombatantState(area0, 0, area0, true);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, (String) null, characterClass0, (Weapon) null, (String) null);
      battleStatistics0.isHit(simpleCombatant0, 0, 0);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(486, 486);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 20, area0, true);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(486, "", 486, 486);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 486, "U", characterClass0, simpleWeapon0, "");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, 486);
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1071, 1071);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.countWeaponMods(combatantSide0, (WeaponModCounter) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals((-6740), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(227, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfShinyOil(combatantSide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), false, false, (-3370), (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfSchmierOil(combatantSide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1102, 1102);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfMovesPerPlayer((CombatantSide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), false, false, (-3370), (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide1).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      CombatantSide combatantSide2 = CombatantSide.DEFENDER;
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), false, false, (-3370), (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfHipFlasks(combatantSide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfGraphitLubricants(combatantSide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      // Undeclared exception!
      try { 
        battleStatistics0.numberOfFettesOil(combatantSide0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(158, 158);
      // Undeclared exception!
      try { 
        battleStatistics0.isOnline((Combatant) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-12), (-12));
      // Undeclared exception!
      try { 
        battleStatistics0.isHit((Combatant) null, 0, (-12));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition((Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleSector simpleSector0 = new SimpleSector(1014, true, true, (-26), 2, true, (-26), characterClass0);
      SimpleArea simpleArea0 = new SimpleArea((-26), (-26), simpleSector0);
      // Undeclared exception!
      try { 
        battleStatistics0.hasMoved((Combatant) null, simpleArea0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.AllCombatantSidesCounter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn((Weapon) null).when(combatant0).getWeapon();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      WeaponModCounter.SchmierOilCounter weaponModCounter_SchmierOilCounter0 = new WeaponModCounter.SchmierOilCounter();
      // Undeclared exception!
      try { 
        battleStatistics0.countWeaponMods(combatantSide0, weaponModCounter_SchmierOilCounter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.model.impl.JSWeaponData", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, (-67));
      Hashtable<CombatantSide, AtomicInteger> hashtable0 = new Hashtable<CombatantSide, AtomicInteger>();
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      AtomicInteger atomicInteger0 = new AtomicInteger(1);
      hashtable0.put(combatantSide0, atomicInteger0);
      HashMap<CombatantSide, RoundStatistics> hashMap0 = new HashMap<CombatantSide, RoundStatistics>();
      // Undeclared exception!
      try { 
        battleStatistics0.addAndResetRoundCounter(hashtable0, hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.BattleStatistics", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(486, 486);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      List<CriticalHit> list0 = battleStatistics0.critList(combatantSide0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, (-3370), characterClass0);
      battleStatistics0.setRound(4140);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide1);
      assertFalse(list0.contains(combatant0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, (-3370), characterClass0);
      battleStatistics0.setRound(4140);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      doReturn("/graphitdmg.csv").when(combatant0).toString();
      battleStatistics0.isOnline(combatant0, true);
      List<Combatant> list0 = battleStatistics0.turnOrder(combatantSide0);
      assertTrue(list0.contains(combatant0));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3344), (-3344));
      long long0 = battleStatistics0.criticalHitDamage((CombatantSide) null);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-19), (-19));
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList((CombatantSide) null);
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(2335, 2335);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      doReturn((CombatantSide) null, (CombatantSide) null).when(combatant0).getSide();
      // Undeclared exception!
      try { 
        battleStatistics0.hasSwappedPosition(combatant0, combatant0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      doReturn(combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.hasSwappedPosition(combatant0, combatant0);
      Set<PositionSwitch> set0 = battleStatistics0.switchedPosList(combatantSide0);
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide1).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Weapon weapon0 = mock(Weapon.class, new ViolatedAssumptionAnswer());
      doReturn((-6740)).when(weapon0).getId();
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(weapon0).when(combatant0).getWeapon();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.numberOfLoadingChamerOrEnhancedPatrons(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((Area) null).when(combatant0)._getLocation();
      doReturn(combatantSide0, combatantSide0).when(combatant0).getSide();
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      battleStatistics0.aimsAt(combatant0, combatant0);
      String string0 = battleStatistics0.targetNoOne(combatantSide1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      double double0 = battleStatistics0.averageRoundsOnline(combatantSide0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), false, false, (-3370), (-3370), false, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), true, true, (-3370), (-3370), true, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      CombatantSide combatantSide1 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.roundsTillOnline(combatantSide1);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), (-3370));
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector((-3370), true, true, (-3370), (-3370), true, (-3370), characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      double double0 = battleStatistics0.roundsTillOnline(combatantSide0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-891), (-891));
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      Area area1 = mock(Area.class, new ViolatedAssumptionAnswer());
      CombatantState combatantState0 = new CombatantState(area0, (-891), area1, false);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-3136), "ZdCO}B5DEST-K", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-3136), "", characterClass0, simpleWeapon0, ";1x;");
      battleStatistics0.aimsAt(simpleCombatant0, simpleCombatant0);
      String string0 = battleStatistics0.targetNoOne((CombatantSide) null);
      assertEquals("(1)", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(true).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      CombatantSide combatantSide1 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfOffliners(combatantSide1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CharacterClass characterClass0 = CharacterClass.DUELANT;
      SimpleSector simpleSector0 = new SimpleSector(227, false, false, 227, (-3370), false, 0, characterClass0);
      SectorBonus sectorBonus0 = simpleSector0.getBonus(characterClass0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(sectorBonus0).when(combatant0).getSectorBonus();
      doReturn(combatantSide0, combatantSide0, combatantSide0, combatantSide0).when(combatant0).getSide();
      doReturn(false).when(combatant0).isOnline();
      battleStatistics0.isOnline(combatant0, true);
      int int0 = battleStatistics0.numberOfOffliners(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      double double0 = battleStatistics0.numberOfMovesPerPlayer(combatantSide0);
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn((Area) null).when(combatant0)._getLocation();
      doReturn(combatantSide0, combatantSide0).when(combatant0).getSide();
      battleStatistics0.aimsAt(combatant0, combatant0);
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(60, (-588));
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.percentAbleToShoot(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      int int0 = battleStatistics0.combatantLifetime((Combatant) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      battleStatistics0.setRound((-26));
      battleStatistics0.setRound((-26));
      battleStatistics0.setRound(0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(5, 5);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getShotsPerRound();
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.amountOfDefenseBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-26), (-26));
      int int0 = battleStatistics0.round(16.6885252);
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      Map<CombatantSide, ? extends LabeledData> map0 = battleStatistics0.getHitsPerRound();
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfHipFlasks(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfSchmierOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfFettesOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics((-3370), 227);
      Map<Area, AreaStatistic> map0 = battleStatistics0.getFieldStatistics();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.totalSwaps(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfGraphitLubricants(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.amountOfAttackBonus(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 819);
      battleStatistics0.isDead((Combatant) null);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(1, 1);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      int int0 = battleStatistics0.numberOfShinyOil(combatantSide0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(13, 13);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      CharacterClass characterClass0 = CharacterClass.ADVENTURER;
      SimpleSector simpleSector0 = new SimpleSector((-689), false, false, (-689), 0, false, 1237, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(50, 3980, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "+5JD>", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1237, "", characterClass0, simpleWeapon0, "");
      battleStatistics0.criticalShot(simpleCombatant0, simpleCombatant0, 0);
      int int0 = battleStatistics0.criticalHits(combatantSide0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      battleStatistics0.newDestination((Combatant) null, (Area) null);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      BattleStatistics battleStatistics0 = new BattleStatistics(0, 0);
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      int int0 = battleStatistics0.numberOfBayonets(combatantSide0);
      assertEquals(0, int0);
  }
}
