/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 16:55:54 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      TextStyle textStyle2 = textStyle1.deriveStyle((-362.88672F));
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(true);
      homeLight1.isVisible();
      TextStyle textStyle3 = new TextStyle((-1984.0F), true, true);
      homeLight1.setNameStyle(textStyle2);
      homeLight1.isTopLeftPointAt(1418.026F, 2550.05F, 5.2831855F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.getIcon();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isNameCenterPointAt((-1.0F), (-1.0F), (-1.0F));
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getValueAddedTax();
      homeLight0.setDescription("c{2:>e/i");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setX(5.191342F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(5.191342F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      Integer integer0 = homeLight0.getColor();
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(5.191342F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(integer0);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(5.191342F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeTexture0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt(404.354F, 0.0F, 778.3507F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(5.191342F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(2.0F, 2.0F, 2.0F, 0.0F, 1.0F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.Level$Property", "com.eteks.sweethome3d.model.Level$Property", "CN4vL_c0&> ", uRLContent0, uRLContent0, uRLContent0, (-2521.3F), (-164.42F), (-2521.3F), (-36.7724F), true, (-182.08487F), 3.4028235E38F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.Level$Property", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      Integer integer0 = new Integer(9);
      homeDoorOrWindow0.setColor((Integer) null);
      homeDoorOrWindow0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getPoints();
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.setMovable(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isResizable();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.getX();
      homeLight0.setMovable(false);
      homeLight1.isVisible();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt((-1180.5F), (-3894.738F), 1850.427F);
      homeLight0.getShininess();
      homeLight0.getCurrency();
      Integer.valueOf((int) (byte)80);
      Integer.valueOf((-2147483455));
      Integer.valueOf(18);
      Integer.valueOf((int) (byte) (-100));
      Integer integer0 = new Integer((byte)1);
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "+O *Hfkj(@ 'O;G");
      homeLight0.setMovable(false);
      homeLight0.isVisible();
      homeLight0.isVisible();
      homeLight0.setMovable(false);
      Integer integer0 = new Integer(1);
      homeLight0.isTopLeftPointAt(283.1F, (-2551.7F), (-2551.7F));
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("$6'");
      homeLight1.setNameXOffset(671.209F);
      homeLight0.isPointAt(2.0F, 2.0F, 671.209F);
      homeLight1.setAngle(671.209F);
      homeLight1.setAngle((-35.5422F));
      Float float0 = new Float(671.209F);
      homeLight1.getCurrency();
      homeLight1.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isTopRightPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      homeLight0.isResizable();
      homeLight0.setMovable(false);
      homeLight0.isVisible();
      homeLight0.setDescription((String) null);
      homeLight0.setNameXOffset(1676.3F);
      homeLight0.containsPoint((-2165.0F), (-2332.0977F), (-2332.0977F));
      homeLight0.isVisible();
      homeLight0.setMovable(true);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getValueAddedTax();
      homeLight1.getColor();
      homeLight1.setX((-1.0F));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      Float.valueOf(1432.9275F);
      Float.min((-1), (-1));
      homeLight0.setMovable(true);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isResizable();
      homeLight0.setDescription("u%X+");
      homeLight0.setMovable(true);
      homeLight0.isVisible();
      homeLight1.getElevation();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean1);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      homeLight0.setDescription("u%X+");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setAngle(671.209F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(5.191342F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameXOffset(671.209F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(5.191342F, homeLight1.getAngle(), 0.01F);
      assertEquals(671.209F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isPointAt(671.209F, 671.209F, 671.209F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(5.191342F, homeLight1.getAngle(), 0.01F);
      assertEquals(671.209F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean3);
      
      Float float0 = homeLight0.getShininess();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNull(float0);
      
      String string0 = homeLight0.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNull(string0);
      
      HomeLight homeLight2 = (HomeLight)homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(5.191342F, homeLight1.getAngle(), 0.01F);
      assertEquals(671.209F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(5.191342F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(671.209F, homeLight2.getNameXOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      float float1 = homeLight2.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("u%X+", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(5.191342F, homeLight1.getAngle(), 0.01F);
      assertEquals(671.209F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(5.191342F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getColor());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(671.209F, homeLight2.getNameXOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      int int0 = new Integer(1259);
      Float.floatToIntBits((-1673.73F));
      Float.floatToIntBits(705.1F);
      Float.floatToIntBits(3.4028235E38F);
      LightSource lightSource0 = new LightSource((-285.0F), 705.1F, 0.0F, 1259);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1846.3788F, 0.0F, 3.4028235E38F, 5954);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-1544.45F), (-1050.6F), 3181.1458F, (-992921764));
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, (-1230.0234F), 355.189F, 3);
      lightSourceArray0[3] = lightSource3;
      Float float0 = new Float((-1.0));
      float0.equals("PRICE");
      LightSource lightSource4 = new LightSource((-992921764), 0.0F, 3.4028235E38F, (-847), float0);
      lightSourceArray0[4] = lightSource4;
      Float float1 = new Float(3417085.5);
      LightSource lightSource5 = new LightSource(3.4028235E38F, 1.0F, (-156.6F), 1911, float1);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(705.1F, 666.4F, 0.3926991F, (-2729), (Float) null);
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(1);
      float[][] floatArray0 = new float[1][1];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 705.1F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (float) 1911;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("editorSubFolder.Mac OS X").when(light0).getCurrency();
      doReturn(1.0F).when(light0).getDepth();
      doReturn("com.eteks.sweethome3d.tools.URLContent").when(light0).getDescription();
      doReturn((-1673.73F)).when(light0).getElevation();
      doReturn((-156.6F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.tools.URLContent").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.intersectsRectangle((-491.526F), 3.4028235E38F, (-491.526F), 0.0F);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameAngle((-1406.133F));
      homeLight0.setY(3185.2F);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      Float.valueOf(1432.9275F);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getIcon();
      homeLight0.setNameXOffset(2664.0F);
      homeLight0.isMovable();
      homeLight1.setNameVisible(true);
      homeLight1.setY(0.0F);
      homeLight1.isNameCenterPointAt(0.0F, 1.0F, 1676.3F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[0];
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DoorOrWindow doorOrWindow0 = mock(DoorOrWindow.class, new ViolatedAssumptionAnswer());
      doReturn((Sash[]) null).when(doorOrWindow0).getSashes();
      doReturn(0.0F).when(doorOrWindow0).getWallDistance();
      doReturn(0.0F).when(doorOrWindow0).getWallThickness();
      doReturn((Integer) null).when(doorOrWindow0).getColor();
      doReturn((String) null).when(doorOrWindow0).getCurrency();
      doReturn(0.0F).when(doorOrWindow0).getDepth();
      doReturn((String) null).when(doorOrWindow0).getDescription();
      doReturn(0.0F).when(doorOrWindow0).getElevation();
      doReturn(0.0F).when(doorOrWindow0).getHeight();
      doReturn((Content) null).when(doorOrWindow0).getIcon();
      doReturn((Content) null).when(doorOrWindow0).getModel();
      doReturn((float[][]) null).when(doorOrWindow0).getModelRotation();
      doReturn((String) null).when(doorOrWindow0).getName();
      doReturn((Content) null).when(doorOrWindow0).getPlanIcon();
      doReturn((BigDecimal) null).when(doorOrWindow0).getPrice();
      doReturn((String) null).when(doorOrWindow0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(doorOrWindow0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(doorOrWindow0).getWidth();
      doReturn(false).when(doorOrWindow0).isBackFaceShown();
      doReturn(false).when(doorOrWindow0).isDeformable();
      doReturn(false).when(doorOrWindow0).isDoorOrWindow();
      doReturn(false).when(doorOrWindow0).isMovable();
      doReturn(false).when(doorOrWindow0).isResizable();
      doReturn(false).when(doorOrWindow0).isTexturable();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(doorOrWindow0);
      homeDoorOrWindow0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 542, "]($Y", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[2] = 0.0F;
      floatArray1[5] = (float) 542;
      floatArray1[6] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 0.0F;
      floatArray2[2] = (float) 542;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray3 = new float[4];
      floatArray3[1] = (float) 542;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray1;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-2309.3162F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (float) 542;
      floatArray0[4] = floatArray4;
      floatArray0[5] = floatArray1;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 1928.8F;
      floatArray0[6] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) 542;
      floatArray4[4] = (float) 542;
      floatArray6[6] = 542.0F;
      floatArray0[7] = floatArray6;
      float[] floatArray7 = new float[8];
      floatArray7[0] = 0.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 1928.8F;
      floatArray7[7] = 0.0F;
      BigDecimal bigDecimal0 = new BigDecimal((long) 542);
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 542, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, true, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setWidth(0.0F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$18");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getX();
      Random.setNextRandom(2);
      homeLight0.getGroundElevation();
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.containsPoint(1180.5F, 1180.5F, 2.401122F);
      Float.valueOf(1432.9275F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      homeLight0.setNameStyle(textStyle0);
      homeLight1.isNameCenterPointAt(1432.9275F, (-1.0F), 1432.9275F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameXOffset((-272.0F));
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.setMovable(false);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, (PropertyChangeListener) null);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(1253);
      homeLight0.getGroundElevation();
      homeLight0.setAngle(1253);
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Content content0 = homeLight0.getIcon();
      assertNull(content0);
      
      homeLight0.isNameCenterPointAt(1832.1329F, 1832.1329F, 1832.1329F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(true);
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.setVisible(true);
      homeLight0.getIcon();
      homeLight0.setNameVisible(false);
      homeLight0.setNameXOffset((-362.89F));
      homeLight0.isVisible();
      homeLight0.setY((-362.89F));
      homeLight0.isResizable();
      homeLight0.setMovable(true);
      homeLight0.isResizable();
      homeLight0.setNameYOffset(645.2739F);
      homeLight0.getName();
      homeLight0.isBottomLeftPointAt(2412.4F, (-1.0F), 2412.4F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isBottomLeftPointAt(2.0F, 5.2831855F, (-1775.0674F));
      homeLight0.setName("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
      Random.setNextRandom((-1631));
      homeLight0.getGroundElevation();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      homeLight0.setNameXOffset(1676.3F);
      homeLight0.containsPoint((-2165.0F), (-2566.747F), (-326.23566F));
      homeLight0.isVisible();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getValueAddedTax();
      homeLight2.setX(0.0F);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      homeLight2.isBottomRightPointAt(2745.767F, 1676.3F, (-326.23566F));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      FileSystemHandling.shouldAllThrowIOExceptions();
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "%Jj", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-36.7724F), (-36.7724F), (-36.7724F), false, (-2521.3F), 2.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Integer integer0 = new Integer((-1715));
      homeDoorOrWindow1.setColor(integer0);
      homeDoorOrWindow1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isResizable();
      Float.valueOf(1432.9275F);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(1432.9275F, (-3513.02F), 1432.9275F);
      homeLight0.setLevel((Level) null);
      homeLight1.isBottomLeftPointAt(1432.9275F, (-1872.43F), 1432.9275F);
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      textStyle0.deriveItalicStyle(false);
      textStyle0.deriveItalicStyle(false);
      homeLight0.setNameStyle(textStyle0);
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getPoints();
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.setMovable(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy(";", propertyChangeListenerProxy0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom((-1));
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isVisible();
      Float.valueOf((-3909.5415F));
      homeLight1.isResizable();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(0.5F, true, false);
      homeLight2.setNameStyle(textStyle0);
      homeLight1.isTopLeftPointAt(5.2831855F, 2.0F, (-3909.5415F));
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-1.0F), (-1.0F), (-1.0F), false, (-2521.3F), 2.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      Integer integer0 = new Integer((-1715));
      assertEquals((-1715), (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getHost());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("<&h", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("<&h", propertyChangeListenerProxy0);
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight1.getNameStyle();
      homeLight1.setNameStyle((TextStyle) null);
      homeLight1.isTopLeftPointAt(2714.0396F, 2714.0396F, (-35.60254F));
      homeLight0.getNameYOffset();
      homeLight1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int int0 = (-1);
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<QzIU");
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      textStyle1.deriveStyle((-362.88672F));
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      homeLight0.getValueAddedTaxPercentage();
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, uRLContent0, (-362.88672F), (-1), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeLight0.setTexture(homeTexture0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(false);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isBackFaceShown();
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.containsPoint(1180.5F, 1180.5F, 2.401122F);
      Float.valueOf(1432.9275F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      textStyle0.deriveItalicStyle(false);
      homeLight0.setNameStyle(textStyle0);
      homeLight1.isVisible();
      homeLight1.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("");
      homeLight0.isResizable();
      Float.valueOf((-362.88672F));
      Float.min((-1), (-1));
      homeLight0.setMovable(true);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      homeLight1.isResizable();
      homeLight1.setDescription("u%X+");
      homeLight1.setMovable(false);
      homeLight1.isVisible();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setName("");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      
      homeLight0.setVisible(false);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertEquals(0, floatArray0.length);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getIcon();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertFalse(uRLContent1.isJAREntry());
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      assertEquals(0, floatArray0.length);
      assertNotNull(uRLContent1);
      
      homeLight0.setNameXOffset((-621));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isVisible());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
      
      homeLight0.getModel();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      homeLight0.setMovable(false);
      homeLight0.isVisible();
      homeLight0.isPointAt(0.0F, (-72.582F), 4077.0F);
      homeLight0.getShininess();
      homeLight0.getCurrency();
      Integer.valueOf(4);
      homeLight0.getColor();
      homeLight0.setX((-29));
      homeLight0.intersectsRectangle((-72.582F), 4, 2.0F, 4077.0F);
      homeLight0.getColor();
      homeLight0.isPointAt((-72.582F), 4, 2.0F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-1.0F));
      homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      homeLight0.setName("l@IX!,7):Hb r9");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight0.getPlanIcon();
      bigDecimal0.longValue();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setDepth(1.0F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt(1.0F, 1.0F, 1.0F);
      homeLight0.getIcon();
      homeLight0.setElevation(13.88F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.getGroundElevation();
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Sash sash0 = new Sash((-3430.364F), (-3430.364F), (-1838.16F), 3.4028235E38F, (-1838.16F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight0.getPlanIcon();
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("X", "com.eteks.sweethome3d.model.HomePieceOfFurniture$18", "", (Content) null, (Content) null, (Content) null, (-27.247322F), 0.5F, (-1838.16F), (-3430.364F), true, 3.4028235E38F, 0.5F, sashArray0, (float[][]) null, "0nC_Q ;8>:}tV", true, false, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      URL uRL0 = MockURL.getFileExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-1.0F), (-1.0F), (-1.0F), false, (-2521.3F), 2.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Integer integer0 = new Integer((-1715));
      homeDoorOrWindow1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      // Undeclared exception!
      try { 
        homeLight0.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(2441.6F, 2.0F, 2.0F, (-3423));
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-1625.011F);
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray1[3] = (float) (-3423);
      floatArray1[4] = (float) (-3423);
      floatArray1[5] = 2441.6F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 2.0F;
      floatArray2[1] = (float) (-3423);
      floatArray2[2] = 2.0F;
      floatArray2[3] = 5908.895F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (-1.0F);
      floatArray2[6] = (-1625.011F);
      floatArray2[7] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 2441.6F;
      floatArray3[2] = (float) (-3423);
      floatArray3[3] = 5908.895F;
      floatArray3[4] = 2441.6F;
      floatArray3[5] = 2441.6F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("^P%", "", "", (Content) null, (Content) null, (-1625.011F), (-1625.011F), (-1.0F), (-1625.011F), true, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash((-1445.0F), 0.3926991F, 2.0F, 1286.0753F, 0.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, 1.0F, (-1.0F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1.0F, 1101.2F, (-1039.7106F), 2335.726F, (-1039.7106F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-1.0F), 0.3926991F, 2.0F, 2441.6F, (-1445.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2.0F, 3128.7788F, 1.0F, 2.0F, 1.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-3985.7231F), 139.441F, 2441.6F, (-698.0F), (-3423.0F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, 3.4028235E38F, 3.4028235E38F, 0.0F, 1.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(2.0F, (-1.0F), 0.0F, 16.4868F, (-356.90338F));
      sashArray0[7] = sash7;
      Sash sash8 = new Sash((-986.521F), 2.0F, 3.4028235E38F, 3.4028235E38F, 670.43F);
      sashArray0[8] = sash8;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 2.0F, 0.0F, 2441.6F, 2.0F, true, (-3423.0F), 3.4028235E38F, sashArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getName();
      catalogLight0.getDescription();
      catalogDoorOrWindow0.getIcon();
      catalogLight0.getPlanIcon();
      catalogLight0.getModel();
      catalogDoorOrWindow0.getWidth();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "NAME_ANGLE", (String) null, (Content) null, (Content) null, (Content) null, 3174.6868F, 1286.0753F, (-80.6F), 789.0F, true, 1101.2F, (-1.0F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow1.getDepth();
      catalogDoorOrWindow0.getHeight();
      homeLight0.getElevation();
      catalogLight0.isMovable();
      catalogDoorOrWindow0.isDoorOrWindow();
      homeLight0.getColor();
      float[][] floatArray4 = catalogLight0.getModelRotation();
      catalogDoorOrWindow1.getStaircaseCutOutShape();
      CatalogLight catalogLight1 = new CatalogLight((String) null, "", "", (Content) null, (Content) null, (Content) null, (-3985.7231F), 0.5F, 2441.6F, 4530.0F, true, lightSourceArray0, floatArray4, (String) null, true, false, true, bigDecimal0, bigDecimal0);
      catalogLight1.isBackFaceShown();
      catalogLight0.isResizable();
      catalogDoorOrWindow1.isDeformable();
      homeLight0.getPlanIcon();
      Integer integer0 = new Integer((-612));
      CatalogDoorOrWindow catalogDoorOrWindow2 = new CatalogDoorOrWindow("", (Content) null, (Content) null, 0.5F, 0.0F, 0.0F, 1.0F, true, (-80.6F), 1.0F, sashArray0, integer0, floatArray0, false, 5028.5F, true);
      catalogDoorOrWindow2.isTexturable();
      catalogLight0.getPrice();
      BigDecimal bigDecimal1 = catalogDoorOrWindow1.getValueAddedTaxPercentage();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7]~";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      Long long0 = new Long((-541L));
      Float float0 = new Float((double) 2.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (String) null, (String) null, (String) null, stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 2.0F, 2335.726F, 1286.0753F, 3.4028235E38F, false, "", floatArray4, "", true, false, true, bigDecimal0, bigDecimal1, (String) null);
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle(2.0F);
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(true);
      homePieceOfFurniture0.setNameStyle(textStyle1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("Unknown resource ");
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-2455.8188F));
      homeLight0.setVisible(false);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "t! :CZO-O5B$%");
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isPointAt(0.0F, (-1408.193F), 4.909806F);
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Level level0 = new Level((String) null, 3.4028235E38F, 0.5F, (-2384.3547F));
      homeLight0.setLevel(level0);
      Level level1 = new Level((String) null, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.isBottomRightPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(true);
      homeLight0.setNameXOffset((-362.89F));
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.setVisible(true);
      homeLight0.getIcon();
      homeLight0.setNameVisible(false);
      homeLight0.setNameXOffset((-362.89F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setY((-362.89F));
      homeLight0.isResizable();
      homeLight0.setMovable(true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      homeLight0.isResizable();
      homeLight0.setNameYOffset(645.2739F);
      homeLight0.getName();
      homeLight0.isBottomRightPointAt((-362.89F), 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getGroundElevation();
      homeLight0.setNameAngle(0.0F);
      homeLight0.isTopLeftPointAt((-1095.4454F), (-1095.4454F), (-1095.4454F));
      homeLight0.getNameYOffset();
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      Level level0 = new Level("I\"X_w:t", 4.909806F, 1009.58F, 4.909806F);
      Level level1 = level0.clone();
      level1.clone();
      level0.getElevation();
      level1.setName(".pNOdw8");
      homeLight0.setNameXOffset(1380.0F);
      homeLight0.isPointAt(4.909806F, (-1.0F), 4.909806F);
      homeLight0.getValueAddedTax();
      homeLight0.getNameXOffset();
      homeLight0.isPointAt(1530.0902F, 1009.58F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset((-389.562F));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt((-389.562F), (-389.562F), (-389.562F));
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      String string0 = homeLight0.getCatalogId();
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(string0);
      
      String string1 = homeLight0.getCurrency();
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      int int0 = (-1);
      Integer integer0 = new Integer((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Level level0 = new Level("", (-1476.4623F), (-486.5476F), 0.0F);
      Level level1 = level0.clone();
      level1.getElevation();
      level0.getElevation();
      level1.getHeight();
      homeLight0.isAtLevel(level1);
      Level level2 = new Level((String) null, 1745.6212F, 0.5F, 43.2F);
      homeLight0.setLevel(level2);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-1));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      textStyle1.deriveStyle(2.0F);
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
      Float float0 = Float.valueOf(1974.9F);
      // Undeclared exception!
      try { 
        homeLight0.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getValueAddedTax();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 549, "]($Y", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 549;
      floatArray1[1] = (float) 549;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 2.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 2.0F;
      floatArray1[8] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 2370.0F;
      floatArray2[1] = (float) 549;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 2370.0F;
      floatArray3[1] = (float) 549;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 2370.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-2309.3162F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) 549;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 1928.8F;
      floatArray7[1] = 2.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.3926991F;
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 2.0F;
      floatArray8[5] = (float) 549;
      floatArray8[6] = 1928.8F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      floatArray9[0] = 0.0F;
      floatArray9[1] = 2.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 2.0F;
      floatArray9[4] = 1928.8F;
      floatArray9[5] = 0.0F;
      floatArray9[6] = 0.0F;
      floatArray9[7] = 2370.0F;
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal((long) 549);
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 2.0F, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Level level0 = new Level((String) null, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.isBottomRightPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      Float float0 = new Float(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("*~MMF]Aj9Sq*wVqu5{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isResizable();
      homeLight0.setAngle((-621));
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1774.2F), (-1774.2F), (-1774.2F));
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("ZA");
      homeLight0.isResizable();
      homeLight0.setName("ZA");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isResizable();
      homeLight0.setX(223.23F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.getX();
      Random.setNextRandom(2);
      homeLight0.getGroundElevation();
      homeLight0.isTopLeftPointAt(1593.57F, 0.0F, (-1.0F));
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(2.0F, 2.0F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("ZA");
      homeLight0.isResizable();
      homeLight0.isTopLeftPointAt(0.0F, 2154.0F, 2154.0F);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.intersectsRectangle((-389.5625F), (-389.5625F), 3659.9678F, 1551.988F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isBottomLeftPointAt((-389.5625F), (-389.5625F), (-389.5625F));
      homeLight0.setMovable(true);
      homeLight0.setName("editorSubFolder.Windows");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
      Random.setNextRandom(2);
      homeLight0.getGroundElevation();
      homeLight0.isTopLeftPointAt((-389.5625F), (-1.0F), 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setY((-1.0F));
      homeLight0.getIcon();
      homeLight0.isMovable();
      homeLight0.isNameCenterPointAt(1.0F, 1.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getTexture();
      // Undeclared exception!
      try { 
        homeLight1.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      homeLight0.setNameXOffset(671.209F);
      homeLight0.isPointAt(671.209F, 2.0F, 0.3926991F);
      homeLight0.setAngle(4035.1018F);
      homeLight0.setAngle(671.209F);
      Float float0 = new Float(0.3926991F);
      homeLight0.getCurrency();
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 549, "]($Y", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 549;
      floatArray1[1] = (float) 549;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 2.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 2.0F;
      floatArray1[8] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 2370.0F;
      floatArray2[1] = (float) 549;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 2370.0F;
      floatArray3[1] = (float) 549;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 2370.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-2309.3162F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) 549;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 1928.8F;
      floatArray7[1] = 2.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.3926991F;
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 2.0F;
      floatArray8[5] = (float) 549;
      floatArray8[6] = 1928.8F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      floatArray9[0] = 0.0F;
      floatArray9[1] = 2.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 2.0F;
      floatArray9[4] = 1928.8F;
      floatArray9[5] = 0.0F;
      floatArray9[6] = 0.0F;
      floatArray9[7] = 2370.0F;
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal((long) 549);
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 2.0F, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getLevel();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      
      boolean boolean2 = homeLight0.isVisible();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertTrue(boolean2);
      
      TextStyle textStyle0 = new TextStyle(777.6812F, false, false);
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      
      boolean boolean3 = homeLight0.isTopLeftPointAt(5.2831855F, 777.6812F, 1.0353454F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean3);
      
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.intersectsRectangle(0.0F, 0.0F, 0.0F, (-491.526F));
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getGroundElevation();
      homeLight0.isTopLeftPointAt((-1095.4454F), (-1095.4454F), (-1095.4454F));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      MockURL.getHttpExample();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight0.getIcon();
      homeLight0.setNameXOffset(0.0F);
      homeLight0.isMovable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("<&h");
      homeLight1.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.isNameCenterPointAt(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      Integer.sum((-621), (-621));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("*~MMF]Aj9Sq*wVqu5{");
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isResizable();
      homeLight0.setAngle((-621));
      homeLight0.getPrice();
      homeLight0.containsPoint(2054.2615F, 3.4028235E38F, (-509.989F));
      homeLight0.isVisible();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isResizable();
      Float.valueOf((-483.52F));
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isResizable();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.setVisible(false);
      homeLight2.setX(5.191342F);
      homeLight2.getColor();
      homeLight2.getCurrency();
      homeLight1.getPrice();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-1));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameXOffset((-272.0F));
      homeLight0.isVisible();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setMovable(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setNameYOffset(5.2831855F);
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      textStyle0.deriveBoldStyle(false);
      homeLight0.getPoints();
      homeLight0.setName("qr5*-wB=IMyiFe5f");
      homeLight0.isVisible();
      homeLight0.setMovable(true);
      homeLight0.isBottomRightPointAt((-362.88672F), (-1283.5449F), (-3598.408F));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isResizable();
      homeLight0.isBottomRightPointAt((-1471.9371F), (-374.59F), 546.0F);
      homeLight0.setY(0.5F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-1));
      homeLight0.intersectsRectangle(2138.0F, 2138.0F, 3.4028235E38F, (-621.0F));
      homeLight0.setName((String) null);
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      homeLight0.isResizable();
      homeLight0.setMovable(false);
      homeLight0.containsPoint(0.3926991F, 1904.2178F, 5169.658F);
      Float.valueOf((-1517.0616F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(284.6F, false, false);
      homeLight0.setNameStyle(textStyle0);
      homeLight1.isVisible();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.setY((-389.5625F));
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setName("");
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean0);
      
      Content content0 = homeLight0.getIcon();
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(content0);
      
      homeLight0.setNameXOffset((-389.5625F));
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean1 = homeLight0.isMovable();
      assertTrue(boolean1 == boolean0);
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean1);
      
      homeLight0.setNameVisible(true);
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      homeLight0.setY((-389.5625F));
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      boolean boolean2 = homeLight0.isNameCenterPointAt((-389.5625F), (-389.5625F), 1.0F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(boolean2);
      
      String string0 = homeLight0.getName();
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("", string0);
      assertNotNull(string0);
      
      homeLight0.setNameAngle(4.909806F);
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(4.909806F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals((-389.5625F), homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getShininess());
      assertEquals(4.909806F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals((-389.5625F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(4.909806F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      homeLight0.isResizable();
      homeLight0.isResizable();
      homeLight0.setMovable(false);
      homeLight0.isVisible();
      homeLight0.setDescription((String) null);
      homeLight0.setNameXOffset(1676.3F);
      homeLight0.containsPoint((-2165.0F), (-2332.0977F), (-2332.0977F));
      homeLight0.isPointAt(1676.3F, 1.0F, 1.0F);
      homeLight0.getShininess();
      homeLight0.getCurrency();
      Integer.valueOf((-29));
      homeLight0.getColor();
      homeLight0.setX(1676.3F);
      homeLight0.getColor();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeLight0.getIcon();
      homeLight0.setNameXOffset((-621));
      homeLight0.isPointAt(3.4028235E38F, (-1262.7534F), (-374.59F));
      homeLight0.getShininess();
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(2441.6F, 2.0F, 2.0F, (-3423));
      lightSourceArray0[0] = lightSource0;
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (-1625.011F);
      floatArray1[1] = 2.0F;
      floatArray1[2] = 2.0F;
      floatArray1[3] = (float) (-3423);
      floatArray1[4] = (float) (-3423);
      floatArray1[5] = 2441.6F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 2.0F;
      floatArray2[1] = (float) (-3423);
      floatArray2[2] = 2.0F;
      floatArray2[3] = 5908.895F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (-1.0F);
      floatArray2[6] = (-1625.011F);
      floatArray2[7] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 2441.6F;
      floatArray3[2] = (float) (-3423);
      floatArray3[3] = 5908.895F;
      floatArray3[4] = 2441.6F;
      floatArray3[5] = 2441.6F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("^P%", "", "", (Content) null, (Content) null, (-1625.011F), (-1625.011F), (-1.0F), (-1625.011F), true, lightSourceArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getIcon();
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash((-1445.0F), 0.3926991F, 2.0F, 1286.0753F, 0.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 0.0F, 0.0F, 1.0F, (-1.0F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1.0F, 1101.2F, (-1039.7106F), 2335.726F, (-1039.7106F));
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-1.0F), 0.3926991F, 2.0F, 2441.6F, (-1445.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2.0F, 3128.7788F, 1.0F, 2.0F, 1.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash((-3985.7231F), 139.441F, 2441.6F, (-698.0F), (-3423.0F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, 3.4028235E38F, 3.4028235E38F, 0.0F, 1.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(2.0F, (-1.0F), 0.0F, 16.4868F, (-356.90338F));
      sashArray0[7] = sash7;
      Sash sash8 = new Sash((-986.521F), 2.0F, 3.4028235E38F, 3.4028235E38F, 670.43F);
      sashArray0[8] = sash8;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (Content) null, (Content) null, 2.0F, 0.0F, 2441.6F, 2.0F, true, (-3423.0F), 3.4028235E38F, sashArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getName();
      catalogLight0.getDescription();
      catalogDoorOrWindow0.getIcon();
      catalogLight0.getPlanIcon();
      catalogLight0.getModel();
      catalogDoorOrWindow0.getWidth();
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "NAME_ANGLE", (String) null, (Content) null, (Content) null, (Content) null, 3174.6868F, 1286.0753F, (-80.6F), 789.0F, true, 1101.2F, (-1.0F), sashArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow1.getDepth();
      catalogDoorOrWindow0.getHeight();
      homeLight0.getElevation();
      catalogLight0.isMovable();
      catalogDoorOrWindow0.isDoorOrWindow();
      homeLight0.getColor();
      float[][] floatArray4 = catalogLight0.getModelRotation();
      catalogDoorOrWindow1.getStaircaseCutOutShape();
      CatalogLight catalogLight1 = new CatalogLight((String) null, "", "", (Content) null, (Content) null, (Content) null, (-3985.7231F), 0.5F, 2441.6F, 4530.0F, true, lightSourceArray0, floatArray4, (String) null, true, false, true, bigDecimal0, bigDecimal0);
      catalogLight1.isBackFaceShown();
      catalogLight0.isResizable();
      catalogDoorOrWindow1.isDeformable();
      homeLight0.getPlanIcon();
      Integer integer0 = new Integer((-612));
      CatalogDoorOrWindow catalogDoorOrWindow2 = new CatalogDoorOrWindow("", (Content) null, (Content) null, 0.5F, 0.0F, 0.0F, 1.0F, true, (-80.6F), 1.0F, sashArray0, integer0, floatArray0, false, 5028.5F, true);
      catalogDoorOrWindow2.isTexturable();
      catalogLight0.getPrice();
      BigDecimal bigDecimal1 = catalogDoorOrWindow1.getValueAddedTaxPercentage();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "7]~";
      stringArray0[1] = null;
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      Long long0 = new Long((-541L));
      Float float0 = new Float((double) 2.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (String) null, (String) null, (String) null, stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 2.0F, 2335.726F, 1286.0753F, 3.4028235E38F, false, "", floatArray4, "", true, false, true, bigDecimal0, bigDecimal1, (String) null);
      catalogPieceOfFurniture0.getCurrency();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPrice();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(true);
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isNameCenterPointAt((-1153.9531F), (-1153.9531F), (-1153.9531F));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.addPropertyChangeListener((PropertyChangeListener) null);
      homeLight0.setNameXOffset((-389.562F));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(1207.3912F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(1676.3F);
      homeLight0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 549, "]($Y", uRLStreamHandler0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 549;
      floatArray1[1] = (float) 549;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 2.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 2.0F;
      floatArray1[8] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 2370.0F;
      floatArray2[1] = (float) 549;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 2370.0F;
      floatArray3[1] = (float) 549;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 2370.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-2309.3162F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) 549;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 1928.8F;
      floatArray7[1] = 2.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.3926991F;
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 2.0F;
      floatArray8[5] = (float) 549;
      floatArray8[6] = 1928.8F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      floatArray9[0] = 0.0F;
      floatArray9[1] = 2.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 2.0F;
      floatArray9[4] = 1928.8F;
      floatArray9[5] = 0.0F;
      floatArray9[6] = 0.0F;
      floatArray9[7] = 2370.0F;
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal((long) 549);
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 2.0F, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      catalogLight0.getLightSources();
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.setMovable(true);
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-67.8213F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, 0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0, 0.5F, 0, 0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-3023.5635F), (-3023.5635F), (-3023.5635F), 0);
      lightSourceArray0[2] = lightSource2;
      lightSourceArray0[3] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, 0.0F, 1.0F, 2147483645);
      lightSourceArray0[4] = lightSource3;
      Integer.valueOf((-734));
      Integer.valueOf(11);
      Integer.valueOf((-734));
      Integer.valueOf(0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      textStyle0.deriveBoldStyle(false);
      homeLight0.getPoints();
      homeLight0.setName("qr5*-wB=IMyiFe5f");
      homeLight0.isVisible();
      homeLight0.setMovable(true);
      homeLight0.isBottomRightPointAt((-362.88672F), (-1283.5449F), (-3598.408F));
      homeLight0.isNameCenterPointAt((byte) (-100), 2954.4F, (byte)80);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = (-362.89F);
      homeLight0.setNameVisible(true);
      homeLight0.move((-362.89F), 729.1391F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)64;
      byteArray0[2] = (byte)122;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-88);
      byteArray0[7] = (byte)20;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.setVisible(true);
      homeLight0.getIcon();
      homeLight0.setNameVisible(true);
      homeLight0.setNameAngle((-362.89F));
      homeLight0.setY((-362.89F));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameAngle((-1));
      homeLight0.setName("E/&}Itkd");
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.isResizable();
      homeLight0.setMovable(true);
      homeLight0.isVisible();
      TextStyle textStyle0 = new TextStyle(5.2831855F, false, false);
      homeLight0.setNameStyle(textStyle0);
      homeLight0.isTopLeftPointAt(1418.026F, 5.2831855F, (-1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      int int0 = (-1);
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      textStyle1.deriveStyle((-362.88672F));
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, uRLContent0, (-362.88672F), (-1), true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeLight0.setTexture(homeTexture0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      homeLight0.containsPoint(1180.5F, 1180.5F, 2.401122F);
      Float.valueOf(1432.9275F);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      homeLight0.setNameStyle(textStyle0);
      homeLight1.setNameYOffset(0.0F);
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(3803.6047F, 2.0F, 2.0F, 1455);
      assertEquals(1455, lightSource0.getColor());
      assertEquals(2.0F, lightSource0.getZ(), 0.01F);
      assertEquals(2.0F, lightSource0.getY(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertEquals(3803.6047F, lightSource0.getX(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      int int0 = Float.compare((-690.7199F), (-442.13876F));
      assertEquals((-1), int0);
      
      LightSource lightSource1 = new LightSource(255.0F, 1455, 1978.0183F, 1, (Float) (-442.13876F));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(1978.0183F, lightSource1.getZ(), 0.01F);
      assertEquals(1455.0F, lightSource1.getY(), 0.01F);
      assertEquals(255.0F, lightSource1.getX(), 0.01F);
      assertEquals((-442.13876F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = float0.equals("m20q['v,z");
      assertFalse(boolean0);
      
      LightSource lightSource2 = new LightSource(54.64F, (-1), 2.0F, 2075, float0);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals((-1.0F), lightSource2.getY(), 0.01F);
      assertEquals(54.64F, lightSource2.getX(), 0.01F);
      assertEquals(2075, lightSource2.getColor());
      assertEquals(0.0F, lightSource2.getDiameter(), 0.01F);
      assertEquals(2.0F, lightSource2.getZ(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, 0.0F, 524.66833F, 1);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertNull(lightSource3.getDiameter());
      assertEquals(1, lightSource3.getColor());
      assertEquals(524.66833F, lightSource3.getZ(), 0.01F);
      assertEquals(0.0F, lightSource3.getX(), 0.01F);
      assertEquals(0.0F, lightSource3.getY(), 0.01F);
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      Float float1 = new Float(1235.3866774);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1235.3867F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = float1.floatValue();
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1235.3867F, float2, 0.01F);
      
      float float3 = float1.floatValue();
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(1235.3867F, float3, 0.01F);
      
      float float4 = float1.floatValue();
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(1235.3867F, float4, 0.01F);
      
      float float5 = float1.floatValue();
      assertEquals(float5, float4, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1235.3867F, float5, 0.01F);
      
      LightSource lightSource4 = new LightSource(0.0F, (-1309.52F), 0.0F, (-453), (Float) 1235.3867F);
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertEquals((-453), lightSource4.getColor());
      assertEquals((-1309.52F), lightSource4.getY(), 0.01F);
      assertEquals(1235.3867F, lightSource4.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals(0.0F, lightSource4.getX(), 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3780.11F, (-1953.861F), 3780.11F, 0);
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertEquals(3780.11F, lightSource5.getZ(), 0.01F);
      assertEquals(0, lightSource5.getColor());
      assertEquals(3780.11F, lightSource5.getX(), 0.01F);
      assertNull(lightSource5.getDiameter());
      assertEquals((-1953.861F), lightSource5.getY(), 0.01F);
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource((-442.13876F), 2871.9F, 0.0F, 1, float1);
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertEquals((float)float1, (float)float5, 0.01F);
      assertEquals((float)float1, (float)float3, 0.01F);
      assertEquals((float)float1, (float)float2, 0.01F);
      assertEquals((float)float1, (float)float4, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1, lightSource6.getColor());
      assertEquals(0.0F, lightSource6.getZ(), 0.01F);
      assertEquals((-442.13876F), lightSource6.getX(), 0.01F);
      assertEquals(1235.3867F, lightSource6.getDiameter(), 0.01F);
      assertEquals(2871.9F, lightSource6.getY(), 0.01F);
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource((-442.13876F), 2871.9F, 54.64F, 1231);
      assertFalse(lightSource7.equals((Object)lightSource5));
      assertFalse(lightSource7.equals((Object)lightSource0));
      assertFalse(lightSource7.equals((Object)lightSource2));
      assertFalse(lightSource7.equals((Object)lightSource4));
      assertFalse(lightSource7.equals((Object)lightSource3));
      assertFalse(lightSource7.equals((Object)lightSource6));
      assertFalse(lightSource7.equals((Object)lightSource1));
      assertNull(lightSource7.getDiameter());
      assertEquals((-442.13876F), lightSource7.getX(), 0.01F);
      assertEquals(2871.9F, lightSource7.getY(), 0.01F);
      assertEquals(1231, lightSource7.getColor());
      assertEquals(54.64F, lightSource7.getZ(), 0.01F);
      assertNotNull(lightSource7);
      
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 1455;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-442.13876F);
      floatArray1[4] = 1235.3867F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-442.13876F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 1235.3867F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 3803.6047F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 2.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 1978.0183F;
      floatArray4[1] = (float) 1455;
      floatArray4[2] = 1235.3867F;
      floatArray4[3] = 1.0F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal(4);
      assertEquals((short)4, bigDecimal0.shortValue());
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("m20q['v,z").when(light0).getCurrency();
      doReturn(2871.9F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(2.0F).when(light0).getElevation();
      doReturn(1.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(1235.3867F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((short)4, bigDecimal0.shortValue());
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1235.3867F, homeLight0.getWidth(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(617.69336F, homeLight0.getX(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, (-1446.68F));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((short)4, bigDecimal0.shortValue());
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1235.3867F, homeLight0.getWidth(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(617.69336F, homeLight0.getX(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(boolean2);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean3 = homeLight0.isTopRightPointAt(1.0F, 891.8735F, (-1848.536F));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((short)4, bigDecimal0.shortValue());
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1235.3867F, homeLight0.getWidth(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(617.69336F, homeLight0.getX(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(boolean3);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      float float6 = homeLight0.getElevation();
      assertFalse(integer0.equals((Object)int0));
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertEquals((short)4, bigDecimal0.shortValue());
      assertEquals((byte)4, bigDecimal0.byteValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isResizable());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1235.3867F, homeLight0.getWidth(), 0.01F);
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(617.69336F, homeLight0.getX(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(2.0F, float6, 0.01F);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setName("");
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean0);
      
      homeLight0.setVisible(true);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(content0);
      
      homeLight0.setNameVisible(false);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setNameXOffset((-362.89F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertTrue(boolean1);
      
      homeLight0.setY((-362.89F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean2);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      boolean boolean3 = homeLight0.isTopRightPointAt((-362.89F), 200.189F, (-362.89F));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean3);
      
      boolean boolean4 = homeLight0.isResizable();
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean4);
      
      homeLight0.setNameYOffset(645.2739F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      
      String string0 = homeLight0.getName();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean5 = homeLight0.isBottomLeftPointAt(2412.4F, (-1.0F), 2412.4F);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean5);
      
      float float0 = homeLight0.getNameYOffset();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(645.2739F, float0, 0.01F);
      
      Integer integer0 = homeLight0.getColor();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      Level level0 = new Level("", (-2572.6814F), (-2572.6814F), (-2572.6814F));
      assertTrue(level0.isVisible());
      assertEquals((-2572.6814F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2572.6814F), level0.getHeight(), 0.01F);
      assertEquals((-2572.6814F), level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeLight0.isAtLevel(level0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(level0.isVisible());
      assertEquals((-2572.6814F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2572.6814F), level0.getHeight(), 0.01F);
      assertEquals((-2572.6814F), level0.getFloorThickness(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(boolean1);
      
      homeLight0.setVisible(true);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      homeLight0.setNameAngle((-362.89F));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      homeLight0.setY((-362.89F));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      String string0 = homeLight0.getStaircaseCutOutShape();
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      assertNull(string0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      assertFalse(boolean2);
      
      homeLight0.setNameAngle((-362.89F));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
      
      homeLight0.setNameYOffset(2.0F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(1.5347332F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(2.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      TextStyle textStyle0 = new TextStyle(777.6812F, false, false);
      assertFalse(textStyle0.isItalic());
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(textStyle0.isItalic());
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      float float0 = homeLight0.getNameAngle();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(bigDecimal0);
      
      boolean boolean0 = homeLight0.isTopRightPointAt(1552.2505F, 346.61972F, 1552.2505F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(content0);
      
      boolean boolean3 = homeLight0.isPointAt(619.8F, (-1.0F), 1904.516F);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(boolean3);
      
      homeLight0.setAngle((-3373.342F));
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.72846895F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      Float float0 = Float.valueOf((-362.88672F));
      assertEquals((-362.88672F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setVisible(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      TextStyle textStyle0 = new TextStyle((-362.88672F));
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean2 = homeLight1.isTopLeftPointAt(2292.444F, 2292.444F, 0.5F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean2);
      
      float float1 = homeLight0.getHeight();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean0);
      
      float float0 = homeLight0.getNameAngle();
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = homeLight0.getNameStyle();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(textStyle0);
      
      homeLight0.setNameStyle((TextStyle) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      homeLight0.setDescription((String) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.containsPoint((-1401.38F), (-1401.38F), 2.0F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float float0 = homeLight0.getShininess();
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(float0);
      
      boolean boolean2 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      String string0 = homeLight1.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(string0);
      
      Integer integer0 = Integer.valueOf((-617));
      assertEquals((-617), (int)integer0);
      assertNotNull(integer0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setX((-1163.707F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertEquals((-1163.707F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      String string1 = homeLight0.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNull(string1);
      
      homeLight2.setElevation(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isDeformable());
      assertEquals((-1163.707F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(content0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt((-1.0F), (-1.0F), (-1.0F));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt((-1153.9531F), (-1153.9531F), 1557.353F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean2 = homeLight0.isVisible();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertTrue(boolean2);
      
      homeLight0.setDescription((String) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setNameXOffset(1676.3F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean3 = homeLight0.isPointAt(1676.3F, 1.0F, 1.0F);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean3);
      
      Float float0 = homeLight0.getShininess();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(float0);
      
      String string0 = homeLight0.getCurrency();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(string0);
      
      Integer integer0 = Integer.valueOf((-29));
      assertEquals((-29), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf(2367);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2367, (int)integer1);
      assertNotNull(integer1);
      
      Integer integer2 = Integer.valueOf(18);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(18, (int)integer2);
      assertNotNull(integer2);
      
      Integer integer3 = Integer.valueOf((-1479));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-1479), (int)integer3);
      assertNotNull(integer3);
      
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "%Jj", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-36.7724F), (-36.7724F), (-36.7724F), false, (-2521.3F), 2.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertEquals((short)100, bigDecimal1.shortValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      Integer integer0 = new Integer((-1715));
      assertEquals((-1715), (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3);
      
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.setElevation(3869.2395F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(3869.2395F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(3869.2395F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setName("");
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf((-362.88672F));
      assertEquals((-362.88672F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-1), (-1));
      assertEquals((-1.0F), float1, 0.01F);
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = homeLight1.isResizable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean3);
      
      homeLight1.setDescription("u%X+");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("u%X+", homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setMovable(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("u%X+", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight1.isVisible();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals("u%X+", homeLight1.getDescription());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean4);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "+O *Hfkj(@ 'O;G");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      homeLight0.setMovable(false);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      boolean boolean3 = homeLight0.isVisible();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(boolean3);
      
      boolean boolean4 = homeLight0.isVisible();
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(boolean4);
      
      homeLight0.setMovable(false);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      
      boolean boolean5 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5);
      
      Integer integer0 = homeLight0.getColor();
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(integer0);
      
      homeLight0.setX((-1.0F));
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      homeLight0.setName("");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      boolean boolean0 = homeLight0.isResizable();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(boolean0);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(content0);
      
      homeLight0.setNameVisible(false);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      homeLight0.setNameXOffset((-362.89F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(boolean1);
      
      homeLight0.setY((-362.89F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(boolean2);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      
      boolean boolean3 = homeLight0.isResizable();
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertFalse(boolean3);
      
      homeLight0.setNameYOffset(645.2739F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      
      homeLight0.setNameYOffset((-362.89F));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      
      homeLight0.setDescription("");
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-362.89F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-1297.097F), 619.8F, 362.88672F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1297.097F), sash0.getWidth(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals(1, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      homeDoorOrWindow1.setShininess((Float) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      
      homeLight0.setName("com.eteks.sweethome3d.model.LightSource");
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      float float0 = homeLight0.getHeight();
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt((-1.0F), (-430.36545F), (-1.0F));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(boolean2);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isDeformable();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean0);
      
      float float0 = homeLight0.getDepth();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      Content content0 = homeLight1.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(content0);
      
      boolean boolean0 = homeLight1.isNameCenterPointAt(1832.1329F, 3484.2163F, 1832.1329F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      homeLight0.setName((String) null);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNotNull(homeLight0);
      
      homeLight0.setY((-362.43143F));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      
      homeLight0.setName("");
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.CatalogLight");
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(boolean1);
      
      Content content0 = homeLight0.getIcon();
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertNull(content0);
      
      homeLight0.setNameXOffset((-362.43143F));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      
      boolean boolean2 = homeLight0.isMovable();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(boolean2);
      
      boolean boolean3 = homeLight0.intersectsRectangle((-1081.6611F), (-1138.7733F), (-1081.6611F), 0.5F);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("", homeLight0.getName());
      assertFalse(boolean3);
      
      homeLight0.setNameVisible(true);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      
      homeLight0.setY((-362.43143F));
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      
      boolean boolean4 = homeLight0.isTopLeftPointAt((-415.875F), 0.0F, (-1670.2F));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-362.43143F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.43143F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isNameVisible());
      assertEquals("", homeLight0.getName());
      assertFalse(boolean4);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean0 = homeLight1.isVisible();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean0);
      
      homeLight0.setNameXOffset((-430.36545F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean1 = homeLight0.containsPoint(4.18663F, 4.18663F, (-1.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight1.isPointAt((-1820.0F), 40.156013F, (-1.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean2);
      
      Float float0 = homeLight1.getShininess();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(float0);
      
      String string0 = homeLight0.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNull(string0);
      
      Integer integer0 = Integer.valueOf((-29));
      assertEquals((-29), (int)integer0);
      assertNotNull(integer0);
      
      homeLight1.setX((-2575.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2575.0F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      Integer integer1 = homeLight0.getColor();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNull(integer1);
      
      String string1 = homeLight1.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals((-2575.0F), homeLight1.getX(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(string1);
      
      homeLight0.setElevation((-29));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals((-430.36545F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-29.0F), homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-29.0F), homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean3 = homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), 2.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean3);
      
      homeLight1.setName("");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4);
      
      BigDecimal bigDecimal0 = homeLight1.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(bigDecimal0);
      
      float float1 = homeLight1.getX();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float1, 0.01F);
      
      Random.setNextRandom(2146160491);
      float float2 = homeLight1.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.intersectsRectangle(1803.38F, 1803.38F, 1613.0F, 1803.38F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isPointAt((-1.0F), (-1.0F), (-1.0F));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean1);
      
      HomeLight homeLight1 = (HomeLight)homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertTrue(boolean1 == boolean0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(boolean1);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getCatalogId();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals("l@IX!,7):Hb r9", string0);
      assertEquals(0, sashArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      homeLight0.setMovable(false);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      
      boolean boolean3 = homeLight0.isVisible();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertTrue(boolean3);
      
      boolean boolean4 = homeLight0.isVisible();
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertTrue(boolean4);
      
      homeLight0.setVisible(false);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<&h");
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5);
      
      homeLight0.setMovable(false);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      
      Integer integer0 = homeLight0.getColor();
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertNull(integer0);
      
      homeLight0.setX((-1.0F));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      
      boolean boolean6 = homeLight0.isBackFaceShown();
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1.0F), homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isVisible());
      assertFalse(boolean6);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4);
      
      boolean boolean5 = homeLight0.isResizable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean5);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean6 = homeLight1.isResizable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean3);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean6);
      
      homeLight0.setNameYOffset(5.2831855F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      
      String string0 = homeLight1.getName();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getDescription());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(string0);
      
      boolean boolean7 = homeLight0.isVisible();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertTrue(boolean7);
      
      homeLight0.setDescription("TEXTURE");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("TEXTURE", homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setName("");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getIcon();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(uRLContent1.isJAREntry());
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      assertEquals(0, floatArray0.length);
      assertNotNull(uRLContent1);
      
      homeLight0.setNameXOffset((-621));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
      
      boolean boolean2 = homeLight0.isPointAt(3.4028235E38F, (-1262.7534F), (-374.59F));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertSame(uRLContent0, uRLContent1);
      assertFalse(boolean2);
      assertEquals(0, floatArray0.length);
      
      Float float0 = homeLight0.getShininess();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
      assertNull(float0);
      
      homeLight0.setNameAngle((-374.59F));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2.401122F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
      
      float float1 = homeLight0.getX();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2.401122F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertSame(uRLContent0, uRLContent1);
      assertEquals((-631.3767F), float1, 0.01F);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      homeLight0.setAngle(824.7025F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(1.6052394F, homeLight0.getAngle(), 0.01F);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight(1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset(4.909806F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.909806F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isPointAt(4.909806F, 4.909806F, 4.909806F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.909806F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(4.909806F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(4.909806F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1406.133F));
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1406.133F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      homeLight0.setName("*~MMF]Aj9Sq*wVqu5{");
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1406.133F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1406.133F), homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean0);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals((-362.88672F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertNotNull(textStyle1);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      homeLight0.setName("qr5*-wB=IMyiFe5f");
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("qr5*-wB=IMyiFe5f", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("qr5*-wB=IMyiFe5f", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("qr5*-wB=IMyiFe5f", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("qr5*-wB=IMyiFe5f", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      homeLight0.setNameYOffset((-1406.133F));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("qr5*-wB=IMyiFe5f", homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals((-1406.133F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isPointAt(375.44382F, 2287.7153F, 375.44382F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.containsPoint((-2515.7F), (-2515.7F), (-604.79F));
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(3803.6047F, 2.0F, 2.0F, 1455);
      assertEquals(2.0F, lightSource0.getZ(), 0.01F);
      assertEquals(1455, lightSource0.getColor());
      assertEquals(2.0F, lightSource0.getY(), 0.01F);
      assertEquals(3803.6047F, lightSource0.getX(), 0.01F);
      assertNull(lightSource0.getDiameter());
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      int int0 = Float.compare((-690.7199F), (-442.13876F));
      assertEquals((-1), int0);
      
      LightSource lightSource1 = new LightSource(255.0F, 1455, 1455, 1, (Float) (-442.13876F));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(1455.0F, lightSource1.getY(), 0.01F);
      assertEquals(1455.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-442.13876F), lightSource1.getDiameter(), 0.01F);
      assertEquals(255.0F, lightSource1.getX(), 0.01F);
      assertEquals(1, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float(0.13010137F);
      assertEquals(0.13010137F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = float0.equals("m20q['v,z");
      assertFalse(boolean0);
      
      lightSourceArray0[2] = lightSource1;
      lightSourceArray0[3] = lightSource1;
      float float1 = float0.floatValue();
      assertEquals(0.13010137F, float1, 0.01F);
      
      float float2 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.13010137F, float2, 0.01F);
      
      float float3 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(0.13010137F, float3, 0.01F);
      
      float float4 = float0.floatValue();
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(float4, float1, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(0.13010137F, float4, 0.01F);
      
      LightSource lightSource2 = new LightSource(255.0F, 1, (-690.7199F), (-453));
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals(1.0F, lightSource2.getY(), 0.01F);
      assertEquals((-690.7199F), lightSource2.getZ(), 0.01F);
      assertNull(lightSource2.getDiameter());
      assertEquals((-453), lightSource2.getColor());
      assertEquals(255.0F, lightSource2.getX(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[4] = lightSource2;
      LightSource lightSource3 = new LightSource(3780.11F, (-1953.861F), 3780.11F, 0);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertEquals(0, lightSource3.getColor());
      assertEquals(3780.11F, lightSource3.getZ(), 0.01F);
      assertEquals((-1953.861F), lightSource3.getY(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertEquals(3780.11F, lightSource3.getX(), 0.01F);
      assertNotNull(lightSource3);
      
      lightSourceArray0[5] = lightSource3;
      LightSource lightSource4 = new LightSource((-442.13876F), 2871.9F, 0.0F, 1, float0);
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertEquals((float)float0, (float)float4, 0.01F);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(0.13010137F, lightSource4.getDiameter(), 0.01F);
      assertEquals(1, lightSource4.getColor());
      assertEquals((-442.13876F), lightSource4.getX(), 0.01F);
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals(2871.9F, lightSource4.getY(), 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[6] = lightSource4;
      LightSource lightSource5 = new LightSource((-442.13876F), 2871.9F, 1455, 1231);
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertEquals(2871.9F, lightSource5.getY(), 0.01F);
      assertNull(lightSource5.getDiameter());
      assertEquals((-442.13876F), lightSource5.getX(), 0.01F);
      assertEquals(1455.0F, lightSource5.getZ(), 0.01F);
      assertEquals(1231, lightSource5.getColor());
      assertNotNull(lightSource5);
      
      lightSourceArray0[7] = lightSource5;
      Integer integer0 = new Integer(0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 1455;
      floatArray1[2] = 0.13010137F;
      floatArray1[3] = (-442.13876F);
      floatArray1[4] = 0.13010137F;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-442.13876F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 0.13010137F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 3803.6047F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 2.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 3803.6047F;
      floatArray4[1] = (float) 1455;
      floatArray4[2] = 0.13010137F;
      floatArray4[3] = 1.0F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal(2075);
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("m20q['v,z").when(light0).getCurrency();
      doReturn(2871.9F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(2.0F).when(light0).getElevation();
      doReturn(1.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.13010137F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean2 = homeLight0.isBottomRightPointAt(0.0F, 0.0F, (-1446.68F));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(boolean2);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean3 = homeLight0.isTopRightPointAt(1.0F, 891.8735F, (-1848.536F));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertTrue(boolean3);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      float float5 = homeLight0.getElevation();
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("", homeLight0.getName());
      assertEquals(0, (int)homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(2.0F, float5, 0.01F);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setElevation(2.0F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(content0);
      
      boolean boolean0 = homeLight0.isMovable();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      Sash sash0 = new Sash(2.0F, 13.88F, (-3430.364F), 2.0F, (-3430.364F));
      assertEquals(13.88F, sash0.getYAxis(), 0.01F);
      assertEquals(2.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-3430.364F), sash0.getEndAngle(), 0.01F);
      assertEquals(2.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-3430.364F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(content0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setNameXOffset(2.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(2.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setY((-1413.0F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals((-1413.0F), homeLight1.getY(), 0.01F);
      assertEquals(2.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isPointAt(2.0F, 714.1789F, 2.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals((-1413.0F), homeLight1.getY(), 0.01F);
      assertEquals(2.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      
      float float0 = homeLight1.getY();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals((-1413.0F), homeLight1.getY(), 0.01F);
      assertEquals(2.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals((-1413.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Float float0 = homeLight0.getShininess();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(float0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      String string0 = homeLight1.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(string0);
      
      Integer integer0 = Integer.valueOf((-617));
      assertEquals((-617), (int)integer0);
      assertNotNull(integer0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight2.setX((-1163.707F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1163.707F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      String string1 = homeLight0.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNull(string1);
      
      homeLight2.setElevation(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isDeformable());
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals((-1163.707F), homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(content0);
      
      boolean boolean0 = homeLight0.isMovable();
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt(1832.1329F, 1832.1329F, 1832.1329F);
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertTrue(boolean1);
      
      boolean boolean2 = homeLight0.isBackFaceShown();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNotNull(homeLight0);
      
      homeLight0.move((-1865.9305F), (-1.0F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals((-1865.9305F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = homeLight0.getValueAddedTax();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals((-1865.9305F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1, sashArray0.length);
      
      boolean boolean1 = homeLight0.isTopLeftPointAt(1.0F, (-35.5422F), 1.0F);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-29.0F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      homeLight0.setName("[Q\"}J/1i{Cl");
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean0);
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(content0);
      
      homeLight0.setNameXOffset((-389.5625F));
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean1 = homeLight0.isMovable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isNameCenterPointAt((-389.5625F), 1.0F, 1.0F);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals("[Q\"}J/1i{Cl", homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-29.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("<&h", propertyChangeListener0);
      assertEquals("<&h", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("<&h", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("<&h", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("<&h", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNull(bigDecimal0);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals("<&h", propertyChangeListenerProxy0.getPropertyName());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = homeLight0.isBottomRightPointAt((-448.0F), 1.0F, (-448.0F));
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean4);
      
      boolean boolean5 = homeLight0.isDeformable();
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean5);
      
      boolean boolean6 = homeLight1.isVisible();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean6);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("@:Iz99RY;8mSl_dL0T'", propertyChangeListener0);
      assertEquals("@:Iz99RY;8mSl_dL0T'", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("@:Iz99RY;8mSl_dL0T'", propertyChangeListenerProxy0.getPropertyName());
      
      float float0 = homePieceOfFurniture0.getDepth();
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      String string0 = homeLight0.getCatalogId();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setName("*~MMF]Aj9Sq*wVqu5{");
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getPlanIcon();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertFalse(uRLContent1.isJAREntry());
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      assertEquals(0, floatArray0.length);
      assertNotNull(uRLContent1);
      
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      Float float0 = Float.valueOf((-362.88672F));
      assertEquals((-362.88672F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      homeLight0.setX(0.5F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      Integer integer0 = homeLight2.getColor();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNull(integer0);
      
      String string0 = homeLight1.getCurrency();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNull(string0);
      
      float float1 = homeLight1.getAngle();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(0.0F, float1, 0.01F);
      
      String string1 = homeLight0.getCatalogId();
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.5F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNull(string1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "VALUE_ADDED_TAX");
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(boolean1);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setShininess((Float) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      System.setCurrentTimeMillis(0L);
      String string0 = homeDoorOrWindow1.getDescription();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals("0nC_Q ;8>:}tV", string0);
      assertEquals(0, sashArray0.length);
      assertNotNull(string0);
      
      float float0 = homeDoorOrWindow1.getHeight();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(362.88672F, float0, 0.01F);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isNameCenterPointAt((-1153.9531F), (-1153.9531F), 1557.353F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(boolean0);
      
      Level level0 = homeLight0.getLevel();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(level0);
      
      homeLight0.setVisible(true);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      homeLight0.setDescription((String) null);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 542, "]($Y", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(542, uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(":542", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(542, uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(":542", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[2] = 0.0F;
      floatArray1[5] = (float) 542;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (float) 542;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 542;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[1] = (float) 542;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray1;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-2309.3162F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (float) 542;
      floatArray0[4] = floatArray4;
      floatArray0[5] = floatArray1;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray5[0] = 1928.8F;
      floatArray0[6] = floatArray5;
      float[] floatArray6 = new float[7];
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) 542;
      floatArray4[4] = (float) 542;
      floatArray6[6] = 1928.8F;
      floatArray0[7] = floatArray6;
      float[] floatArray7 = new float[8];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      
      floatArray7[0] = 0.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 1928.8F;
      floatArray7[7] = 0.0F;
      floatArray0[8] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal((long) 542);
      assertEquals((short)542, bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 542, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(542, uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(":542", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("]($Y", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(542, uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(":542", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("]($Y", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("]($Y", homeLight0.getDescription());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(542.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setWidth(0.0F);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals(542, uRL0.getPort());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.toExternalForm());
      assertEquals(":542", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertEquals("]($Y", catalogLight0.getDescription());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isMovable());
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("]($Y", homeLight0.getDescription());
      assertEquals("", homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(542.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      homeDoorOrWindow1.setShininess((Float) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeLight0.setName("com.eteks.sweethome3d.model.LightSource");
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.LightSource", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      
      float float0 = homeLight0.getHeight();
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.LightSource", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      Float float0 = Float.valueOf(2850.5F);
      assertEquals(2850.5F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = Float.valueOf(2850.5F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2850.5F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Float float2 = Float.valueOf(2850.5F);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertEquals(2850.5F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = Float.valueOf(2850.5F);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertEquals(2850.5F, (float)float3, 0.01F);
      assertNotNull(float3);
      
      homeDoorOrWindow1.setShininess(float3);
      assertEquals((float)float3, (float)float0, 0.01F);
      assertEquals((float)float3, (float)float2, 0.01F);
      assertEquals((float)float3, (float)float1, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2850.5F, homeDoorOrWindow1.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow0.setDepth((-430.36545F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-430.36545F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(0, sashArray0.length);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      float float4 = homeDoorOrWindow1.getAngle();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-430.36545F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(2850.5F, homeDoorOrWindow1.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0.0F, float4, 0.01F);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle((-1485.56F));
      assertFalse(textStyle0.isItalic());
      assertEquals((-1485.56F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(textStyle0.isItalic());
      assertEquals((-1485.56F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(content0);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight(2.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(boolean0);
      
      homeLight0.setName((String) null);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(boolean1);
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertTrue(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertFalse(homeLight1.isNameVisible());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.containsPoint(1180.5F, 1180.5F, 2.401122F);
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3);
      
      homeLight1.setNameXOffset(0.5F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight1.setNameYOffset(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      homeLight0.setDescription("");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals("", homeLight0.getDescription());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(boolean1);
      
      homeLight0.setMovable(false);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 542, "]($Y", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[2] = (-336.56683F);
      floatArray1[5] = (float) 542;
      floatArray1[6] = 0.0F;
      floatArray1[7] = (float) 542;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-336.56683F);
      floatArray2[1] = (float) 542;
      floatArray2[2] = (-336.56683F);
      floatArray2[3] = (-336.56683F);
      floatArray0[1] = floatArray1;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[1] = (float) 542;
      floatArray3[2] = 0.0F;
      floatArray3[3] = (-336.56683F);
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray1;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-2309.3162F);
      floatArray4[4] = (float) 542;
      floatArray0[4] = floatArray4;
      floatArray0[5] = floatArray1;
      float[] floatArray5 = new float[2];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 1928.8F;
      floatArray0[6] = floatArray5;
      float[] floatArray6 = new float[7];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      
      floatArray6[0] = (-336.56683F);
      floatArray6[1] = 0.3926991F;
      floatArray6[2] = (-336.56683F);
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) 542;
      floatArray4[4] = (float) 542;
      floatArray6[6] = 1928.8F;
      floatArray0[7] = floatArray6;
      float[] floatArray7 = new float[8];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = (-336.56683F);
      floatArray7[1] = (-336.56683F);
      floatArray7[2] = (-336.56683F);
      floatArray7[3] = (-336.56683F);
      floatArray7[4] = 1928.8F;
      floatArray7[7] = (-336.56683F);
      floatArray0[8] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal((long) 542);
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-336.56683F), (-336.56683F), 542, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-336.56683F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-336.56683F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(catalogLight0);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-336.56683F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-336.56683F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(lightSourceArray1, lightSourceArray0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0, lightSourceArray1.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(lightSourceArray1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-336.56683F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-336.56683F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-336.56683F), homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("]($Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-168.28342F), homeLight0.getY(), 0.01F);
      assertEquals(542.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-168.28342F), homeLight0.getX(), 0.01F);
      assertEquals((-336.56683F), homeLight0.getDepth(), 0.01F);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setWidth(1831.8568F);
      assertNull(uRL0.toString());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals(":542", uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(542, uRL0.getPort());
      assertNull(uRL0.toExternalForm());
      assertEquals("]($Y", uRL0.getPath());
      assertEquals((byte)30, bigDecimal0.byteValue());
      assertEquals((short)542, bigDecimal0.shortValue());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("", catalogLight0.getName());
      assertFalse(catalogLight0.isTexturable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(catalogLight0.isDeformable());
      assertEquals(542.0F, catalogLight0.getHeight(), 0.01F);
      assertEquals("", catalogLight0.getId());
      assertNull(catalogLight0.getInformation());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getCreationDate());
      assertTrue(catalogLight0.isMovable());
      assertEquals((-336.56683F), catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertEquals((-336.56683F), catalogLight0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals("", homeLight0.getCatalogId());
      assertTrue(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(1831.8568F, homeLight0.getWidth(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals("]($Y", homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-168.28342F), homeLight0.getY(), 0.01F);
      assertEquals(542.0F, homeLight0.getHeight(), 0.01F);
      assertEquals((-168.28342F), homeLight0.getX(), 0.01F);
      assertEquals((-336.56683F), homeLight0.getDepth(), 0.01F);
      assertSame(lightSourceArray0, lightSourceArray1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setY(0.0F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 2373.78F, 0.0F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertFalse(homeLight2.isBackFaceShown());
      assertFalse(homeLight2.isTexturable());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertFalse(homeLight2.isResizable());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertFalse(homeLight2.isNameVisible());
      assertNull(homeLight2.getName());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      HomeTexture homeTexture0 = homeLight1.getTexture();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getCurrency());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setVisible(false);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isVisible());
      
      homeLight0.setName(";*qD<VxGlrW#");
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(";*qD<VxGlrW#", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isVisible());
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(";*qD<VxGlrW#", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(";*qD<VxGlrW#", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isNameCenterPointAt(1.0F, (-559.23895F), 1.0F);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(";*qD<VxGlrW#", homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isVisible());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setName("*~MMF]Aj9Sq*wVqu5{");
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      
      float float0 = homeLight0.getDepth();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertEquals((-621.0F), float0, 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean2 = homeLight0.isVisible();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals((-621), (int)homeLight0.getColor());
      assertTrue(boolean2);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals((-1.0F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight0.clone();
      boolean boolean1 = homeLight0.isBottomRightPointAt(1.0F, (-1.0F), (-1.0F));
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setY((-1.0F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      boolean boolean0 = homeLight0.isBottomLeftPointAt((-1.0F), 1.0F, (-430.36545F));
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(boolean0);
      
      homeLight0.setName("l@IX!,7):Hb r9");
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Sash sash0 = new Sash((-5.459078F), 619.8F, (-35.5422F), 619.8F, 362.88672F);
      assertEquals((-35.5422F), sash0.getWidth(), 0.01F);
      assertEquals(362.88672F, sash0.getEndAngle(), 0.01F);
      assertEquals(619.8F, sash0.getYAxis(), 0.01F);
      assertEquals(619.8F, sash0.getStartAngle(), 0.01F);
      assertEquals((-5.459078F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals((-1.0F), homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", homeLight0.getName());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(content0);
      
      long long0 = bigDecimal0.longValue();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(0L, long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l@IX!,7):Hb r9", "l@IX!,7):Hb r9", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1297.097F), (-1.0F), 362.88672F, (-5.459078F), true, (-3373.342F), (-3373.342F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.LightSource", true, false, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setShininess((Float) null);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setDepth(1.0F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      System.setCurrentTimeMillis(0L);
      String string0 = homeDoorOrWindow1.getDescription();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(362.88672F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.LightSource", catalogDoorOrWindow0.getCreator());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("l@IX!,7):Hb r9", catalogDoorOrWindow0.getId());
      assertEquals((-3373.342F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-5.459078F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1297.097F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-5.459078F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1297.097F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertEquals(362.88672F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-3373.342F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(362.88672F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1297.097F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-5.459078F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-648.5485F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-5.459078F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-3373.342F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals("0nC_Q ;8>:}tV", string0);
      assertEquals(0, sashArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "%Jj", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-36.7724F), (-36.7724F), (-36.7724F), false, (-2521.3F), 2.0F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean2 = homeDoorOrWindow0.isTopLeftPointAt(1.0F, (-1102.3F), (-1171.7788F));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(boolean2);
      assertEquals(0, sashArray0.length);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getValueAddedTax();
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((short)100, bigDecimal1.shortValue());
      assertEquals((byte)100, bigDecimal1.byteValue());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      Integer integer0 = new Integer((-1715));
      assertEquals((-1715), (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(2.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      
      String string0 = homeDoorOrWindow0.getCatalogId();
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(2.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals("", string0);
      assertEquals(0, sashArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(boolean0);
      
      Level level0 = new Level("I\"X_w:t", (-1476.4623F), 1009.58F, (-1476.4623F));
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertEquals("I\"X_w:t", level1.getName());
      assertEquals((-1476.4623F), level1.getHeight(), 0.01F);
      assertEquals(1009.58F, level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      
      float float0 = level0.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertNotSame(level0, level1);
      assertEquals((-1476.4623F), float0, 0.01F);
      
      float float1 = level0.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertEquals(float1, float0, 0.01F);
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertNotSame(level0, level1);
      assertEquals((-1476.4623F), float1, 0.01F);
      
      float float2 = level0.getHeight();
      assertFalse(level0.equals((Object)level1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertNotSame(level0, level1);
      assertEquals((-1476.4623F), float2, 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("I\"X_w:t", propertyChangeListener0);
      assertEquals("I\"X_w:t", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertEquals("I\"X_w:t", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(level0, level1);
      
      boolean boolean1 = homeLight0.isAtLevel(level0);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1476.4623F), level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1009.58F, level0.getFloorThickness(), 0.01F);
      assertEquals("I\"X_w:t", level0.getName());
      assertNotSame(level0, level1);
      assertFalse(boolean1);
      
      Level level2 = new Level("I\"X_w:t", (-1476.4623F), (-1476.4623F), (-1476.4623F));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals("I\"X_w:t", level2.getName());
      assertTrue(level2.isVisible());
      assertEquals((-1476.4623F), level2.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level2.getFloorThickness(), 0.01F);
      assertNotNull(level2);
      
      level2.setHeight(0.0F);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals("I\"X_w:t", level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-1476.4623F), level2.getFloorThickness(), 0.01F);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      level2.setFloorThickness(3186.128F);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals("I\"X_w:t", level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(3186.128F, level2.getFloorThickness(), 0.01F);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      homeLight0.setLevel(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals("I\"X_w:t", level2.getName());
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals(3186.128F, level2.getFloorThickness(), 0.01F);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(bigDecimal0);
      
      Level level3 = homeLight0.getLevel();
      assertFalse(level3.equals((Object)level0));
      assertFalse(level3.equals((Object)level1));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("I\"X_w:t", level3.getName());
      assertTrue(level3.isVisible());
      assertEquals((-1476.4623F), level3.getElevation(), 0.01F);
      assertEquals(0.0F, level3.getHeight(), 0.01F);
      assertEquals(3186.128F, level3.getFloorThickness(), 0.01F);
      assertNotSame(level3, level0);
      assertSame(level3, level2);
      assertNotSame(level3, level1);
      assertNotNull(level3);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.containsPoint(1180.5F, 1180.5F, 2.401122F);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(boolean2);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean3 = homeLight0.isResizable();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(boolean3);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4);
      
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      assertTrue(textStyle0.isItalic());
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(textStyle0.isItalic());
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean5 = homeLight1.isTopLeftPointAt(0.5F, 2.0F, 2.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isDeformable());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isModelMirrored());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isTopRightPointAt((-3345.614F), 2.0F, (-362.43143F));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean2);
      
      homeLight0.setMovable(false);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      
      boolean boolean3 = homeLight0.isVisible();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(boolean3);
      
      TextStyle textStyle0 = new TextStyle(777.6812F, false, false);
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(777.6812F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-621));
      assertEquals((-621), (int)integer0);
      assertNotNull(integer0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      float[][] floatArray0 = new float[0][3];
      BigDecimal bigDecimal0 = BigDecimal.valueOf((double) (-374.59F));
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getCurrency();
      doReturn((float)(-621)).when(light0).getDepth();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getDescription();
      doReturn((-374.59F)).when(light0).getElevation();
      doReturn(3.4028235E38F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("*~MMF]Aj9Sq*wVqu5{").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1262.7534F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setName("");
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertTrue(boolean0);
      assertEquals(0, floatArray0.length);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertFalse(boolean1);
      assertEquals(0, floatArray0.length);
      
      homeLight0.setVisible(false);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals(0, floatArray0.length);
      
      boolean boolean2 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      URLContent uRLContent1 = (URLContent)homeLight0.getIcon();
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertFalse(uRLContent1.isJAREntry());
      assertSame(uRLContent0, uRLContent1);
      assertSame(uRLContent1, uRLContent0);
      assertEquals(0, floatArray0.length);
      assertNotNull(uRLContent1);
      
      homeLight0.setNameXOffset((-621));
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
      
      boolean boolean3 = homeLight0.isMovable();
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertSame(uRLContent0, uRLContent1);
      assertTrue(boolean3);
      assertEquals(0, floatArray0.length);
      
      homeLight0.setNameVisible(false);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short) (-374), bigDecimal0.shortValue());
      assertEquals((byte) (-118), bigDecimal0.byteValue());
      assertEquals((-631.3767F), homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getCurrency());
      assertEquals((-621), (int)homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals((-374.59F), homeLight0.getGroundElevation(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-621.0F), homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture", homeLight0.getStaircaseCutOutShape());
      assertEquals((-1262.7534F), homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals((-374.59F), homeLight0.getElevation(), 0.01F);
      assertEquals("*~MMF]Aj9Sq*wVqu5{", homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3.4028235E38F, homeLight0.getHeight(), 0.01F);
      assertEquals((-310.5F), homeLight0.getY(), 0.01F);
      assertEquals((-621.0F), homeLight0.getNameXOffset(), 0.01F);
      assertSame(uRLContent0, uRLContent1);
      assertEquals(0, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      homeLight0.setName("");
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      boolean boolean0 = homeLight0.isVisible();
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(boolean1);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle((-1));
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      homeLight0.setName("E/&}Itkd");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(boolean2);
      
      homeLight0.setNameYOffset(5.2831855F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", 549, "]($Y", uRLStreamHandler0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 549;
      floatArray1[1] = (float) 549;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 2.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 2.0F;
      floatArray1[8] = 2.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 2370.0F;
      floatArray2[1] = (float) 549;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 2.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 2370.0F;
      floatArray3[1] = (float) 549;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 2370.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = (-2309.3162F);
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) 549;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray5));
      
      floatArray7[0] = 1928.8F;
      floatArray7[1] = 2.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[7];
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = 0.0F;
      floatArray8[1] = 0.3926991F;
      floatArray8[2] = 0.0F;
      floatArray8[3] = 0.0F;
      floatArray8[4] = 2.0F;
      floatArray8[5] = (float) 549;
      floatArray8[6] = 1928.8F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[8];
      assertFalse(floatArray9.equals((Object)floatArray8));
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray1));
      
      floatArray9[0] = 0.0F;
      floatArray9[1] = 2.0F;
      floatArray9[2] = 0.0F;
      floatArray9[3] = 2.0F;
      floatArray9[4] = 1928.8F;
      floatArray9[5] = 0.0F;
      floatArray9[6] = 0.0F;
      floatArray9[7] = 2370.0F;
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal((long) 549);
      assertEquals((byte)37, bigDecimal0.byteValue());
      assertEquals((short)549, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight("", "", "]($Y", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 2.0F, 0.0F, true, lightSourceArray0, "", floatArray0, "MRFlX_C*<uO8L", true, true, false, bigDecimal0, bigDecimal0, "MRFlX_C*<uO8L");
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)37, bigDecimal0.byteValue());
      assertEquals((short)549, bigDecimal0.shortValue());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(catalogLight0);
      
      LightSource[] lightSourceArray1 = catalogLight0.getLightSources();
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)37, bigDecimal0.byteValue());
      assertEquals((short)549, bigDecimal0.shortValue());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertSame(lightSourceArray0, lightSourceArray1);
      assertSame(lightSourceArray1, lightSourceArray0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertEquals(0, lightSourceArray1.length);
      assertNotNull(lightSourceArray1);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)37, bigDecimal0.byteValue());
      assertEquals((short)549, bigDecimal0.shortValue());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("]($Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
      assertNotNull(homeLight0);
      
      homeLight0.setWidth(1831.8568F);
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(":549", uRL0.getAuthority());
      assertEquals("]($Y", uRL0.getFile());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals(549, uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("]($Y", uRL0.getPath());
      assertNull(uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)37, bigDecimal0.byteValue());
      assertEquals((short)549, bigDecimal0.shortValue());
      assertEquals("]($Y", catalogLight0.getDescription());
      assertEquals(0.0F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertEquals("", catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getId());
      assertEquals(0.0F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isTexturable());
      assertEquals(2.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertEquals("", catalogLight0.getName());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCurrency());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isModifiable());
      assertEquals("MRFlX_C*<uO8L", catalogLight0.getCreator());
      assertTrue(homeLight0.isResizable());
      assertEquals("", homeLight0.getCatalogId());
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals("]($Y", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals("MRFlX_C*<uO8L", homeLight0.getCurrency());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(1831.8568F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertSame(lightSourceArray0, lightSourceArray1);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(9, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Comparator<HomePieceOfFurniture> comparator0 = HomePieceOfFurniture.getFurnitureComparator((HomePieceOfFurniture.SortableProperty) null);
      assertNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      Sash sash0 = new Sash((-3430.364F), (-3430.364F), (-1838.16F), 3.4028235E38F, (-1838.16F));
      assertEquals((-1838.16F), sash0.getEndAngle(), 0.01F);
      assertEquals(3.4028235E38F, sash0.getStartAngle(), 0.01F);
      assertEquals((-3430.364F), sash0.getXAxis(), 0.01F);
      assertEquals((-3430.364F), sash0.getYAxis(), 0.01F);
      assertEquals((-1838.16F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(content0);
      
      Sash[] sashArray0 = new Sash[1];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("X", "com.eteks.sweethome3d.model.HomePieceOfFurniture$18", "", (Content) null, (Content) null, (Content) null, (-27.247322F), 0.5F, (-1838.16F), (-3430.364F), true, 22.073292F, 0.5F, sashArray0, (float[][]) null, "0nC_Q ;8>:}tV", true, false, false, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.073292F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("X", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1838.16F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.073292F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("X", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1838.16F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("X", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3430.364F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(22.073292F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1838.16F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-13.623661F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", homeDoorOrWindow0.getName());
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(1, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.073292F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("X", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1838.16F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("X", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3430.364F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(22.073292F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1838.16F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-13.623661F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", homeDoorOrWindow0.getName());
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.073292F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("X", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1838.16F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("X", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3430.364F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(22.073292F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1838.16F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-13.623661F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", homeDoorOrWindow0.getName());
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertNotNull(bigDecimal2);
      
      BigDecimal bigDecimal3 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(bigDecimal3);
      
      boolean boolean0 = homeDoorOrWindow0.isNameCenterPointAt((-1.0F), 6.1206183F, 3.4028235E38F);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.073292F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("X", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getCreator());
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1838.16F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-3430.364F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("X", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3430.364F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.25F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(22.073292F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertEquals((-1838.16F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-13.623661F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$18", homeDoorOrWindow0.getName());
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-27.247322F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertSame(bigDecimal0, bigDecimal2);
      assertSame(bigDecimal0, bigDecimal1);
      assertTrue(boolean0);
      assertEquals(1, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setY((-389.5625F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean0 = homeLight1.isResizable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean0);
      
      Content content0 = homeLight1.getIcon();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNull(content0);
      
      homeLight0.setNameXOffset((-389.5625F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      boolean boolean1 = homeLight0.isMovable();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-389.5625F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      homeLight2.setElevation((-389.5625F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals((-389.5625F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-389.5625F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-389.5625F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      Random.setNextRandom((-2146872528));
      float float0 = homeLight2.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.5625F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals((-389.5625F), homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertTrue(homeLight1.isVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertNull(homeLight2.getDescription());
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getShininess());
      assertFalse(homeLight2.isResizable());
      assertFalse(homeLight2.isMovable());
      assertEquals((-389.5625F), homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isNameVisible());
      assertEquals((-389.5625F), homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertEquals((-389.5625F), homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertEquals((-389.5625F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      homeLight0.setName(";*qP<VxGlrW#");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(";*qP<VxGlrW#", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(";*qP<VxGlrW#", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(";*qP<VxGlrW#", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean1);
      
      homeLight0.setName(";*qP<VxGlrW#");
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(";*qP<VxGlrW#", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      
      boolean boolean2 = homeLight0.isModelMirrored();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(";*qP<VxGlrW#", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "<&h");
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      boolean boolean3 = homeLight0.containsPoint((-2165.0F), (-2566.747F), (-326.23566F));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean3);
      
      boolean boolean4 = homeLight0.isVisible();
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(boolean4);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setMovable(false);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      BigDecimal bigDecimal0 = homeLight2.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNull(bigDecimal0);
      
      homeLight2.setX(0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      boolean boolean5 = homeLight2.isBottomRightPointAt(2745.767F, 1676.3F, (-326.23566F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getColor());
      assertNull(homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertFalse(homeLight2.isBackFaceShown());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertFalse(homeLight2.isDoorOrWindow());
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertFalse(homeLight2.isResizable());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle((-1297.097F), false, false);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-1297.097F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      homeLight0.setNameXOffset((-1297.097F));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      
      boolean boolean0 = homeLight0.containsPoint((-1297.097F), (-1.0F), 1.0F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(boolean0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean1 = homeLight1.isPointAt(1.0F, 1.5347332F, (-483.52F));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean1);
      
      HomeLight homeLight2 = homeLight1.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1297.097F), homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertNotNull(homeLight2);
      
      float float0 = homeLight2.getNameXOffset();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals((-1297.097F), homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isMovable());
      assertNull(homeLight1.getColor());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getName());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertTrue(homeLight2.isVisible());
      assertFalse(homeLight2.isDeformable());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getCurrency());
      assertEquals((-1297.097F), homeLight2.getNameXOffset(), 0.01F);
      assertNull(homeLight2.getName());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertNull(homeLight2.getShininess());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isTexturable());
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertNotSame(homeLight2, homeLight0);
      assertNotSame(homeLight2, homeLight1);
      assertEquals((-1297.097F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      Sash sash0 = new Sash(2.0F, 13.88F, (-3430.364F), 2.0F, (-3430.364F));
      assertEquals(2.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(13.88F, sash0.getYAxis(), 0.01F);
      assertEquals((-3430.364F), sash0.getEndAngle(), 0.01F);
      assertEquals(2.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-3430.364F), sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Content content0 = homeLight0.getPlanIcon();
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(content0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("0nC_Q ;8>:}tV", " p|s", "0nC_Q ;8>:}tV", (Content) null, (Content) null, (Content) null, (-1.0F), 1.0F, 812.0F, (-1043.6814F), true, (-52.109905F), 0.5F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(" p|s", catalogDoorOrWindow0.getName());
      assertEquals((-52.109905F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1043.6814F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(812.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(" p|s", catalogDoorOrWindow0.getName());
      assertEquals((-52.109905F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1043.6814F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(812.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(" p|s", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-52.109905F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(812.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(" p|s", catalogDoorOrWindow0.getName());
      assertEquals((-52.109905F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1043.6814F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(812.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(" p|s", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-52.109905F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(812.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(bigDecimal1);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals(" p|s", catalogDoorOrWindow0.getName());
      assertEquals((-52.109905F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.5F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals(1.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1043.6814F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(812.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("0nC_Q ;8>:}tV", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(1.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(" p|s", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-52.109905F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1043.6814F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(812.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(" p|s", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getDescription());
      assertEquals((-1043.6814F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("0nC_Q ;8>:}tV", homeDoorOrWindow1.getCatalogId());
      assertEquals((-52.109905F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.5F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(812.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isDeformable());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.5F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1043.6814F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setDepth(812.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNotNull(homePieceOfFurniture0);
      
      BigDecimal bigDecimal0 = homePieceOfFurniture0.getPrice();
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotNull(homeLight0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      boolean boolean2 = homeLight0.isVisible();
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertTrue(boolean2);
      
      homeLight0.setDescription((String) null);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      homeLight0.setNameXOffset(1676.3F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      
      TextStyle textStyle0 = new TextStyle(1676.3F, false, false);
      assertEquals(1676.3F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      assertEquals(1676.3F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals(1676.3F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertNotNull(textStyle1);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      float[][] floatArray0 = homeLight1.getPoints();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      HomeLight homeLight2 = homeLight0.clone();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getName());
      assertNull(homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1676.3F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      assertNotNull(homeLight2);
      
      homeLight2.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty");
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight1));
      assertFalse(homeLight2.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight2.getDepth(), 0.01F);
      assertNull(homeLight2.getDescription());
      assertEquals(0.5F, homeLight2.getPower(), 0.01F);
      assertEquals(1676.3F, homeLight2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getElevation(), 0.01F);
      assertNull(homeLight2.getCatalogId());
      assertFalse(homeLight2.isTexturable());
      assertFalse(homeLight2.isResizable());
      assertEquals(0.0F, homeLight2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight2.getX(), 0.01F);
      assertNull(homeLight2.getShininess());
      assertEquals(0.0F, homeLight2.getHeight(), 0.01F);
      assertFalse(homeLight2.isMovable());
      assertNull(homeLight2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight2.getNameAngle(), 0.01F);
      assertFalse(homeLight2.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty", homeLight2.getName());
      assertFalse(homeLight2.isNameVisible());
      assertEquals(0.0F, homeLight2.getWidth(), 0.01F);
      assertTrue(homeLight2.isVisible());
      assertNull(homeLight2.getCurrency());
      assertNull(homeLight2.getColor());
      assertFalse(homeLight2.isDoorOrWindow());
      assertEquals(0.0F, homeLight2.getY(), 0.01F);
      assertEquals(0.0F, homeLight2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight2.getAngle(), 0.01F);
      assertFalse(homeLight2.isModelMirrored());
      assertFalse(homeLight2.isBackFaceShown());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight2, homeLight1);
      assertNotSame(homeLight2, homeLight0);
      
      boolean boolean3 = homeLight1.isVisible();
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertTrue(boolean3);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean4 = homeLight1.isBottomRightPointAt(153.065F, 1676.3F, 1.0F);
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean4);
      
      boolean boolean5 = homeLight1.isNameCenterPointAt(1.0F, 438.7F, (-1192.6039F));
      assertFalse(homeLight0.equals((Object)homeLight2));
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(homeLight1.equals((Object)homeLight2));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(1676.3F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertFalse(homeLight1.isMovable());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertNull(homeLight1.getShininess());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(1676.3F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNotSame(homeLight0, homeLight2);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight2);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean5);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      float[][] floatArray0 = homeLight0.getPoints();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      homeLight0.setName("");
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = homeLight0.isVisible();
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(boolean0);
      
      homeLight0.setMovable(false);
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy(";", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(";", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(";", propertyChangeListenerProxy1.getPropertyName());
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNotNull(homeLight0);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getShininess());
      assertNull(homeLight1.getCatalogId());
      assertFalse(homeLight1.isResizable());
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      Level level0 = new Level("", (-1476.4623F), (-486.5476F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertEquals((-486.5476F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      
      float float0 = level1.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertEquals((-486.5476F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals((-1476.4623F), float0, 0.01F);
      
      float float1 = level0.getElevation();
      assertFalse(level0.equals((Object)level1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(level0, level1);
      assertEquals((-1476.4623F), float1, 0.01F);
      
      float float2 = level1.getHeight();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertEquals((-486.5476F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertEquals(0.0F, float2, 0.01F);
      
      Level level2 = level1.clone();
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertEquals((-486.5476F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-486.5476F), level2.getFloorThickness(), 0.01F);
      assertEquals("", level2.getName());
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      assertNotNull(level2);
      
      homeLight0.setLevel(level2);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-486.5476F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertEquals((-486.5476F), level1.getFloorThickness(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals((-1476.4623F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-1476.4623F), level2.getElevation(), 0.01F);
      assertEquals(0.0F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-486.5476F), level2.getFloorThickness(), 0.01F);
      assertEquals("", level2.getName());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      float float3 = homeLight0.getGroundElevation();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertEquals((-1476.4623F), float3, 0.01F);
      
      homeLight0.setName("+I7");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("+I7", homeLight0.getName());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals((-1476.4623F), homeLight0.getGroundElevation(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight1.setVisible(true);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight1.isDoorOrWindow());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isBackFaceShown());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertNull(homeLight1.getCurrency());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertFalse(homeLight1.isNameVisible());
      assertNull(homeLight1.getName());
      assertNull(homeLight1.getCatalogId());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean3 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      
      TextStyle textStyle0 = new TextStyle(5.2831855F, true, true);
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      homeLight0.setNameStyle(textStyle0);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(5.2831855F, textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertNotSame(homeLight0, homeLight1);
      
      // Undeclared exception!
      try { 
        homeLight0.setWidth(5.2831855F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      Content content0 = homeLight0.getIcon();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(content0);
      
      boolean boolean0 = homeLight0.isMovable();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isNameCenterPointAt(1831.8568F, 1831.8568F, 1831.8568F);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(boolean2);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      Level level0 = homeLight0.getLevel();
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(level0);
      
      boolean boolean3 = homeLight0.isAtLevel((Level) null);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(boolean3);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(boolean2);
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNull(content0);
      
      homeLight0.setName("<&h");
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      homeLight0.setNameXOffset(2091.123F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      
      boolean boolean3 = homeLight0.isMovable();
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(boolean3);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertTrue(homeLight1.isVisible());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertEquals(2091.123F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertNull(homeLight1.getCurrency());
      assertEquals("<&h", homeLight1.getName());
      assertNull(homeLight1.getShininess());
      assertFalse(homeLight1.isResizable());
      assertFalse(homeLight1.isTexturable());
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertNull(homeLight1.getDescription());
      assertFalse(homeLight1.isDoorOrWindow());
      assertNull(homeLight1.getColor());
      assertFalse(homeLight1.isNameVisible());
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      homeLight0.setDescription("<&h");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("<&h", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      
      boolean boolean4 = homeLight0.containsPoint((-2578.33F), 2091.123F, 0.0F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("<&h", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean4);
      
      boolean boolean5 = homeLight0.isTopRightPointAt((-2578.33F), 0.0F, 2091.123F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("<&h", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertFalse(boolean5);
      
      BigDecimal bigDecimal0 = homeLight0.getValueAddedTax();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(2091.123F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("<&h", homeLight0.getDescription());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals("<&h", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertNotSame(homeLight0, homeLight1);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("SI]Ihx{O/rfxZk{pbl", (PropertyChangeListener) null);
      assertEquals("SI]Ihx{O/rfxZk{pbl", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("SI]Ihx{O/rfxZk{pbl", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertNotNull(propertyChangeListenerProxy1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertEquals("SI]Ihx{O/rfxZk{pbl", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy2.getPropertyName());
      assertNotNull(propertyChangeListenerProxy2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      Sash sash0 = new Sash((-3014.3748F), (-3014.3748F), (-448.0F), (-3014.3748F), 1288.6956F);
      assertEquals((-3014.3748F), sash0.getXAxis(), 0.01F);
      assertEquals((-3014.3748F), sash0.getYAxis(), 0.01F);
      assertEquals((-448.0F), sash0.getWidth(), 0.01F);
      assertEquals((-3014.3748F), sash0.getStartAngle(), 0.01F);
      assertEquals(1288.6956F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1.0F, 1.0F, 1.0F, 646.0912F, 0.0F);
      assertFalse(sash1.equals((Object)sash0));
      assertEquals(1.0F, sash1.getWidth(), 0.01F);
      assertEquals(646.0912F, sash1.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash1.getYAxis(), 0.01F);
      assertEquals(1.0F, sash1.getXAxis(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-3700.785F), 1288.6956F, 1.0F, (-3700.785F), 927.4047F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertEquals((-3700.785F), sash2.getStartAngle(), 0.01F);
      assertEquals((-3700.785F), sash2.getXAxis(), 0.01F);
      assertEquals(1288.6956F, sash2.getYAxis(), 0.01F);
      assertEquals(1.0F, sash2.getWidth(), 0.01F);
      assertEquals(927.4047F, sash2.getEndAngle(), 0.01F);
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(956.69006F, 0.0F, 1.0F, 2.0F, 749.8737F);
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash2));
      assertEquals(2.0F, sash3.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash3.getYAxis(), 0.01F);
      assertEquals(749.8737F, sash3.getEndAngle(), 0.01F);
      assertEquals(1.0F, sash3.getWidth(), 0.01F);
      assertEquals(956.69006F, sash3.getXAxis(), 0.01F);
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(956.69006F, 0.5F, 362.88672F, (-3700.785F), (-1297.097F));
      assertFalse(sash4.equals((Object)sash2));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash0));
      assertEquals((-1297.097F), sash4.getEndAngle(), 0.01F);
      assertEquals(362.88672F, sash4.getWidth(), 0.01F);
      assertEquals((-3700.785F), sash4.getStartAngle(), 0.01F);
      assertEquals(0.5F, sash4.getYAxis(), 0.01F);
      assertEquals(956.69006F, sash4.getXAxis(), 0.01F);
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.FurnitureCategory", "BACKGROUND_IMAGE", "SI]Ihx{O/rfxZk{pbl", uRLContent0, uRLContent0, uRLContent0, (-3014.3748F), (-448.0F), (-3014.3748F), (-448.0F), true, (-448.0F), (-448.0F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.FurnitureCategory", true, true, true, bigDecimal0, bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("BACKGROUND_IMAGE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-448.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("SI]Ihx{O/rfxZk{pbl", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(5, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("BACKGROUND_IMAGE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-448.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("SI]Ihx{O/rfxZk{pbl", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeDoorOrWindow0.getCatalogId());
      assertEquals((-448.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-448.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1507.1874F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-448.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("SI]Ihx{O/rfxZk{pbl", homeDoorOrWindow0.getDescription());
      assertEquals("BACKGROUND_IMAGE", homeDoorOrWindow0.getName());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-224.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("BACKGROUND_IMAGE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-448.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("SI]Ihx{O/rfxZk{pbl", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeDoorOrWindow0.getCatalogId());
      assertEquals((-448.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-448.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1507.1874F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-448.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("SI]Ihx{O/rfxZk{pbl", homeDoorOrWindow0.getDescription());
      assertEquals("BACKGROUND_IMAGE", homeDoorOrWindow0.getName());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-224.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("SI]Ihx{O/rfxZk{pbl", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-3014.3748F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1507.1874F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-224.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-448.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-448.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("BACKGROUND_IMAGE", homeDoorOrWindow1.getName());
      assertEquals((-3014.3748F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-448.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setDepth(362.88672F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("BACKGROUND_IMAGE", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-448.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("SI]Ihx{O/rfxZk{pbl", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-448.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3014.3748F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeDoorOrWindow0.getCatalogId());
      assertEquals((-448.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-448.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1507.1874F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-448.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("SI]Ihx{O/rfxZk{pbl", homeDoorOrWindow0.getDescription());
      assertEquals("BACKGROUND_IMAGE", homeDoorOrWindow0.getName());
      assertEquals((-3014.3748F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-224.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.FurnitureCategory", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("SI]Ihx{O/rfxZk{pbl", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-3014.3748F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1507.1874F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(362.88672F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-224.0F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-448.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-448.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("BACKGROUND_IMAGE", homeDoorOrWindow1.getName());
      assertEquals((-3014.3748F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-448.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(5, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setHeight(1.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      homeLight0.setNameAngle((-1));
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      homeLight0.setName("E/&}Itkd");
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      boolean boolean0 = homeLight0.isVisible();
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(boolean1);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(boolean2);
      
      boolean boolean3 = homeLight0.isBottomRightPointAt((-1283.5449F), (-1), (-1));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals("E/&}Itkd", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(5.2831855F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertEquals((-362.88672F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertNotNull(textStyle1);
      
      homeLight0.setNameStyle(textStyle1);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertFalse(textStyle0.isItalic());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertEquals((-362.88672F), textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      homeLight0.setName("");
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeLight0.isVisible();
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(boolean1);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(boolean2);
      
      Content content0 = homeLight0.getModel();
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(3042.162F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3042.162F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3042.162F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getColor());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(3042.162F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setNameXOffset((-389.562F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      boolean boolean0 = homeLight0.isPointAt((-389.562F), (-389.562F), (-389.562F));
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt((-389.562F), (-389.562F), (-389.562F));
      assertTrue(boolean1 == boolean0);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals((-389.562F), homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      Level level0 = homeLight0.getLevel();
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(level0);
      
      homeLight0.setLevel((Level) null);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      homeLight0.setDescription((String) null);
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      homeLight0.setNameYOffset(1.0F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      homeLight0.setNameVisible(false);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getNameYOffset(), 0.01F);
      
      boolean boolean1 = homeLight0.isNameCenterPointAt((-559.23895F), 1.0F, 1.0F);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(1.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean1);
      
      Float float0 = Float.valueOf(1432.9275F);
      assertEquals(1432.9275F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      boolean boolean2 = homeLight0.isResizable();
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertFalse(boolean2);
      
      HomeLight homeLight1 = homeLight0.clone();
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertNotNull(homeLight1);
      
      boolean boolean3 = homeLight1.isBottomLeftPointAt(1432.9275F, 1432.9275F, 1432.9275F);
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertNull(homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      assertFalse(boolean3);
      
      homeLight1.setName("l@IX!,7):Hb r9");
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight1.equals((Object)homeLight0));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight1.getCurrency());
      assertFalse(homeLight1.isNameVisible());
      assertEquals(0.0F, homeLight1.getNameYOffset(), 0.01F);
      assertNull(homeLight1.getColor());
      assertEquals(0.0F, homeLight1.getWidth(), 0.01F);
      assertFalse(homeLight1.isDoorOrWindow());
      assertFalse(homeLight1.isResizable());
      assertEquals(0.0F, homeLight1.getX(), 0.01F);
      assertFalse(homeLight1.isMovable());
      assertEquals(0.0F, homeLight1.getY(), 0.01F);
      assertEquals(0.0F, homeLight1.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight1.getGroundElevation(), 0.01F);
      assertNull(homeLight1.getStaircaseCutOutShape());
      assertTrue(homeLight1.isVisible());
      assertNull(homeLight1.getShininess());
      assertEquals(0.0F, homeLight1.getNameAngle(), 0.01F);
      assertFalse(homeLight1.isDeformable());
      assertEquals(0.0F, homeLight1.getNameXOffset(), 0.01F);
      assertEquals("l@IX!,7):Hb r9", homeLight1.getName());
      assertEquals(0.0F, homeLight1.getDepth(), 0.01F);
      assertNull(homeLight1.getCatalogId());
      assertEquals(0.0F, homeLight1.getElevation(), 0.01F);
      assertEquals(0.5F, homeLight1.getPower(), 0.01F);
      assertFalse(homeLight1.isTexturable());
      assertNull(homeLight1.getDescription());
      assertEquals(0.0F, homeLight1.getAngle(), 0.01F);
      assertFalse(homeLight1.isModelMirrored());
      assertFalse(homeLight1.isBackFaceShown());
      assertNotSame(homeLight0, homeLight1);
      assertNotSame(homeLight1, homeLight0);
      
      boolean boolean4 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      
      BigDecimal bigDecimal0 = homeLight0.getPriceValueAddedTaxIncluded();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotSame(homeLight0, homeLight1);
      assertNull(bigDecimal0);
      
      float float1 = homeLight0.getDepth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, float1, 0.01F);
      
      float float2 = homeLight0.getWidth();
      assertFalse(homeLight0.equals((Object)homeLight1));
      assertEquals(float2, float1, 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isMovable());
      assertNotSame(homeLight0, homeLight1);
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(3803.6047F, 2.0F, 2.0F, 1455);
      assertNull(lightSource0.getDiameter());
      assertEquals(1455, lightSource0.getColor());
      assertEquals(2.0F, lightSource0.getZ(), 0.01F);
      assertEquals(3803.6047F, lightSource0.getX(), 0.01F);
      assertEquals(2.0F, lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      int int0 = Float.compare((-690.7199F), (-442.13876F));
      assertEquals((-1), int0);
      
      LightSource lightSource1 = new LightSource(255.0F, 1455, 1455, 1, (Float) (-442.13876F));
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertEquals(1455.0F, lightSource1.getZ(), 0.01F);
      assertEquals((-442.13876F), lightSource1.getDiameter(), 0.01F);
      assertEquals(1455.0F, lightSource1.getY(), 0.01F);
      assertEquals(255.0F, lightSource1.getX(), 0.01F);
      assertEquals(1, lightSource1.getColor());
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float(0.13010137F);
      assertEquals(0.13010137F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      lightSourceArray0[2] = lightSource1;
      float float1 = float0.floatValue();
      assertEquals(0.13010137F, float1, 0.01F);
      
      Integer integer0 = new Integer(1);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      LightSource lightSource2 = new LightSource(2075, (-690.7199F), 0.13010137F, 1455, float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertEquals((-690.7199F), lightSource2.getY(), 0.01F);
      assertEquals(1455, lightSource2.getColor());
      assertEquals(0.13010137F, lightSource2.getDiameter(), 0.01F);
      assertEquals(0.13010137F, lightSource2.getZ(), 0.01F);
      assertEquals(2075.0F, lightSource2.getX(), 0.01F);
      assertNotNull(lightSource2);
      
      lightSourceArray0[4] = lightSource2;
      LightSource lightSource3 = new LightSource(3780.11F, (-1953.861F), 3780.11F, 0);
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertEquals(3780.11F, lightSource3.getZ(), 0.01F);
      assertEquals(0, lightSource3.getColor());
      assertEquals(3780.11F, lightSource3.getX(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertEquals((-1953.861F), lightSource3.getY(), 0.01F);
      assertNotNull(lightSource3);
      
      lightSourceArray0[5] = lightSource3;
      LightSource lightSource4 = new LightSource(3780.11F, (-690.7199F), (-690.7199F), 1);
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertEquals(3780.11F, lightSource4.getX(), 0.01F);
      assertEquals((-690.7199F), lightSource4.getZ(), 0.01F);
      assertEquals((-690.7199F), lightSource4.getY(), 0.01F);
      assertNull(lightSource4.getDiameter());
      assertEquals(1, lightSource4.getColor());
      assertNotNull(lightSource4);
      
      lightSourceArray0[6] = lightSource4;
      LightSource lightSource5 = new LightSource((-442.13876F), 2871.9F, 1455, (-1));
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertNull(lightSource5.getDiameter());
      assertEquals((-442.13876F), lightSource5.getX(), 0.01F);
      assertEquals(2871.9F, lightSource5.getY(), 0.01F);
      assertEquals(1455.0F, lightSource5.getZ(), 0.01F);
      assertEquals((-1), lightSource5.getColor());
      assertNotNull(lightSource5);
      
      lightSourceArray0[7] = lightSource5;
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = integer0.equals(object0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean0);
      
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 1455;
      floatArray1[2] = 0.13010137F;
      floatArray1[3] = (-442.13876F);
      floatArray1[2] = (float) (int)integer0;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[18];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.13010137F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = 3803.6047F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 2.0F;
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[4];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[2] = (float) (int)integer0;
      floatArray3[3] = 1.0F;
      floatArray0[3] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal(2075);
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("m20q['v,z").when(light0).getCurrency();
      doReturn(2871.9F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(2.0F).when(light0).getElevation();
      doReturn(1.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("m20q['v,z").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.13010137F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(1, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotNull(homeLight0);
      
      boolean boolean1 = homeLight0.isBottomRightPointAt(1.0F, 1.0F, (float) integer0);
      assertFalse(integer0.equals((Object)int0));
      assertTrue(boolean1 == boolean0);
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(1, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertFalse(boolean1);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean2 = homeLight0.isTopRightPointAt(874.9F, 1.0F, (-1848.536F));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((byte)27, bigDecimal0.byteValue());
      assertEquals((short)2075, bigDecimal0.shortValue());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(2.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.065050684F, homeLight0.getX(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.13010137F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isDoorOrWindow());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertTrue(homeLight0.isTexturable());
      assertEquals(1435.95F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(2871.9F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals("m20q['v,z", homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals("", homeLight0.getStaircaseCutOutShape());
      assertEquals(1, (int)homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertTrue(homeLight0.isResizable());
      assertNull(homeLight0.getShininess());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertTrue(boolean2);
      assertEquals(8, lightSourceArray0.length);
      assertEquals(4, floatArray0.length);
      
      Integer integer1 = new Integer((-1));
      assertFalse(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        homeLight0.setDepth(2218.02F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNotNull(homeLight0);
      
      homeLight0.setNameVisible(true);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setName("work");
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      boolean boolean0 = homeLight0.isResizable();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean0);
      
      homeLight0.setVisible(true);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      Content content0 = homeLight0.getIcon();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertTrue(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(content0);
      
      homeLight0.setNameVisible(false);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      homeLight0.setNameXOffset((-362.89F));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertTrue(boolean1);
      
      homeLight0.setY((-362.89F));
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean2);
      
      homeLight0.setMovable(true);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      boolean boolean3 = homeLight0.isResizable();
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean3);
      
      homeLight0.setNameYOffset(645.2739F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      
      String string0 = homeLight0.getName();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals("work", string0);
      assertNotNull(string0);
      
      boolean boolean4 = homeLight0.isBottomLeftPointAt(2412.4F, (-1.0F), 2412.4F);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertFalse(boolean4);
      
      HomeTexture homeTexture0 = homeLight0.getTexture();
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertNull(homeTexture0);
      
      Level level0 = new Level("", 2.0F, (-1183.0F), 0.3926991F);
      assertEquals(0.3926991F, level0.getHeight(), 0.01F);
      assertEquals((-1183.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      homeLight0.setLevel(level0);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(645.2739F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(2.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("work", homeLight0.getName());
      assertFalse(homeLight0.isTexturable());
      assertEquals((-362.89F), homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertEquals((-362.89F), homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.3926991F, level0.getHeight(), 0.01F);
      assertEquals((-1183.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isVisible();
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertTrue(boolean0);
      
      boolean boolean1 = homeLight0.isResizable();
      assertFalse(boolean1 == boolean0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(boolean1);
      
      float float0 = Float.min((-1), (-1));
      assertEquals((-1.0F), float0, 0.01F);
      
      homeLight0.setMovable(true);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("zt6y]P", propertyChangeListener0);
      assertEquals("zt6y]P", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isDeformable());
      assertNull(homeLight0.getCatalogId());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals("zt6y]P", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean0 = homeLight0.isTopLeftPointAt(3.4028235E38F, (-737.0F), 3.4028235E38F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = homeLight0.isNameVisible();
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDeformable());
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isMovable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertNotNull(homeLight0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals((-362.88672F), textStyle1.getFontSize(), 0.01F);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertNotNull(textStyle1);
      
      homeLight0.setNameStyle(textStyle1);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(textStyle0.isBold());
      assertEquals((-362.88672F), textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertEquals((-362.88672F), textStyle1.getFontSize(), 0.01F);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      
      homeLight0.setName("");
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      boolean boolean1 = homeLight0.isVisible();
      assertFalse(boolean1 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertTrue(boolean1);
      
      boolean boolean2 = homeLight0.isResizable();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertFalse(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(boolean2);
      
      homeLight0.setMovable(true);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isDeformable());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isTexturable());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals("", homeLight0.getName());
      assertFalse(homeLight0.isNameVisible());
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "%Jj");
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      URL uRL0 = MockURL.getFileExample();
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "%Jj", "", uRLContent0, uRLContent0, uRLContent0, (-36.7724F), (-36.7724F), (-36.7724F), (-36.7724F), false, (-2521.3F), (-36.7724F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      
      Integer integer0 = new Integer((-1715));
      assertEquals((-1715), (int)integer0);
      assertNotNull(integer0);
      
      homeDoorOrWindow1.setColor(integer0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("some", uRL0.getAuthority());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-2521.3F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("%Jj", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-36.7724F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-36.7724F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-36.7724F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-36.7724F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-18.3862F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-36.7724F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-2521.3F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("%Jj", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-18.3862F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-18.3862F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-2521.3F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("%Jj", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-36.7724F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1715), (int)homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-36.7724F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(3803.6047F, 2.0F, 2.0F, 1455);
      lightSourceArray0[0] = lightSource0;
      Float.compare((-690.7199F), (-442.13876F));
      LightSource lightSource1 = new LightSource(255.0F, 1455, 1455, 1, (Float) (-442.13876F));
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float(0.0F);
      float0.equals("m20q['v,z");
      lightSourceArray0[2] = lightSource1;
      lightSourceArray0[3] = lightSource1;
      float0.floatValue();
      float0.floatValue();
      float0.floatValue();
      float0.floatValue();
      LightSource lightSource2 = new LightSource(255.0F, 1, (-690.7199F), (-453));
      lightSourceArray0[4] = lightSource2;
      LightSource lightSource3 = new LightSource(3780.11F, (-1953.861F), 3780.11F, 0);
      lightSourceArray0[5] = lightSource3;
      LightSource lightSource4 = new LightSource((-442.13876F), 2871.9F, 0.0F, 1, float0);
      lightSourceArray0[6] = lightSource4;
      LightSource lightSource5 = new LightSource((-442.13876F), 2871.9F, 1455, 1231);
      lightSourceArray0[7] = lightSource5;
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      integer0.equals(object0);
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (float) 1455;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-442.13876F);
      floatArray1[4] = 0.0F;
      float[] floatArray2 = new float[1];
      floatArray2[0] = (-442.13876F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 3803.6047F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 2.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = 3803.6047F;
      floatArray4[1] = (float) 1455;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 1.0F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal(2075);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("m20q['v,z").when(light0).getCurrency();
      doReturn(2871.9F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(2.0F).when(light0).getElevation();
      doReturn(1.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomRightPointAt(0.0F, 0.0F, (-1446.68F));
      boolean boolean0 = homeLight0.isTopRightPointAt(1.0F, 891.8735F, (-1848.536F));
      assertFalse(boolean0);
      
      float float1 = homeLight0.getElevation();
      assertEquals(2.0F, float1, 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)80;
      byteArray0[3] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      float float0 = (-362.88672F);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      textStyle0.deriveBoldStyle(false);
      homeLight0.getPoints();
      homeLight0.setName("qr5*-wB=IMyiFe5f");
      homeLight0.isVisible();
      homeLight0.setMovable(true);
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-144.76202F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      MockURL.getHttpExample();
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextStyle textStyle0 = new TextStyle(2.0F, true, true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setNameStyle(textStyle0);
      boolean boolean0 = homeLight2.isTopLeftPointAt(2034.8649F, 5.2831855F, 0.5F);
      boolean boolean1 = homeLight0.isBottomLeftPointAt(1432.9275F, 5.2831855F, (-1126.7003F));
      assertTrue(boolean1 == boolean0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight2.clone();
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNotSame(homePieceOfFurniture0, homeLight2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      URL uRL0 = MockURL.getHttpExample();
      homeLight0.move(1297.097F, (-1.0F));
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setAngle((-2603.004F));
      homeLight1.isResizable();
      homeLight1.getIcon();
      homeLight1.setName("MODEL_MIRRORED");
      homeLight1.setNameXOffset(0.0F);
      homeLight0.isMovable();
      homeLight1.clone();
      homeLight1.setDescription("<.V3GvWJ>j0@+}F3Y");
      homeLight0.containsPoint(1177.276F, 3.4028235E38F, 0.0F);
      homeLight0.isTopRightPointAt(0.3926991F, 0.0F, 0.3926991F);
      homeLight1.getValueAddedTax();
      assertEquals(1297.097F, homeLight0.getX(), 0.01F);
      assertEquals(4.5179963F, homeLight1.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription("E=i%x^V~`P@'2 G");
      homeLight0.setNameXOffset(1.0F);
      homeLight0.isPointAt(1.0F, (-1185.1191F), (-1185.1191F));
      homeLight0.setAngle((-605.6201F));
      homeLight0.setAngle((-605.6201F));
      Float float0 = new Float((-448.0F));
      homeLight0.getCurrency();
      assertEquals(3.8488576F, homeLight0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.setVisible(false);
      homeLight0.getIcon();
      homeLight0.setNameXOffset((-362.88672F));
      homeLight0.isMovable();
      homeLight0.setNameVisible(true);
      homeLight0.getName();
      homeLight0.isDoorOrWindow();
      assertEquals((-362.88672F), homeLight0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY((-362.43143F));
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.getIcon();
      homeLight0.setNameXOffset((-362.43143F));
      homeLight0.isMovable();
      homeLight0.setNameVisible(true);
      homeLight0.setY((-362.43143F));
      homeLight0.getStaircaseCutOutShape();
      assertTrue(homeLight0.isNameVisible());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isVisible();
      homeLight0.isResizable();
      Float.valueOf(1432.9275F);
      homeLight0.setMovable(true);
      homeLight0.isResizable();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setDescription("u%X+");
      homeLight1.setNameXOffset(671.209F);
      homeLight1.isPointAt(671.209F, 671.209F, 671.209F);
      homeLight0.getShininess();
      homeLight0.getCurrency();
      Integer.valueOf(0);
      Integer.valueOf(0);
      Integer integer0 = Integer.valueOf(0);
      // Undeclared exception!
      try { 
        homeLight1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      int int0 = (-1);
      Integer.valueOf((-1));
      Integer.valueOf((-1));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = (-362.88672F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      textStyle1.deriveStyle((-362.88672F));
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      String string0 = null;
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      TextStyle textStyle0 = new TextStyle((-362.88672F), false, false);
      TextStyle textStyle1 = textStyle0.deriveBoldStyle(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      homeLight0.setNameStyle(textStyle1);
      homeLight0.setName("");
      homeLight0.isResizable();
      homeLight0.setVisible(false);
      homeLight0.getIcon();
      homeLight0.setNameXOffset((-362.88672F));
      homeLight0.isMovable();
      homeLight0.setNameVisible(true);
      assertFalse(homeLight0.isVisible());
  }
}
