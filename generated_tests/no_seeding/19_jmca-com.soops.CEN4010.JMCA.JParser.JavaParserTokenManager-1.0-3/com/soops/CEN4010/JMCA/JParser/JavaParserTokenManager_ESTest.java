/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:43:04 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(112, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("*=", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-2950L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("d", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("package");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(7, token0.endColumn);
      assertEquals(46, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("package", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(7, token1.endColumn);
      assertEquals(7, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(7, token2.endColumn);
      assertEquals(7, token2.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a^2q,+jt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.endColumn);
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("a", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.endLine);
      assertEquals(85, token1.beginLine);
      assertEquals(86, token1.beginColumn);
      assertEquals(107, token1.kind);
      assertEquals(86, token1.endColumn);
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("^", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token2.kind);
      assertEquals(85, token2.beginLine);
      assertEquals(87, token2.beginColumn);
      assertEquals(87, token2.endColumn);
      assertEquals(85, token2.endLine);
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("2", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token3.endColumn);
      assertEquals(88, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(85, token3.beginLine);
      assertEquals(85, token3.endLine);
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals("q", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token4.beginLine);
      assertEquals(84, token4.kind);
      assertEquals(85, token4.endLine);
      assertEquals(89, token4.endColumn);
      assertEquals(89, token4.beginColumn);
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(",", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token5.endLine);
      assertEquals(90, token5.beginColumn);
      assertEquals(90, token5.endColumn);
      assertEquals(85, token5.beginLine);
      assertEquals(101, token5.kind);
      assertEquals(90, javaCharStream0.getEndColumn());
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(90, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("+", token5.toString());
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token5);
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token6.kind);
      assertEquals(91, token6.beginColumn);
      assertEquals(92, token6.endColumn);
      assertEquals(85, token6.endLine);
      assertEquals(85, token6.beginLine);
      assertEquals(91, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(92, javaCharStream0.getColumn());
      assertEquals(92, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("jt", token6.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("d", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("@", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(7, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("V0OeF", token2.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("com", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertNull(token_GTToken0.toString());
      
      Token token1 = token_GTToken0.next;
      assertNull(token1);
      
      token0.specialToken = null;
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("com", token0.toString());
      
      Token token2 = Token.newToken(1);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertNull(token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token3.beginColumn);
      assertEquals(4, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(85, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(".", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(1, token4.endLine);
      assertEquals(9, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("soops", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(token5, token3);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(1, token5.beginLine);
      assertEquals(85, token5.kind);
      assertEquals(10, token5.endColumn);
      assertEquals(10, token5.beginColumn);
      assertEquals(1, token5.endLine);
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(".", token5.toString());
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertNotSame(token6, token4);
      assertNotSame(token6, token0);
      assertNotSame(token6, token2);
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token2));
      assertEquals(16, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token6.beginLine);
      assertEquals(11, token6.beginColumn);
      assertEquals(74, token6.kind);
      assertEquals(17, token6.endColumn);
      assertEquals(1, token6.endLine);
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("CEN4010", token6.toString());
      
      Token token7 = javaParserTokenManager0.getNextToken();
      assertNotNull(token7);
      assertNotSame(token7, token4);
      assertNotSame(token7, token5);
      assertNotSame(token7, token3);
      assertNotSame(token7, token2);
      assertNotSame(token7, token6);
      assertNotSame(token7, token0);
      assertFalse(token7.equals((Object)token4));
      assertFalse(token7.equals((Object)token5));
      assertFalse(token7.equals((Object)token3));
      assertFalse(token7.equals((Object)token2));
      assertFalse(token7.equals((Object)token6));
      assertFalse(token7.equals((Object)token0));
      assertEquals(17, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token7.beginLine);
      assertEquals(1, token7.endLine);
      assertEquals(18, token7.endColumn);
      assertEquals(85, token7.kind);
      assertEquals(18, token7.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(".", token7.toString());
      
      Token token8 = javaParserTokenManager0.getNextToken();
      assertNotNull(token8);
      assertNotSame(token8, token4);
      assertNotSame(token8, token7);
      assertNotSame(token8, token5);
      assertNotSame(token8, token0);
      assertNotSame(token8, token2);
      assertNotSame(token8, token6);
      assertNotSame(token8, token3);
      assertFalse(token8.equals((Object)token4));
      assertFalse(token8.equals((Object)token7));
      assertFalse(token8.equals((Object)token5));
      assertFalse(token8.equals((Object)token0));
      assertFalse(token8.equals((Object)token2));
      assertFalse(token8.equals((Object)token6));
      assertFalse(token8.equals((Object)token3));
      assertEquals(19, token8.beginColumn);
      assertEquals(1, token8.beginLine);
      assertEquals(1, token8.endLine);
      assertEquals(22, token8.endColumn);
      assertEquals(74, token8.kind);
      assertEquals(21, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("JMCA", token8.toString());
      assertEquals(22, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(19, javaCharStream0.getBeginColumn());
      assertEquals(22, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{e`T7`;waE[Rf_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5 qZ;_lR?2mA6Hk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("5", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("qZ", token1.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(83, token2.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(";", token2.toString());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(6, token3.beginColumn);
      assertEquals(8, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals("_lR", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(9, token4.endColumn);
      assertEquals(91, token4.kind);
      assertEquals(9, token4.beginColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("?", token4.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.SwitchTo(66);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 66. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|d");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("assr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("assr", token0.toString());
      
      JavaCharStream javaCharStream2 = null;
      try {
        javaCharStream2 = new JavaCharStream(stringReader0, 4, 1, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|d");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("assr");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("assr", token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(4, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals("", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("!*+.+");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(89, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("!", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(103, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals("*", token1.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curChar = '7';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("8", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("8", token0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DMr}bXm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('D', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Mr", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(80, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("}", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(6, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("bXm", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5 qZ;_lR?2mA6Hk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("5", token0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 2225, 101, 10);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token0.beginColumn);
      assertEquals(100, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(2225, token0.endLine);
      assertEquals(2225, token0.beginLine);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(javaParserTokenManager0.debugStream);
      assertNotNull(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-47);
      int int0 = sequenceInputStream0.read(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new byte[] {(byte)0, (byte)43, (byte)63, (byte)0, (byte) (-47)}, byteArray0);
      
      javaParserTokenManager0.jjmatchedPos = 0;
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.kind);
      assertEquals(2225, token1.beginLine);
      assertEquals(100, token1.endColumn);
      assertEquals(2225, token1.endLine);
      assertEquals(100, token1.beginColumn);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("", token1.toString());
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(2225, token2.endLine);
      assertEquals(2225, token2.beginLine);
      assertEquals(100, token2.beginColumn);
      assertEquals(100, token2.endColumn);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      
      javaParserTokenManager0.setDebugStream((PrintStream) null);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token2.kind);
      assertEquals(2225, token2.endLine);
      assertEquals(2225, token2.beginLine);
      assertEquals(100, token2.beginColumn);
      assertEquals(100, token2.endColumn);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      
      javaParserTokenManager0.SwitchTo(0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2225, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(2225, javaCharStream0.getLine());
      assertEquals(2225, javaCharStream0.getEndLine());
      assertEquals(100, javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.inputStream = (Reader) stringReader0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.AdjustBuffSize();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long1 = stringReader0.skip(0L);
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      javaCharStream0.bufsize = 0;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjimageLen = (-922);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      
      Token token1 = Token.newToken((-2023));
      assertNotNull(token1);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      token0.beginColumn = 2529;
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2529, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2529, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(124, token0.kind);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      
      javaParserTokenManager0.SwitchTo(1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      MockFileOutputStream mockFileOutputStream0 = null;
      try {
        mockFileOutputStream0 = new MockFileOutputStream((FileDescriptor) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a^2q,+jt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("a", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("2", token2.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p@tQiQ7g=ccic/-A_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-616), 43);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(43, token0.beginColumn);
      assertEquals((-616), token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals((-616), token0.endLine);
      assertEquals(43, token0.endColumn);
      assertEquals(43, javaCharStream0.getColumn());
      assertEquals((-616), javaCharStream0.getEndLine());
      assertEquals(43, javaCharStream0.getBeginColumn());
      assertEquals((-616), javaCharStream0.getBeginLine());
      assertEquals(43, javaCharStream0.getEndColumn());
      assertEquals((-616), javaCharStream0.getLine());
      assertEquals("p", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-616), token1.beginLine);
      assertEquals(44, token1.beginColumn);
      assertEquals((-616), token1.endLine);
      assertEquals(44, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals((-616), javaCharStream0.getEndLine());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals((-616), javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals((-616), javaCharStream0.getLine());
      assertEquals("@", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(50, token2.endColumn);
      assertEquals((-616), token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals((-616), token2.endLine);
      assertEquals(45, token2.beginColumn);
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals((-616), javaCharStream0.getEndLine());
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals((-616), javaCharStream0.getBeginLine());
      assertEquals((-616), javaCharStream0.getLine());
      assertEquals(45, javaCharStream0.getBeginColumn());
      assertEquals("tQiQ7g", token2.toString());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("B~kK_nzGU>>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 2524);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginLine);
      assertEquals(2524, token0.beginColumn);
      assertEquals(2524, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      
      Token token1 = Token.newToken((-2042));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2525, token2.endColumn);
      assertEquals(2525, token2.beginColumn);
      assertEquals(90, token2.kind);
      assertEquals(11, token2.endLine);
      assertEquals(11, token2.beginLine);
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals("~", token2.toString());
      
      Token token3 = Token.newToken(2525);
      assertNotNull(token3);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.endLine);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertNull(token3.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2525, token2.endColumn);
      assertEquals(2525, token2.beginColumn);
      assertEquals(90, token2.kind);
      assertEquals(11, token2.endLine);
      assertEquals(11, token2.beginLine);
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals("~", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(2532, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(11, token4.beginLine);
      assertEquals(2526, token4.beginColumn);
      assertEquals(11, token4.endLine);
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2532, javaCharStream0.getEndColumn());
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals("kK_nzGU", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(11, token5.endLine);
      assertEquals(2533, token5.beginColumn);
      assertEquals(124, token5.kind);
      assertEquals(11, token5.beginLine);
      assertEquals(2534, token5.endColumn);
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2533, javaCharStream0.getBeginColumn());
      assertEquals(2533, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2533, javaCharStream0.getEndColumn());
      assertEquals(">>", token5.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.TokenLexicalActions(token4);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // com.soops.CEN4010.JMCA.JParser.Token cannot be cast to com.soops.CEN4010.JMCA.JParser.Token$GTToken
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("8DRqzRauNj%Q`:q");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("8D", token0.toString());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader1, 1, 70, 2);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 2);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(10, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals("RqzRauNj", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(11, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(11, token2.beginColumn);
      assertEquals(108, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(11, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("%", token2.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals("", token3.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TI%Yr;<(Ey&]UwVU{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      char char0 = javaCharStream1.ReadByte();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals('T', char0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals("", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("I", token1.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(108, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("%", token2.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(4, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(3, javaCharStream1.getBeginColumn());
      assertEquals(4, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(4, javaCharStream1.getColumn());
      assertEquals("Yr", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token4.endColumn);
      assertEquals(5, token4.beginColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(83, token4.kind);
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(5, javaCharStream1.getBeginColumn());
      assertEquals(5, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(5, javaCharStream1.getColumn());
      assertEquals(";", token4.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(121, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("...", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(3, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("), ");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(78, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(")", token0.toString());
      
      Token token1 = Token.newToken(1);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertNull(token1.toString());
      
      token1.next = token0;
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(")", token0.toString());
      assertNull(token1.toString());
      assertEquals(")", token1.next.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNull(token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(84, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(",", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(3, token4.beginColumn);
      assertEquals(3, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token5.endColumn);
      assertEquals(3, token5.beginColumn);
      assertEquals(0, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("", token5.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Y\"Md+('*`e6T");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[5];
      charArray0[0] = 's';
      charArray0[1] = 'f';
      charArray0[2] = 's';
      charArray0[3] = 'k';
      charArray0[4] = 'w';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(5, int0);
      assertArrayEquals(new char[] {'-', 'Y', '\"', 'M', 'd'}, charArray0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('+', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(77, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("(", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 4.  Encountered: \"`\" (96), after : \"\\'*\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("B~kK_nzGU>>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("B", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken((-1161));
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("1", token1.toString());
      
      Token token2 = Token.newToken(0);
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("XP", token3.toString());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Token token4 = Token.newToken(2);
      assertNotNull(token4);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, token4.beginLine);
      assertEquals(0, token4.endLine);
      assertEquals(0, token4.beginColumn);
      assertEquals(0, token4.endColumn);
      assertEquals(0, token4.kind);
      assertNull(token4.toString());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\">>>=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader2 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("<", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream1.bufpos);
      assertEquals(15, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(15, javaCharStream1.getColumn());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals("STRING_LITERAL", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1, 2);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream1.bufpos);
      assertEquals(15, javaCharStream1.getColumn());
      assertEquals(15, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("_8|6qRGzHRd");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("_8", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("|", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("6", token2.toString());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals('8', char0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("dPi", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(90, token1.kind);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("~", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(83, token2.kind);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.endColumn);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(6, token3.beginColumn);
      assertEquals(87, token3.kind);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(8, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(7, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Nz", token4.toString());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("1", token0.toString());
      
      javaParserTokenManager1.jjmatchedPos = (-3040);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      stringReader0.close();
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("XP", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(79, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("{", token2.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token3.beginColumn);
      assertEquals(5, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(82, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("]", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(7, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(6, token4.beginColumn);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("iO", token4.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a^2q,+jt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.endLine);
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals("a", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals(86, token1.endColumn);
      assertEquals(86, token1.beginColumn);
      assertEquals(85, token1.beginLine);
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals("^", token1.toString());
      
      javaParserTokenManager0.lengthOfMatch = 322;
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      
      stringReader0.reset();
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertNull(token_GTToken0.toString());
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token2.beginLine);
      assertEquals(107, token2.kind);
      assertEquals(85, token2.endLine);
      assertEquals(86, token2.endColumn);
      assertEquals(86, token2.beginColumn);
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals("^", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token3.beginLine);
      assertEquals(87, token3.endColumn);
      assertEquals(85, token3.endLine);
      assertEquals(87, token3.beginColumn);
      assertEquals(66, token3.kind);
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals("2", token3.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TI%Yr;<(Ey&]UwVU{");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("TI", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(2, javaCharStream1.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Yq$g'B0:TwkG(9>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(4, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("Yq$g", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 7.  Encountered: \"0\" (48), after : \"\\'B\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken((-1161));
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("1", token1.toString());
      
      Token token2 = Token.newToken(0);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.endLine);
      assertNull(token2.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("XP", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals(79, token4.kind);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("{", token4.toString());
      
      javaParserTokenManager1.SkipLexicalActions(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token4);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token4));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("XP", token3.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_8|6qRGzHRd");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("_8", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(106, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("|", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token2.beginColumn);
      assertEquals(4, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("6", token2.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("u  O^vgmBH`Kjz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-4504), 97);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-4504), token0.beginLine);
      assertEquals(97, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(97, token0.beginColumn);
      assertEquals((-4504), token0.endLine);
      assertEquals(97, javaCharStream0.getEndColumn());
      assertEquals(97, javaCharStream0.getColumn());
      assertEquals(97, javaCharStream0.getBeginColumn());
      assertEquals((-4504), javaCharStream0.getEndLine());
      assertEquals((-4504), javaCharStream0.getBeginLine());
      assertEquals((-4504), javaCharStream0.getLine());
      assertEquals("u", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(100, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(100, token1.endColumn);
      assertEquals((-4504), token1.beginLine);
      assertEquals((-4504), token1.endLine);
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals((-4504), javaCharStream0.getEndLine());
      assertEquals((-4504), javaCharStream0.getBeginLine());
      assertEquals((-4504), javaCharStream0.getLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals("O", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-4504), token2.endLine);
      assertEquals((-4504), token2.beginLine);
      assertEquals(101, token2.endColumn);
      assertEquals(107, token2.kind);
      assertEquals(101, token2.beginColumn);
      assertEquals(101, javaCharStream0.getEndColumn());
      assertEquals(101, javaCharStream0.getBeginColumn());
      assertEquals((-4504), javaCharStream0.getEndLine());
      assertEquals((-4504), javaCharStream0.getBeginLine());
      assertEquals((-4504), javaCharStream0.getLine());
      assertEquals(101, javaCharStream0.getColumn());
      assertEquals("^", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals((-4504), token3.endLine);
      assertEquals(106, token3.endColumn);
      assertEquals(102, token3.beginColumn);
      assertEquals((-4504), token3.beginLine);
      assertEquals(102, javaCharStream0.getBeginColumn());
      assertEquals(106, javaCharStream0.getColumn());
      assertEquals((-4504), javaCharStream0.getEndLine());
      assertEquals((-4504), javaCharStream0.getBeginLine());
      assertEquals((-4504), javaCharStream0.getLine());
      assertEquals(106, javaCharStream0.getEndColumn());
      assertEquals("vgmBH", token3.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -4504, column 107.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("e]S|(7O|=P-Rx.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.curLexState = (-1768);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("e", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("]", token1.toString());
      
      javaParserTokenManager1.ReInit(javaCharStream0, 2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager3 = null;
      try {
        javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0, 1471);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1471. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("KS<]R|a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1668), (-1668));
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 38, 38, 38);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(38, token0.beginColumn);
      assertEquals(39, token0.endColumn);
      assertEquals(38, token0.endLine);
      assertEquals(38, token0.beginLine);
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(39, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(39, javaCharStream1.getColumn());
      assertEquals(38, javaCharStream1.getBeginColumn());
      assertEquals("KS", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(40, token1.endColumn);
      assertEquals(40, token1.beginColumn);
      assertEquals(88, token1.kind);
      assertEquals(38, token1.beginLine);
      assertEquals(38, token1.endLine);
      assertEquals(40, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginColumn());
      assertEquals("<", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(40, javaCharStream1.getEndColumn());
      assertEquals(38, javaCharStream1.getEndLine());
      assertEquals(38, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getColumn());
      assertEquals(38, javaCharStream1.getLine());
      assertEquals(40, javaCharStream1.getBeginColumn());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Enumeration<ByteArrayInputStream> enumeration0 = (Enumeration<ByteArrayInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      long long0 = sequenceInputStream0.skip((-2213L));
      assertEquals(0L, long0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(sequenceInputStream0, 19, 0, 0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 19);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 19. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Y\"Md+('*`e6T");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(695L);
      assertEquals(13L, long0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)39;
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)21;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)39;
      byteArray0[5] = (byte)39;
      byteArray0[6] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)21, (byte)10, (byte)39, (byte)39, (byte)29}, byteArray0);
      assertEquals(7, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (byte)10, (byte)45);
      assertNotNull(javaCharStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)21, (byte)10, (byte)39, (byte)39, (byte)29}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)21, (byte)10, (byte)39, (byte)39, (byte)29}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)39, (byte)39, (byte)21, (byte)10, (byte)39, (byte)39, (byte)29}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 10, column 46.  Encountered: \"\\'\" (39), after : \"\\'\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager2.lengthOfMatch = (-1);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      javaParserTokenManager2.ReInit((JavaCharStream) null);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(70, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("8d", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(96, token0.kind);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.endLine);
      assertEquals(86, token0.endColumn);
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals("!=", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(85, token1.beginLine);
      assertEquals(86, token1.beginColumn);
      assertEquals(85, token1.endLine);
      assertEquals(86, token1.endColumn);
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      
      javaCharStream0.adjustBeginLineColumn(86, 44);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, token2.beginLine);
      assertEquals(86, token2.endLine);
      assertEquals(44, token2.endColumn);
      assertEquals(44, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals("", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(44, token3.beginColumn);
      assertEquals(44, token3.endColumn);
      assertEquals(0, token3.kind);
      assertEquals(86, token3.endLine);
      assertEquals(86, token3.beginLine);
      assertEquals(86, javaCharStream0.getLine());
      assertEquals(44, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getBeginLine());
      assertEquals(44, javaCharStream0.getEndColumn());
      assertEquals(44, javaCharStream0.getColumn());
      assertEquals(86, javaCharStream0.getEndLine());
      assertEquals("", token3.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K<]R|a");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1668), (-1668));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-1668), token0.beginLine);
      assertEquals((-1668), token0.beginColumn);
      assertEquals((-1668), token0.endColumn);
      assertEquals((-1668), token0.endLine);
      assertEquals((-1668), javaCharStream0.getColumn());
      assertEquals((-1668), javaCharStream0.getEndLine());
      assertEquals((-1668), javaCharStream0.getBeginLine());
      assertEquals((-1668), javaCharStream0.getBeginColumn());
      assertEquals((-1668), javaCharStream0.getLine());
      assertEquals((-1668), javaCharStream0.getEndColumn());
      assertEquals("K", token0.toString());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("e]S|(7O|=P-Rx.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curLexState = (-1768);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("e", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(1, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(82, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("]", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.beginLine);
      assertEquals(4, token4.beginColumn);
      assertEquals(106, token4.kind);
      assertEquals(4, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("|", token4.toString());
      
      Token token5 = javaParserTokenManager2.getNextToken();
      assertNotNull(token5);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(77, token5.kind);
      assertEquals(5, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(5, token5.beginColumn);
      assertEquals(1, token5.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("(", token5.toString());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("com", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(85, token1.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(".", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(9, token2.endColumn);
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("soops", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(85, token3.kind);
      assertEquals(1, token3.endLine);
      assertEquals(10, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(10, token3.endColumn);
      assertEquals(10, javaCharStream0.getBeginColumn());
      assertEquals(10, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(10, javaCharStream0.getColumn());
      assertEquals(".", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertEquals(16, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(17, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(11, token4.beginColumn);
      assertEquals(74, token4.kind);
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("CEN4010", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token2);
      assertNotSame(token5, token3);
      assertNotSame(token5, token0);
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token0));
      assertEquals(17, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token5.endLine);
      assertEquals(18, token5.endColumn);
      assertEquals(18, token5.beginColumn);
      assertEquals(85, token5.kind);
      assertEquals(1, token5.beginLine);
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(".", token5.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("*=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(112, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(2, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("*=", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(112, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("*=", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("", token2.toString());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.jjround = (-1123);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("d", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("@", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(7, token2.endColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("V0OeF", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(8, token3.beginColumn);
      assertEquals(8, token3.endColumn);
      assertEquals(78, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(")", token3.toString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(70, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("8d", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("Pi", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token2.beginColumn);
      assertEquals(90, token2.kind);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals("~", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(6, token3.beginColumn);
      assertEquals(6, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(83, token3.kind);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(";", token3.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@0OF)4zY5x]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-3);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      javaCharStream0.ReInit((InputStream) byteArrayInputStream0, (int) (byte) (-3), (int) (byte) (-3), (int) (byte) (-3));
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-3)}, byteArray0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(1, byteArrayInputStream0.available());
      
      javaParserTokenManager1.MoreLexicalActions();
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -3, column -2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("e>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("_8|6qRGzHRd");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("_8", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("_8", token0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Y\"Md+('*`e6T");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      
      Token token1 = Token.newToken(969);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 969);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 969. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("+oY7gaPm$@");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1945, 1945);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1945, token0.endColumn);
      assertEquals(1945, token0.endLine);
      assertEquals(1945, token0.beginColumn);
      assertEquals(101, token0.kind);
      assertEquals(1945, token0.beginLine);
      assertEquals(1945, javaCharStream0.getBeginLine());
      assertEquals(1945, javaCharStream0.getBeginColumn());
      assertEquals(1945, javaCharStream0.getColumn());
      assertEquals(1945, javaCharStream0.getEndColumn());
      assertEquals(1945, javaCharStream0.getLine());
      assertEquals(1945, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(1953, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1945, token1.endLine);
      assertEquals(1945, token1.beginLine);
      assertEquals(1946, token1.beginColumn);
      assertEquals(1945, javaCharStream0.getBeginLine());
      assertEquals(1953, javaCharStream0.getColumn());
      assertEquals(1953, javaCharStream0.getEndColumn());
      assertEquals(1945, javaCharStream0.getLine());
      assertEquals(1945, javaCharStream0.getEndLine());
      assertEquals(1946, javaCharStream0.getBeginColumn());
      assertEquals("oY7gaPm$", token1.toString());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-9>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      stringReader0.reset();
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      
      token0.kind = (-689);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      
      token0.kind = 0;
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("-", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("9", token1.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader1 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('8', char0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals("dPi", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, token1.endColumn);
      assertEquals(90, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.endLine);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("~", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, token2.beginColumn);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(";", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(6, token3.endColumn);
      assertEquals(6, token3.beginColumn);
      assertEquals(87, token3.kind);
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("=", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token4.kind);
      assertEquals(7, token4.beginColumn);
      assertEquals(8, token4.endColumn);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("Nz", token4.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip((-2950L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("d", token0.toString());
      
      Token token1 = Token.newToken(1);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("d", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token2.endColumn);
      assertEquals(86, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals("@", token2.toString());
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.endColumn);
      assertEquals(3, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals("V0OeF", token3.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-2950L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("d", token0.toString());
      
      Token token1 = Token.newToken(1);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("d", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaParserTokenManager1.jjmatchedKind = (-111);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(2, token2.endColumn);
      assertEquals(86, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("@", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token3.endLine);
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(74, token3.kind);
      assertEquals(7, token3.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals("V0OeF", token3.toString());
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(78, token4.kind);
      assertEquals(8, token4.endColumn);
      assertEquals(8, token4.beginColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(")", token4.toString());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip((-2950L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("d", token0.toString());
      
      Token token1 = Token.newToken(1);
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("d", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(1, token2.beginLine);
      assertEquals(86, token2.kind);
      assertEquals(2, token2.beginColumn);
      assertEquals(2, token2.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("@", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token3 = javaParserTokenManager3.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(74, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(7, token3.endColumn);
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("V0OeF", token3.toString());
      
      Token token4 = javaParserTokenManager3.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(token4, token1);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(78, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(8, token4.beginColumn);
      assertEquals(8, token4.endColumn);
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(")", token4.toString());
      
      Token token5 = javaParserTokenManager1.getNextToken();
      assertNotNull(token5);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token5, token2);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token5.beginLine);
      assertEquals(9, token5.beginColumn);
      assertEquals(9, token5.endColumn);
      assertEquals(1, token5.endLine);
      assertEquals(66, token5.kind);
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("4", token5.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String string0 = "<STRING_LITERAL>";
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(88, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      token0.beginLine = (-371);
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals("<", token0.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.ReInit(javaCharStream0, 85);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 85. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("S'UH");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals("S", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(1, javaCharStream1.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 5.  Encountered: <EOF> after : \"\\'UH\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("d", token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 74);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 74. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.endColumn);
      assertEquals(88, token0.kind);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      
      token0.beginLine = (-371);
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("<", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(86, token1.beginColumn);
      assertEquals(99, token1.endColumn);
      assertEquals(85, token1.endLine);
      assertEquals(85, token1.beginLine);
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("STRING_LITERAL", token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(14, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(86, token1.beginColumn);
      assertEquals(99, token1.endColumn);
      assertEquals(85, token1.endLine);
      assertEquals(85, token1.beginLine);
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("STRING_LITERAL", token1.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("8", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(6, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("edPCi", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token2.beginLine);
      assertEquals(7, token2.beginColumn);
      assertEquals(7, token2.endColumn);
      assertEquals(90, token2.kind);
      assertEquals(1, token2.endLine);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("~", token2.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-Y\"Md+('*`e6T");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("-", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals("Y", token1.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 14.  Encountered: <EOF> after : \"\\\"Md+(\\'*`e6T\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("B~kK_nzGU>>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 2524);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, token0.beginLine);
      assertEquals(2524, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2524, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals("B", token0.toString());
      
      Token token1 = Token.newToken((-2042));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, token2.endLine);
      assertEquals(2525, token2.endColumn);
      assertEquals(2525, token2.beginColumn);
      assertEquals(11, token2.beginLine);
      assertEquals(90, token2.kind);
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals("~", token2.toString());
      
      Token token3 = Token.newToken(2525);
      assertNotNull(token3);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(0, token3.endColumn);
      assertEquals(0, token3.beginColumn);
      assertEquals(0, token3.beginLine);
      assertEquals(0, token3.kind);
      assertEquals(0, token3.endLine);
      assertNull(token3.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token3);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, token2.endLine);
      assertEquals(2525, token2.endColumn);
      assertEquals(2525, token2.beginColumn);
      assertEquals(11, token2.beginLine);
      assertEquals(90, token2.kind);
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals("~", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token4.beginLine);
      assertEquals(2526, token4.beginColumn);
      assertEquals(11, token4.endLine);
      assertEquals(2532, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(2532, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals("kK_nzGU", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(7, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2533, token5.beginColumn);
      assertEquals(11, token5.endLine);
      assertEquals(2534, token5.endColumn);
      assertEquals(124, token5.kind);
      assertEquals(11, token5.beginLine);
      assertEquals(2533, javaCharStream0.getBeginColumn());
      assertEquals(2533, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(2533, javaCharStream0.getColumn());
      assertEquals(">>", token5.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a^2q,+jt");
      assertNotNull(stringReader0);
      
      stringReader0.mark(85);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(85, token0.endColumn);
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("a", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.beginLine);
      assertEquals(85, token1.endLine);
      assertEquals(107, token1.kind);
      assertEquals(86, token1.endColumn);
      assertEquals(86, token1.beginColumn);
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals("^", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(66, token2.kind);
      assertEquals(85, token2.endLine);
      assertEquals(85, token2.beginLine);
      assertEquals(87, token2.beginColumn);
      assertEquals(87, token2.endColumn);
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("2", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token3.beginLine);
      assertEquals(88, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(88, token3.beginColumn);
      assertEquals(85, token3.endLine);
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals("q", token3.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(89, token4.beginColumn);
      assertEquals(89, token4.endColumn);
      assertEquals(85, token4.endLine);
      assertEquals(84, token4.kind);
      assertEquals(85, token4.beginLine);
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(",", token4.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertEquals(1, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(1, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(1, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 2.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ie>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("ie", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("ie", token0.toString());
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertNull(token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("ie", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNull(token_GTToken0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$2XOs:~+P0enw");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-2224L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("$2XOs", token0.toString());
      
      Token token1 = Token.newToken((-1423));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertNull(token1.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertNull(token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(6, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(6, token2.endColumn);
      assertEquals(92, token2.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(":", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.endLine);
      assertEquals(90, token3.kind);
      assertEquals(7, token3.beginColumn);
      assertEquals(7, token3.endColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(7, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals("~", token3.toString());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token4.endLine);
      assertEquals(1, token4.beginLine);
      assertEquals(8, token4.endColumn);
      assertEquals(8, token4.beginColumn);
      assertEquals(101, token4.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("+", token4.toString());
      
      Token token5 = javaParserTokenManager0.getNextToken();
      assertNotNull(token5);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token5.kind);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(13, token5.endColumn);
      assertEquals(9, token5.beginColumn);
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("P0enw", token5.toString());
      
      Token token6 = javaParserTokenManager0.getNextToken();
      assertNotNull(token6);
      assertNotSame(token6, token5);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token0);
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token6.endLine);
      assertEquals(1, token6.beginLine);
      assertEquals(13, token6.endColumn);
      assertEquals(13, token6.beginColumn);
      assertEquals(0, token6.kind);
      assertEquals(13, javaCharStream0.getBeginColumn());
      assertEquals(13, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(13, javaCharStream0.getEndColumn());
      assertEquals("", token6.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      StringReader stringReader1 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      char[] charArray0 = new char[9];
      charArray0[0] = 's';
      charArray0[1] = 'f';
      charArray0[2] = '8';
      charArray0[3] = 'w';
      charArray0[4] = '8';
      charArray0[5] = 'u';
      charArray0[6] = '(';
      charArray0[7] = 'R';
      charArray0[8] = 'k';
      int int0 = stringReader1.read(charArray0);
      assertNotSame(stringReader1, stringReader0);
      assertEquals(9, charArray0.length);
      assertEquals(9, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertArrayEquals(new char[] {'8', 'd', 'P', 'i', '~', ';', '=', 'N', 'z'}, charArray0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals('8', char0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.jjround = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("dP", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("i", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(90, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(1, token2.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("~", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(83, token3.kind);
      assertEquals(1, token3.beginLine);
      assertEquals(5, token3.endColumn);
      assertEquals(5, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(";", token3.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("8", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("8", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("8", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("edPCi", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8dPi~;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)45;
      byteArray0[2] = (byte)32;
      byteArray0[3] = (byte)21;
      byteArray0[4] = (byte)45;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertEquals(5, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(byteArrayInputStream0, (-1), 3739);
      assertNotNull(javaCharStream1);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      
      JavaCharStream javaCharStream2 = new JavaCharStream(byteArrayInputStream0);
      assertNotNull(javaCharStream2);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      assertEquals(5, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals("--", token0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(2, token0.endColumn);
      assertEquals(100, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals("--", token0.toString());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(5, byteArray0.length);
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)45, (byte)45, (byte)32, (byte)21, (byte)45}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream2.bufpos);
      assertEquals(2, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(100, token1.kind);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(2, javaCharStream2.getColumn());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(2, javaCharStream2.getEndColumn());
      assertEquals("--", token1.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\">>>=\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      StringReader stringReader2 = new StringReader("<STRING_LITERAL>");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("<", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals(15, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      assertEquals("STRING_LITERAL", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 2);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(14, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(15, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(15, javaCharStream0.getColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 17.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8edPCi~x;=Nz");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("e]S|(7O|=P-Rx.");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("e", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("e", token0.toString());
      
      javaParserTokenManager0.curLexState = (-1768);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(82, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("]", token1.toString());
      
      javaParserTokenManager1.ReInit(javaCharStream0, 2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      
      Token token2 = javaParserTokenManager2.getNextToken();
      assertNotNull(token2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.beginLine);
      assertEquals(74, token2.kind);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, token2.endColumn);
      assertEquals(1, token2.endLine);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("S", token2.toString());
      
      Token token3 = javaParserTokenManager2.jjFillToken();
      assertNotNull(token3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, token3.endColumn);
      assertEquals(1, token3.endLine);
      assertEquals(74, token3.kind);
      assertEquals(3, token3.beginColumn);
      assertEquals(1, token3.beginLine);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("S", token3.toString());
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-120);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-120)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "e]S|(7O|=P-Rx.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token token4 = javaParserTokenManager2.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(1, token4.beginLine);
      assertEquals(1, token4.endLine);
      assertEquals(106, token4.kind);
      assertEquals(4, token4.beginColumn);
      assertEquals(4, token4.endColumn);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals("|", token4.toString());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager3 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      
      Token token5 = javaParserTokenManager3.getNextToken();
      assertNotNull(token5);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(token5, token1);
      assertNotSame(token5, token3);
      assertNotSame(token5, token2);
      assertNotSame(token5, token4);
      assertNotSame(token5, token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token3));
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token5.endLine);
      assertEquals(1, token5.beginLine);
      assertEquals(5, token5.beginColumn);
      assertEquals(5, token5.endColumn);
      assertEquals(77, token5.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("(", token5.toString());
      
      Token token6 = javaParserTokenManager3.getNextToken();
      assertNotNull(token6);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager3, javaParserTokenManager0);
      assertNotSame(token6, token2);
      assertNotSame(token6, token5);
      assertNotSame(token6, token3);
      assertNotSame(token6, token0);
      assertNotSame(token6, token4);
      assertNotSame(token6, token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager3.equals((Object)javaParserTokenManager0));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token0));
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(66, token6.kind);
      assertEquals(1, token6.beginLine);
      assertEquals(6, token6.endColumn);
      assertEquals(6, token6.beginColumn);
      assertEquals(1, token6.endLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("7", token6.toString());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 15.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-9>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("-", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("9", token1.toString());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("a^2q,+jt");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      assertEquals("a", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(85, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(85, javaCharStream0.getBeginColumn());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(85, token1.endLine);
      assertEquals(85, token1.beginLine);
      assertEquals(86, token1.beginColumn);
      assertEquals(107, token1.kind);
      assertEquals(86, token1.endColumn);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(86, javaCharStream0.getEndColumn());
      assertEquals(86, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals("^", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(66, token2.kind);
      assertEquals(85, token2.endLine);
      assertEquals(87, token2.beginColumn);
      assertEquals(87, token2.endColumn);
      assertEquals(85, token2.beginLine);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("2", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(87, javaCharStream0.getBeginColumn());
      assertEquals(87, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(87, javaCharStream0.getEndColumn());
      assertEquals(85, javaCharStream0.getEndLine());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token3.endLine);
      assertEquals(85, token3.beginLine);
      assertEquals(88, token3.beginColumn);
      assertEquals(88, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("q", token3.toString());
      
      javaParserTokenManager1.SkipLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token0, token1);
      assertNotSame(token0, token2);
      assertNotSame(token0, token3);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(85, token0.endLine);
      assertEquals(85, token0.beginLine);
      assertEquals(85, token0.beginColumn);
      assertEquals(85, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(85, javaCharStream0.getBeginLine());
      assertEquals(88, javaCharStream0.getBeginColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(85, javaCharStream0.getLine());
      assertEquals(85, javaCharStream0.getEndLine());
      assertEquals("a", token0.toString());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("...");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(121, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("...", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(3, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$22Os:~+P0enw");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("$22Os:~+P0enw");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertNotSame(stringReader0, stringReader1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("$22Os", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(92, token1.kind);
      assertEquals(6, token1.endColumn);
      assertEquals(6, token1.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals(":", token1.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token0, token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(5, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getColumn());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(6, javaCharStream0.getEndColumn());
      assertEquals("$22Os", token0.toString());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.ReInit(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token0.toString());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("^QRK2pAJnFHV/");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 4995, (-663));
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.curChar = '*';
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-663), token0.endColumn);
      assertEquals(4995, token0.beginLine);
      assertEquals((-663), token0.beginColumn);
      assertEquals(4995, token0.endLine);
      assertEquals(107, token0.kind);
      assertEquals(4995, javaCharStream0.getBeginLine());
      assertEquals((-663), javaCharStream0.getColumn());
      assertEquals(4995, javaCharStream0.getLine());
      assertEquals((-663), javaCharStream0.getBeginColumn());
      assertEquals((-663), javaCharStream0.getEndColumn());
      assertEquals(4995, javaCharStream0.getEndLine());
      assertEquals("^", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-652), token1.endColumn);
      assertEquals(4995, token1.endLine);
      assertEquals(4995, token1.beginLine);
      assertEquals((-662), token1.beginColumn);
      assertEquals(4995, javaCharStream0.getBeginLine());
      assertEquals(4995, javaCharStream0.getLine());
      assertEquals((-652), javaCharStream0.getEndColumn());
      assertEquals((-662), javaCharStream0.getBeginColumn());
      assertEquals(4995, javaCharStream0.getEndLine());
      assertEquals((-652), javaCharStream0.getColumn());
      assertEquals("QRK2pAJnFHV", token1.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals(4995, javaCharStream0.getBeginLine());
      assertEquals(4995, javaCharStream0.getLine());
      assertEquals((-652), javaCharStream0.getEndColumn());
      assertEquals((-662), javaCharStream0.getBeginColumn());
      assertEquals(4995, javaCharStream0.getEndLine());
      assertEquals((-652), javaCharStream0.getColumn());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("false");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(5, token0.endColumn);
      assertEquals(30, token0.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("false", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(5, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(5, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(0, token1.kind);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      StringReader stringReader0 = new StringReader("B~kK_nzGU>>");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 2524);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginLine);
      assertEquals(2524, token0.beginColumn);
      assertEquals(2524, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals("B", token0.toString());
      
      Token token1 = Token.newToken((-2042));
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
      assertNull(token1.toString());
      
      stringReader0.reset();
      token0.image = "{pZLt_4gwb^6)=7";
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals("{pZLt_4gwb^6)=7", token0.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      
      Token token2 = Token.newToken(24);
      assertNotNull(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertNull(token2.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginLine);
      assertEquals(2524, token0.beginColumn);
      assertEquals(2524, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals("{pZLt_4gwb^6)=7", token0.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(token0, token2);
      assertNotSame(token0, token1);
      assertFalse(token0.equals((Object)token2));
      assertFalse(token0.equals((Object)token1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginLine);
      assertEquals(2524, token0.beginColumn);
      assertEquals(2524, token0.endColumn);
      assertEquals(11, token0.endLine);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2524, javaCharStream0.getBeginColumn());
      assertEquals(2524, javaCharStream0.getEndColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2524, javaCharStream0.getColumn());
      assertEquals("{pZLt_4gwb^6)=7", token0.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(2525, token3.beginColumn);
      assertEquals(11, token3.beginLine);
      assertEquals(90, token3.kind);
      assertEquals(2525, token3.endColumn);
      assertEquals(11, token3.endLine);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      assertEquals("~", token3.toString());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2525, javaCharStream0.getEndColumn());
      assertEquals(2525, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2525, javaCharStream0.getColumn());
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertNotSame(token4, token3);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token0);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token0));
      assertEquals(74, token4.kind);
      assertEquals(2532, token4.endColumn);
      assertEquals(11, token4.endLine);
      assertEquals(11, token4.beginLine);
      assertEquals(2526, token4.beginColumn);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("kK_nzGU", token4.toString());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2532, javaCharStream0.getEndColumn());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token3);
      assertNotSame(token2, token4);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token3));
      assertFalse(token2.equals((Object)token4));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.endColumn);
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2532, javaCharStream0.getEndColumn());
      assertNull(token2.toString());
      
      Token token5 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token5);
      assertNotSame(token5, token2);
      assertNotSame(token5, token1);
      assertNotSame(token5, token0);
      assertNotSame(token5, token4);
      assertNotSame(token5, token3);
      assertFalse(token5.equals((Object)token2));
      assertFalse(token5.equals((Object)token1));
      assertFalse(token5.equals((Object)token0));
      assertFalse(token5.equals((Object)token4));
      assertFalse(token5.equals((Object)token3));
      assertEquals(74, token5.kind);
      assertEquals(2532, token5.endColumn);
      assertEquals(11, token5.endLine);
      assertEquals(2526, token5.beginColumn);
      assertEquals(11, token5.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals("kK_nzGU", token5.toString());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2532, javaCharStream0.getEndColumn());
      
      Token token6 = new Token();
      assertNotNull(token6);
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token0));
      assertEquals(0, token6.endColumn);
      assertEquals(0, token6.beginLine);
      assertEquals(0, token6.beginColumn);
      assertEquals(0, token6.kind);
      assertEquals(0, token6.endLine);
      assertNull(token6.toString());
      
      javaParserTokenManager0.TokenLexicalActions(token6);
      assertNotSame(token6, token4);
      assertNotSame(token6, token3);
      assertNotSame(token6, token2);
      assertNotSame(token6, token1);
      assertNotSame(token6, token5);
      assertNotSame(token6, token0);
      assertFalse(token6.equals((Object)token4));
      assertFalse(token6.equals((Object)token3));
      assertFalse(token6.equals((Object)token2));
      assertFalse(token6.equals((Object)token1));
      assertFalse(token6.equals((Object)token5));
      assertFalse(token6.equals((Object)token0));
      assertEquals(0, token6.endColumn);
      assertEquals(0, token6.beginLine);
      assertEquals(0, token6.beginColumn);
      assertEquals(0, token6.kind);
      assertEquals(0, token6.endLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertNull(token6.toString());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(2532, javaCharStream0.getColumn());
      assertEquals(2526, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(2532, javaCharStream0.getEndColumn());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Z++^dTOm");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1XP{]iO;=Nz");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.BeginToken();
      assertEquals('1', char0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      javaParserTokenManager0.jjmatchedKind = 0;
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.beginColumn);
      assertEquals(3, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("XP", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(79, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(4, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("{", token1.toString());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaCharStream");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(3, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("com", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(4, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(9, token2.endColumn);
      assertEquals(5, token2.beginColumn);
      assertEquals(1, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals("soops", token2.toString());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@0OF)4zY5x]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals("d", token0.toString());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "d@0OF)4zY5x]");
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(2, token1.beginColumn);
      assertEquals(86, token1.kind);
      assertEquals(2, token1.endColumn);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals("@", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token2.toString());
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      
      Token token3 = javaParserTokenManager2.getNextToken();
      assertNotNull(token3);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager0);
      assertNotSame(javaParserTokenManager2, javaParserTokenManager1);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token3.beginLine);
      assertEquals(74, token3.kind);
      assertEquals(5, token3.endColumn);
      assertEquals(4, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("OF", token3.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token3);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token3));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(1, token2.endLine);
      assertEquals(66, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(3, token2.endColumn);
      assertEquals(3, token2.beginColumn);
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("0", token2.toString());
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("d@V0OeF)4zYx]");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)119;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertEquals(2, byteArrayInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(byteArrayInputStream0, (-2870), (byte)119, (byte)21);
      assertNotNull(javaCharStream0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(2, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      char char0 = javaCharStream0.ReadByte();
      assertEquals(2, byteArray0.length);
      assertEquals('\u0015', char0);
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-2870), token0.beginLine);
      assertEquals(119, token0.endColumn);
      assertEquals(119, token0.beginColumn);
      assertEquals((-2870), token0.endLine);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2870), javaCharStream0.getBeginLine());
      assertEquals((-2870), javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals((-2870), javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals("w", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertEquals(2, byteArray0.length);
      assertFalse(token1.equals((Object)token0));
      assertArrayEquals(new byte[] {(byte)21, (byte)119}, byteArray0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(119, token1.endColumn);
      assertEquals((-2870), token1.endLine);
      assertEquals((-2870), token1.beginLine);
      assertEquals(119, token1.beginColumn);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-2870), javaCharStream0.getBeginLine());
      assertEquals((-2870), javaCharStream0.getEndLine());
      assertEquals(119, javaCharStream0.getColumn());
      assertEquals(119, javaCharStream0.getEndColumn());
      assertEquals((-2870), javaCharStream0.getLine());
      assertEquals(119, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 1993);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 1993. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5 qZ;_lR?2mA6Hk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-1));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals("5", token0.toString());
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertNotSame(token1, token0);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.endLine);
      assertEquals(3, token1.beginColumn);
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(3, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals("qZ", token1.toString());
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(83, token2.kind);
      assertEquals(1, token2.beginLine);
      assertEquals(1, token2.endLine);
      assertEquals(5, token2.beginColumn);
      assertEquals(5, token2.endColumn);
      assertEquals(5, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(5, javaCharStream0.getEndColumn());
      assertEquals(";", token2.toString());
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token3.beginLine);
      assertEquals(8, token3.endColumn);
      assertEquals(74, token3.kind);
      assertEquals(6, token3.beginColumn);
      assertEquals(1, token3.endLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals("_lR", token3.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(6, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(8, javaCharStream0.getColumn());
      
      Token token4 = javaParserTokenManager1.getNextToken();
      assertNotNull(token4);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token4, token0);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token3);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token3));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(91, token4.kind);
      assertEquals(1, token4.endLine);
      assertEquals(9, token4.beginColumn);
      assertEquals(9, token4.endColumn);
      assertEquals(1, token4.beginLine);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(9, javaCharStream0.getBeginColumn());
      assertEquals(9, javaCharStream0.getEndColumn());
      assertEquals(9, javaCharStream0.getColumn());
      assertEquals("?", token4.toString());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"||\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      long long0 = stringReader0.skip((-2950L));
      assertEquals(0L, long0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      Token token0 = Token.newToken((-1));
      assertNotNull(token0);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertNull(token0.toString());
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endLine);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNull(token0.toString());
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(73, token1.kind);
      assertEquals(4, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(1, token1.beginLine);
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals("\"||\"", token1.toString());
  }
}
