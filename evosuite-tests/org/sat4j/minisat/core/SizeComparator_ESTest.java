/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 15:54:09 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.card.MaxWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.OriginalWLClause;
import org.sat4j.minisat.core.SizeComparator;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IVecInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeComparator_ESTest extends SizeComparator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      originalBinaryClause0.forwardActivity(181.555357);
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, (Constr) originalBinaryClause0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      OriginalWLClause originalWLClause1 = new OriginalWLClause(vecInt0, lits0);
      int int0 = sizeComparator0.compare((Constr) originalWLClause0, (Constr) originalWLClause1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      VecInt vecInt0 = new VecInt();
      Lits lits0 = new Lits();
      OriginalWLClause originalWLClause0 = new OriginalWLClause(vecInt0, lits0);
      IVecInt iVecInt0 = vecInt0.push(3);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      Constr constr0 = clausalDataStructureWL0.createUnregisteredClause(iVecInt0);
      int int0 = sizeComparator0.compare((Constr) originalWLClause0, constr0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      VecInt vecInt0 = new VecInt(0, 0);
      Constr constr0 = cardinalityDataStructureYanMax0.createCardinalityConstraint(vecInt0, 0);
      // Undeclared exception!
      try { 
        sizeComparator0.compare(constr0, constr0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      // Undeclared exception!
      try { 
        sizeComparator0.compare((Constr) null, (Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      SizeComparator sizeComparator0 = new SizeComparator();
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, lubyRestarts0);
      Lits lits0 = (Lits)solver0.voc;
      VecInt vecInt0 = new VecInt();
      MaxWatchCard maxWatchCard0 = new MaxWatchCard(lits0, vecInt0, false, 32);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(vecInt0, lits0);
      int int0 = sizeComparator0.compare((Constr) originalBinaryClause0, (Constr) maxWatchCard0);
      assertEquals(2, int0);
  }
}
