/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:42:13 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.AtLeast;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SizeLCDS;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.SolutionCounter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SizeLCDS_ESTest extends SizeLCDS_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = clausalDataStructureWL0.createUnregisteredClause(vecInt0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Constr[] constrArray0 = new Constr[1];
      constrArray0[0] = constr0;
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.WLClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, lubyRestarts0);
      LubyRestarts lubyRestarts1 = (LubyRestarts)sizeLCDS0.getTimer();
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      UnitClause unitClause0 = new UnitClause(0);
      Vec<Constr> vec0 = new Vec<Constr>(5000, unitClause0);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Constr[] constrArray0 = new Constr[1];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      vec0.growTo((-1753), constrArray0[0]);
      // Undeclared exception!
      try { 
        sizeLCDS0.reduce(vec0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      VecInt vecInt0 = new VecInt(32);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, lubyRestarts0);
      // Undeclared exception!
      try { 
        sizeLCDS0.onConflictAnalysis(unitClauses0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Solver<CardinalityDataStructureYanMin> solver0 = (Solver<CardinalityDataStructureYanMin>) mock(Solver.class, new ViolatedAssumptionAnswer());
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      // Undeclared exception!
      try { 
        sizeLCDS0.onConflictAnalysis((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SizeLCDS", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = clausalDataStructureWL0.createUnregisteredClause(vecInt0);
      sizeLCDS0.onConflictAnalysis(constr0);
      assertEquals(1.0, constr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      UnitClause unitClause0 = new UnitClause(0);
      sizeLCDS0.onConflictAnalysis(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PercentLengthLearning<MixedDataStructureSingleWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>(aSolverFactory0);
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(percentLengthLearning0, mixedDataStructureSingleWL0, (SearchParams) null, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      Constr[] constrArray0 = new Constr[0];
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      Constr constr0 = Constr.TAUTOLOGY;
      vec0.insertFirst(constr0);
      sizeLCDS0.reduce(vec0);
      assertEquals(1, vec0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      Lits lits0 = new Lits();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsStringSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(solutionCounter0);
      IVecInt iVecInt1 = iVecInt0.push(3);
      IVecInt iVecInt2 = iVecInt1.push(3);
      OriginalBinaryClause originalBinaryClause0 = new OriginalBinaryClause(iVecInt2, lits0);
      Vec<Constr> vec0 = new Vec<Constr>(3, originalBinaryClause0);
      sizeLCDS0.reduce(vec0);
      assertEquals(3, vec0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, noRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, noRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      AtLeast atLeast0 = new AtLeast((ILits) null, iVecInt0, (-1753));
      Constr[] constrArray0 = new Constr[1];
      constrArray0[0] = (Constr) atLeast0;
      Vec<Constr> vec0 = new Vec<Constr>(constrArray0);
      sizeLCDS0.reduce(vec0);
      assertFalse(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LubyRestarts lubyRestarts0 = new LubyRestarts((-185));
      SizeLCDS sizeLCDS0 = new SizeLCDS((Solver<? extends DataStructureFactory>) null, lubyRestarts0);
      sizeLCDS0.init();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-2202));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      BasicLauncher<AbstractMinimalModel> basicLauncher0 = new BasicLauncher<AbstractMinimalModel>((ASolverFactory<AbstractMinimalModel>) null);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      String string0 = sizeLCDS0.toString();
      assertEquals("Sized based learned constraints deletion strategy with timer null", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoRestarts noRestarts0 = new NoRestarts();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(469);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, noRestarts0, (ILogAble) null);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, (ConflictTimer) null);
      ConflictTimer conflictTimer0 = sizeLCDS0.getTimer();
      assertNull(conflictTimer0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      VecInt vecInt0 = new VecInt(32);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, lubyRestarts0);
      sizeLCDS0.onClauseLearning(unitClauses0);
      assertFalse(unitClauses0.simplify());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      VecInt vecInt0 = new VecInt(32);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      SizeLCDS sizeLCDS0 = new SizeLCDS(solver0, lubyRestarts0);
      sizeLCDS0.onPropagation(unitClauses0);
      assertTrue(unitClauses0.isSatisfied());
  }
}
