/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:39:13 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float((double) 22.713877F);
      Wall wall0 = new Wall(22.713877F, (-3409.0F), (-1.0F), 1313.0F, 1490.5F, (-1.0F));
      Wall wall1 = new Wall(1490.5F, 22.713877F, 1490.5F, 1490.5F, (-1.0F), (-1.0F));
      wall1.setXStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall1.setThickness(1313.0F);
      wall0.intersectsRectangle((-1.0F), 22.713877F, 1490.5F, 0.0F);
      wall1.getPoints();
      Integer integer0 = new Integer((-1274213569));
      wall1.setRightSideColor(integer0);
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float float0 = new Float((double) 22.713877F);
      Wall wall0 = new Wall(22.713877F, (-3409.0F), (-1.0F), 1313.0F, 1490.5F, (-1.0F));
      Wall wall1 = new Wall(1490.5F, 22.713877F, 1490.5F, 1490.5F, (-1.0F), (-1.0F));
      wall1.setXStart(0.0F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall1.setThickness(1313.0F);
      wall0.intersectsRectangle((-1.0F), 22.713877F, 1490.5F, 0.0F);
      wall1.getPoints();
      wall1.getPoints();
      wall1.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      wall0.setHeight((Float) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      Float.max((-1306.1F), (-1306.1F));
      Float float0 = new Float((-1.07219F));
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall((-1306.1F), (-1.07219F), 3529.1F, (-1.07219F), 0.0F, (-1.07219F));
      Wall wall2 = wall0.clone();
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      Integer integer0 = new Integer((-16));
      wall0.setLeftSideColor(integer0);
      wall0.setRightSideShininess((-24.57755F));
      wall0.setWallAtEnd(wall0);
      wall0.isTrapezoidal();
      wall0.getLeftSideTexture();
      wall0.setYEnd((-24.57755F));
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.setYEnd((-16));
      Float float0 = new Float((-24.57755F));
      Integer integer1 = new Integer((-16));
      wall0.setLeftSideColor(integer0);
      wall0.setRightSideColor(integer0);
      wall0.setXEnd((-519.3F));
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(2479.2817F, 0.1F, (-519.3F));
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 669.935F, (-1.0F), (-2444.4512F), (-2563.321F), 669.935F);
      wall0.setLeftSideShininess((-1173.319F));
      wall0.setXEnd(1.0F);
      Float float0 = new Float((double) 314.7282F);
      Float.max(925.42224F, (-2050.978F));
      Float float1 = new Float(669.935F);
      wall0.setArcExtent(float1);
      wall0.getLeftSideShininess();
      wall0.getLeftSideColor();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1189.0514F), 0.1F);
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) (-1189.0514F));
      Wall wall1 = new Wall(0.1F, 0.0F, (-330.4F), 1.0F, 0, 0.1F);
      wall0.setWallAtEnd(wall1);
      wall0.setXStart(0);
      wall0.setXStart((-330.4F));
      wall1.containsPoint((-1.0F), 1418.8771F, 0.1F);
      wall1.setWallAtStart(wall0);
      wall1.containsWallStartAt(0, (-1.0F), 1198.038F);
      wall0.containsWallEndAt(1418.8771F, (-1345.5F), 825.6815F);
      wall0.getArcExtent();
      wall1.setHeight((Float) null);
      wall1.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 2.0F, 2.0F, (-1401.8195F), (-1401.8195F));
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getArcExtent();
      Integer integer0 = new Integer(2146559656);
      Level level0 = new Level("u2vme:02!", 2.0F, 2146559656, (-977.6278F));
      level0.setVisible(true);
      wall0.isAtLevel(level0);
      wall0.setYStart(2.0F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Wall wall0 = new Wall(2.9100409F, 2.9100409F, 2.9100409F, 2.9100409F, 2.9100409F, 2.9100409F);
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      Integer integer0 = new Integer((-16));
      wall0.setLeftSideColor(integer0);
      wall0.setRightSideShininess(0.0F);
      wall0.setWallAtEnd(wall0);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getArcExtent();
      Integer integer1 = new Integer((-16));
      Integer integer2 = new Integer(5);
      wall0.setRightSideColor(integer2);
      wall0.setXStart(0.0F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Float float0 = new Float((-785.648F));
      wall0.setHeightAtEnd(float0);
      wall0.setRightSideColor((Integer) null);
      wall0.setXStart(0.1F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.setXEnd(0.0F);
      Float float0 = new Float((double) 0.0F);
      wall0.setXStart(1360.44F);
      wall0.setXStart(0.0F);
      wall0.setXStart(0.0F);
      wall0.getLength();
      wall0.getLevel();
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.containsWallEndAt((-3874.2693F), 1543.853F, 1543.853F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 318.124F, 0.1F, 0.1F, 0.1F, 318.124F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      Wall wall1 = wall0.clone();
      wall1.containsPoint(1388.6525F, 1.0F, 318.124F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 549.6F, 0.0F, 549.6F, 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.setLeftSideShininess((-1.0F));
      assertEquals((-1.0F), wall1.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1189.0514F), 0.1F);
      Integer integer0 = new Integer(0);
      Float float0 = new Float((double) (-1189.0514F));
      wall0.setWallAtEnd(wall0);
      wall0.setXStart(0);
      wall0.setXStart((-330.4F));
      wall0.containsPoint((-1.0F), 1418.8771F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.containsWallStartAt(0, (-1.0F), 1198.038F);
      wall0.containsWallEndAt(1418.8771F, (-1345.5F), 825.6815F);
      wall0.getArcExtent();
      wall0.setHeight((Float) null);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      Float float0 = new Float(0.1F);
      Wall wall1 = new Wall((-2390.983F), (float) float0, (float) float0, 0.1F, (-1173.319F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setXStart((-2390.983F));
      wall1.setXStart((float) float0);
      Wall wall2 = new Wall(2.0F, 0.1F, (-785.648F), 0.0F, (-785.648F), (-1173.319F));
      wall2.setWallAtStart(wall0);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-1812.8375F), (-1.0F), 0.68763864F, (-1.0F), (-1812.8375F));
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-1812.8375F), 4.5077186F, (-2260.07F));
      wall0.setLevel(level0);
      wall0.getRightSideTexture();
      Level level1 = new Level("2!O", 3328.8772F, 3172.1365F, (-1401.8195F));
      Level level2 = new Level("cc8WY+,n", (-1812.8375F), (-974.1512F), 0.68763864F);
      wall0.isAtLevel(level2);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 0.68763864F);
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-1476.1191F), 0.68763864F, 1.0F);
      wall0.setLevel(level0);
      wall0.getRightSideTexture();
      Level level1 = new Level("", 0.68763864F, 0.68763864F, 0.68763864F);
      wall0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXStart((-1173.319F));
      wall1.setXStart((-2368.0918F));
      wall1.containsPoint((-785.648F), (-785.648F), 1.0F);
      Wall wall2 = wall1.getWallAtEnd();
      wall1.getLeftSideColor();
      wall2.setWallAtEnd(wall0);
      wall2.getArcExtent();
      wall1.getLeftSideTexture();
      wall2.setRightSideShininess((-1173.319F));
      wall2.containsWallStartAt((-235.235F), (-944.0F), (-2329.0F));
      wall0.clone();
      Float float0 = new Float(0.1F);
      wall1.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall(4137.967F, 1.0F, 1355.83F, 1355.83F, 1355.83F, 1.0F);
      wall0.getXArcCircleCenter();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall((-1388.1257F), (-2016.37F), 2746.8984F, (-1.0F), 520.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXStart(1.0F);
      wall0.setXStart((-747.5F));
      Wall wall2 = new Wall(1.0F, (-1401.8195F), (-3235.785F), (-195.0F), 1.0F, 3550.9097F);
      wall1.setWallAtStart(wall0);
      wall1.getPoints();
      wall1.containsWallEndAt(2746.8984F, 146.23262F, (-0.77792424F));
      wall2.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getArcExtent();
      Integer integer1 = new Integer(2146559656);
      wall0.setRightSideColor(integer0);
      wall0.setXStart(2.0F);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(2221.5005F, 2221.5005F, 2221.5005F, 2221.5005F, 2221.5005F);
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float(2171.7);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0, (-2059.7F), (-1173.319F), (-353.849F), (-353.849F));
      wall0.clone();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(5.0979013F, 5.0979013F, 11.878568F, 5.0979013F, 11.878568F, 11.878568F);
      wall0.setWallAtEnd(wall0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), (-1401.8195F), (-1.0F), (-1.0F), (-1401.8195F), (-1401.8195F));
      Float float0 = new Float((-1.0F));
      Wall wall1 = new Wall(1.0F, (-1.0F), (-590.0F), (-1.0F), 110.31207F);
      Wall wall2 = wall0.clone();
      wall2.setWallAtEnd(wall0);
      wall1.setXEnd((-1182.101F));
      wall1.isTrapezoidal();
      wall1.getYArcCircleCenter();
      wall2.getPoints();
      wall0.getStartPointToEndPointDistance();
      wall2.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), 0.0F, 0.0F);
      Wall wall1 = wall0.clone();
      wall1.getThickness();
      wall1.setThickness((-2139.0F));
      wall1.getXArcCircleCenter();
      wall1.getRightSideShininess();
      wall1.setWallAtEnd(wall0);
      wall1.setXStart((-2139.0F));
      wall0.setXStart(0.0F);
      wall0.setXStart(2.0F);
      Wall wall2 = wall1.clone();
      wall1.setLeftSideShininess((-34.722107F));
      Level level0 = new Level("VISIBLE", 0.0F, 0.0F, 1802.7F);
      level0.clone();
      wall2.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      wall0.getArcExtent();
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float(2171.7);
      Float.max(328.2F, 0.1F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(0, (-2059.7F), (-1189.0514F), (-321.61633F), (-321.61633F));
      Wall wall2 = wall0.clone();
      wall2.setRightSideShininess((-0.16297233F));
      wall2.getPoints();
      wall2.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall((-27.04416F), (-785.648F), 0.0F, (-27.04416F), (-1173.319F), (-27.04416F));
      wall1.setYEnd(223.6F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(1.0F, 1923.0F, (-590.0F), 1923.0F, 0.0F);
      wall0.setWallAtEnd(wall2);
      wall2.setXStart((-1173.319F));
      wall0.containsPoint((-785.648F), (-816.2F), (-423.8133F));
      wall2.setLeftSideShininess((-1188.2F));
      wall0.getWallAtEnd();
      wall0.getLeftSideColor();
      wall2.getArcExtent();
      wall0.getLeftSideTexture();
      wall0.setRightSideShininess(1.0F);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      Float float0 = new Float(0.1F);
      Wall wall1 = new Wall((-2368.0918F), (float) float0, (float) float0, 0.1F, (-423.8133F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.setXStart(1.0F);
      wall1.setXStart((float) float0);
      wall1.containsPoint((-355.97F), 1.0F, (-2368.0918F));
      wall1.getWallAtEnd();
      Wall wall2 = wall0.getWallAtEnd();
      wall2.getLeftSideColor();
      Level level0 = new Level("", (-785.648F), (-2368.0918F), 2361.3535F);
      wall2.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      Float float0 = new Float((-785.648F));
      wall0.setLeftSideShininess((-423.8133F));
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.setXStart((-2939.0F));
      Wall wall1 = wall0.clone();
      wall0.setLeftSideShininess(0);
      wall1.setRightSideColor(integer0);
      wall1.setXStart((-1016.089F));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1173.319F), 0.1F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      Wall wall1 = new Wall(2261.8257F, 2757.97F, (-522.2F), (-1173.319F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall0.setXStart(2261.8257F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-1.0F));
      Float.max(669.935F, 0.0F);
      Float.max(0.0F, 0.0F);
      wall0.containsWallEndAt((-1.0F), (-187.0F), (-1.0F));
      Float.max(2554.0F, (-1104.7412F));
      wall0.getArcExtent();
      wall0.setHeight((Float) null);
      wall0.getLeftSideColor();
      wall0.getLeftSideShininess();
      Wall wall1 = new Wall(2711.9F, 30.51147F, (-1.0F), 0.0F, 0.1F, (-1.0F));
      wall1.isTrapezoidal();
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall1.intersectsRectangle(2554.0F, 669.935F, 173.88268F, (-1.0F));
      wall1.setLeftSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      Float float0 = new Float(0.0F);
      wall0.setArcExtent(float0);
      wall0.getLeftSideShininess();
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1172.802F), 0.1F);
      Float float0 = new Float((-1172.802F));
      Wall wall1 = new Wall(0.1F, (float) float0, (float) float0, 0.1F, (-1172.802F));
      wall0.setWallAtEnd(wall1);
      wall1.setXStart((float) float0);
      wall1.setWallAtStart(wall0);
      wall1.setArcExtent(float0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(2221.5005F, 2221.5005F, 2221.5005F, 2221.5005F, 2221.5005F);
      wall0.setThickness(2221.5005F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(3.668F, 3.668F, 0.0F, 0.0F, 3.668F);
      Float float0 = new Float(3.668F);
      wall0.setArcExtent(float0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F);
      Float float0 = new Float((double) 0);
      Integer integer0 = new Integer(0);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 3.668F, 3.668F, 3.668F);
      Float float0 = new Float(3.668F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(502.16F, 502.16F, 502.16F, 502.16F, 0.0F, 502.16F);
      wall0.containsWallStartAt(0.0F, 812.03F, 0.0F);
      wall0.containsWallStartAt(0.0F, 502.16F, 0.0F);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 0.68763864F);
      Integer integer0 = new Integer(2670);
      Level level0 = new Level("F0F,E*", (-1447.0F), (-1.0F), (-2472.6147F));
      wall0.isAtLevel(level0);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Float float0 = new Float((double) 0.1F);
      wall0.intersectsRectangle(0.1F, 0.1F, 0.1F, 0.1F);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setXStart(0.1F);
      wall0.setXStart(0.1F);
      Wall wall1 = new Wall(0.0F, 0.1F, (-1173.319F), (-456.9298F), (-785.648F), 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall1.containsWallEndAt((-3189.7F), 0.0F, (-2368.0918F));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(1248.79F, 0.0F, (-1448.7477F), 1248.79F, 1.0F);
      wall0.getPattern();
      wall0.getRightSideColor();
      wall0.getPoints();
      wall0.containsWallEndAt(1.0F, 1248.79F, 1248.79F);
      Float float0 = new Float(0.01F);
      Float.sum(3031.6038F, 3031.6038F);
      Float.max(1.0F, (-1448.7477F));
      Float.sum(0.01F, 0.0F);
      Float.isFinite(0.01F);
      Float.isFinite(0.0F);
      wall0.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      linkedList0.add(wall0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      wall0.getPoints();
      Float float1 = new Float(0.01F);
      Float.max(0.0F, (-1448.7477F));
      wall0.setHeight(float1);
      Wall.Property.values();
      wall0.getRightSideColor();
      wall0.getWallAtEnd();
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      Integer integer0 = new Integer((-16));
      wall0.setLeftSideColor(integer0);
      wall0.setRightSideShininess((-1.4874175F));
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint(0.027131338F, 0.027131338F, 0.027131338F);
      Wall wall1 = wall0.getWallAtEnd();
      wall1.getLeftSideColor();
      wall1.getArcExtent();
      wall0.getLeftSideTexture();
      wall0.setRightSideShininess((-1611.2722F));
      wall0.containsWallStartAt((-2011.2104F), (-16), (-2329.0F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.containsPoint((-1173.319F), (-785.648F), (-1173.319F));
      wall0.getLeftSideColor();
      wall0.getLeftSideTexture();
      wall0.setRightSideShininess(2.0F);
      wall0.containsWallStartAt((-174.7849F), 1729.0874F, 53.0582F);
      wall0.move(1729.0874F, 0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.setXEnd(0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.max(669.935F, 0.0F);
      Float.max(669.935F, 3604.54F);
      wall0.containsWallEndAt(2554.0F, (-2493.6335F), 2711.9F);
      Float.max(1.0F, 1291.06F);
      wall0.setHeight(float0);
      wall0.getLeftSideColor();
      wall0.getLeftSideShininess();
      wall0.isTrapezoidal();
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      Wall wall1 = new Wall(0.1F, 181.0F, 181.0F, 965.1401F, 181.0F);
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-569.42F), (-177.8257F), (-2260.07F));
      wall0.setLevel(level0);
      wall1.getRightSideTexture();
      Level level1 = new Level("2!O", 3328.8772F, (-2260.07F), 1.0F);
      Level level2 = new Level("", (-569.42F), 965.1401F, (-177.8257F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2!O", propertyChangeListener0);
      level2.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.isAtLevel(level2);
      wall1.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Wall wall0 = new Wall(22.713877F, 22.713877F, 22.713877F, 22.713877F, 22.713877F);
      Float float0 = new Float((double) 22.713877F);
      wall0.containsPoint(22.713877F, 0.1F, 22.713877F);
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      Wall wall1 = wall0.clone();
      wall1.getThickness();
      wall1.setThickness((-2139.0F));
      wall1.getXArcCircleCenter();
      wall1.getRightSideShininess();
      wall1.setWallAtEnd(wall0);
      wall1.setXStart(0.0F);
      wall0.setXStart((-2050.978F));
      wall0.setXStart(2.0F);
      wall1.getLength();
      wall0.getLevel();
      wall0.setLevel((Level) null);
      wall0.getLeftSideTexture();
      wall1.getLeftSideTexture();
      wall1.getXEnd();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-1.0F));
      Float.max(669.935F, 0.0F);
      Float.max(0.0F, 0.0F);
      wall0.containsWallEndAt((-1.0F), (-187.0F), (-1.0F));
      Float.max(2554.0F, (-1104.7412F));
      wall0.getArcExtent();
      wall0.setHeight((Float) null);
      wall0.getLeftSideColor();
      wall0.getLeftSideShininess();
      Wall wall1 = new Wall(2711.9F, 30.51147F, (-1.0F), 0.0F, 0.1F, (-1.0F));
      wall1.isTrapezoidal();
      wall1.getYArcCircleCenter();
      wall0.containsWallEndAt((-1104.7412F), 2554.0F, 2554.0F);
      wall1.setThickness((-1104.7412F));
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1.0F), (-1206.2697F), (-1206.2697F));
      Wall wall1 = wall0.clone();
      wall1.getPoints();
      wall1.setXStart(0.0F);
      wall1.move((-1.0F), 0.0F);
      wall1.getPoints();
      wall1.setXEnd(0.0F);
      Wall wall2 = wall1.clone();
      wall1.setYStart((-1.0F));
      wall2.setLeftSideShininess(2554.0F);
      wall0.getArcExtent();
      Wall wall3 = new Wall(902.305F, 0.0F, 2983.9316F, 2983.9316F, 0.0F, 0.0F);
      Integer integer0 = new Integer(1050);
      wall3.setLeftSideColor(integer0);
      wall3.clone();
      wall2.setLeftSideShininess((-1206.2697F));
      wall2.isTrapezoidal();
      Level level0 = new Level("VISIBLE", (-988.3997F), (-1.0F), 2554.0F);
      Level level1 = level0.clone();
      wall2.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      Wall wall1 = new Wall(0.1F, 181.0F, 181.0F, 964.55164F, 181.0F);
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-785.648F), (-1189.0514F), 3128.0F);
      wall1.setLevel(level0);
      Level level1 = new Level("com.eteks.sweethome3d.model.BackgroundImage", 1.0F, 1253.13F, 1.0F);
      wall0.isAtLevel(level0);
      wall0.getPoints();
      wall1.getLevel();
      wall1.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getXArcCircleCenter();
      Wall wall1 = new Wall((-519.3F), (-1359.0F), 1167.0F, (-1359.0F), 1167.0F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      wall1.setThickness((-785.648F));
      wall0.setXEnd((-785.648F));
      wall0.getLevel();
      wall1.setXStart((-7.6923077E-4F));
      wall1.getRightSideColor();
      wall1.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall(3.7F, 3.7F, 3.7F, 3.7F, 3.7F);
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), 0.1F, 0.1F);
      wall0.getArcExtent();
      wall0.getLeftSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.getArcExtent();
      wall0.setHeightAtEnd((Float) null);
      float float0 = new Float((-785.648F));
      wall0.getLeftSideColor();
      wall0.getLength();
      Wall wall1 = wall0.clone();
      wall1.containsWallEndAt(2454.644F, 0.1F, (-49.259F));
      wall0.setLeftSideColor((Integer) null);
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall((-2413.5793F), (-2413.5793F), (-2413.5793F), (-2413.5793F), (-2413.5793F));
      Wall wall1 = wall0.clone();
      Float float0 = new Float(1.0E-10);
      wall1.setHeightAtEnd(float0);
      wall1.setXStart((-1.0F));
      wall1.containsWallStartAt((-519.3F), (-519.3F), (-3598.8462F));
      Float float1 = new Float((-3598.8462F));
      Float.isFinite((-519.3F));
      wall1.setHeight(float1);
      wall1.getLength();
      wall1.getXStart();
      wall1.getRightSideShininess();
      wall1.isTrapezoidal();
      wall1.clone();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), (-1401.8195F), (-2369.62F), (-785.648F), (-1401.8195F), 3583.2837F);
      wall0.getArcExtent();
      wall0.getLeftSideTexture();
      CatalogTexture catalogTexture0 = new CatalogTexture("X_END", "X_END", (Content) null, 888.3128F, (-785.648F), "X_END", false);
      wall0.setPattern(catalogTexture0);
      wall0.getArcExtent();
      wall0.setHeightAtEnd((Float) null);
      wall0.getLeftSideShininess();
      wall0.getLeftSideColor();
      wall0.getLength();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-786.4923F), 1522.0F, (-786.4923F), (-3.828274F), (-1.0F), (-1.0F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.setXStart((-1.0F));
      wall1.setXStart((-448.0F));
      wall1.containsPoint(0.1F, 1418.8771F, 317.2F);
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(1994.254F, 1.0F, 1994.254F, 357.04266F, 1994.254F, 1980.6674F);
      Float float0 = new Float(1.0F);
      Float.sum(0.01F, 0.0F);
      wall0.setArcExtent(float0);
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-1.0F));
      wall0.setXStart(0.0F);
      wall0.setXStart(0.0F);
      wall0.setXStart(0.0F);
      wall0.getLength();
      wall0.getLevel();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getXArcCircleCenter();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setLeftSideShininess(1137.4F);
      wall1.containsPoint((-785.648F), (-785.648F), 1.0F);
      Wall wall2 = wall1.getWallAtEnd();
      wall1.getLeftSideColor();
      wall2.getArcExtent();
      wall1.getLeftSideTexture();
      wall2.setRightSideShininess((-1173.319F));
      Wall wall3 = wall1.getWallAtEnd();
      wall0.getPoints();
      wall3.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.getLeftSideShininess();
      Wall wall1 = new Wall((-1173.319F), 0.1F, 0.01F, 0.01F, 0.0F, 30.51147F);
      wall0.isTrapezoidal();
      wall0.getYArcCircleCenter();
      wall0.containsWallEndAt(0.01F, (-785.648F), (-3331.0F));
      Wall wall2 = wall0.clone();
      wall2.setThickness(0);
      wall1.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall2.getXEnd();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.setXEnd(0.0F);
      Float float0 = new Float((double) 0.0F);
      float float1 = new Float(0.0F);
      Float.max(669.935F, 3604.54F);
      wall0.containsWallEndAt(2554.0F, (-2493.6335F), 2711.9F);
      wall0.containsPoint(2711.9F, (-1.0F), (-310.628F));
      wall0.getLeftSideColor();
      wall0.getArcExtent();
      Wall wall1 = new Wall((-1361.9F), (-1361.9F), 0.0F, 1351.7769F, (-2717.51F), (-1231.0F));
      wall1.getLeftSideTexture();
      Wall wall2 = new Wall(0.0F, 1450.22F, (-925.304F), 1450.22F, (-1.0F));
      wall2.setRightSideShininess(3604.54F);
      wall0.containsWallStartAt(82.908295F, 2711.9F, 3604.54F);
      wall0.move(0.0F, (-2422.0F));
      wall2.getYEnd();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-785.648F), 0.1F);
      wall0.getXArcCircleCenter();
      Wall wall1 = new Wall((-785.648F), (-785.648F), 0.1F, (-785.648F), (-785.648F), (-785.648F));
      wall0.setWallAtEnd(wall1);
      wall0.clone();
      wall0.setWallAtEnd(wall0);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      Integer integer0 = new Integer(0);
      Float float0 = new Float(2171.7);
      Wall wall1 = new Wall(0.1F, 0.0F, (-330.4F), 1.0F, 0, (-785.648F));
      wall0.setWallAtEnd(wall1);
      wall0.setXStart(0);
      wall0.setXStart((-330.4F));
      wall1.containsPoint((-1.0F), 1418.8771F, (-785.648F));
      wall1.setWallAtStart(wall0);
      wall0.getPoints();
      wall1.containsWallStartAt(0, (-1.0F), 1198.038F);
      wall0.containsWallEndAt(1418.8771F, (-1345.5F), 825.6815F);
      wall1.getPoints();
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      wall0.setThickness(2740.0F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-2563.321F), 1.0F, 669.935F, 268.3229F, 1161.43F);
      wall0.setLeftSideShininess((-1.0F));
      wall0.setXEnd((-3327.769F));
      Float float0 = new Float((double) 268.3229F);
      Float.max(1.0F, 894.23785F);
      Float float1 = new Float((-2141.02F));
      wall0.setArcExtent(float1);
      wall0.getLeftSideShininess();
      wall0.getLeftSideColor();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.setRightSideShininess(2957.4631F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setXStart(1.0F);
      wall1.setXStart((-2368.0918F));
      wall0.setLeftSideColor((Integer) null);
      wall1.setXEnd(418.0116F);
      wall0.getPoints();
      wall0.containsWallEndAt((-1173.319F), 2957.4631F, (-944.0F));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, (-0.16988471F), (-0.16988471F));
      Float float0 = new Float((double) 1.0F);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1173.319F), 0.1F);
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      Wall wall1 = new Wall(2261.8257F, 2757.97F, (-522.2F), (-1173.319F), 0.1F);
      wall0.setWallAtEnd(wall1);
      wall0.setXStart(2261.8257F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.getPoints();
      Level level0 = new Level("", 0.9874959F, 2757.97F, 558.9844F);
      wall0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 1355.83F, 1355.83F, (-1306.1F));
      Integer integer0 = new Integer((-1297));
      Integer integer1 = new Integer((-1297));
      wall0.setLeftSideColor(integer1);
      Float float0 = new Float(1.9263249635696411);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(863.8F, (-2840.0F), (-2840.0F), 323.517F, (-2840.0F));
      Wall wall2 = wall0.clone();
      wall0.getPoints();
      wall0.getRightSideTexture();
      wall2.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd((-1.0F));
      Float.max(669.935F, 0.0F);
      Float.max(0.0F, 0.0F);
      wall0.containsWallEndAt((-1.0F), (-187.0F), (-1.0F));
      Float float0 = new Float(240.2F);
      Float float1 = new Float(0.0F);
      wall0.setArcExtent(float1);
      wall0.getLeftSideShininess();
      wall0.getLeftSideColor();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(0.7461021F, 0.7461021F, 0.7461021F, 0.7461021F, 0.7461021F, 0.7461021F);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall((-27.04416F), (-785.648F), 0.0F, (-27.04416F), (-1173.319F), (-27.04416F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(0.1F, (-785.648F), 804.5581F, 804.5581F, 0.1F);
      wall2.setWallAtEnd(wall1);
      wall2.setXStart((-785.648F));
      wall0.containsPoint((-1.0F), 0.1F, 0.1F);
      Wall wall3 = wall2.getWallAtEnd();
      wall3.getLeftSideColor();
      wall1.getArcExtent();
      wall0.getLeftSideTexture();
      Wall wall4 = new Wall((-785.648F), (-816.2F), (-1947.0F), 1774.0F, (-641.29F), 298.5F);
      wall4.setRightSideShininess((-1228.7058F));
      wall3.getLength();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-12.672352F), (-12.672352F), (-12.672352F), (-12.672352F), (-12.672352F), (-12.672352F));
      Float float0 = new Float((-12.672352F));
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setXStart(0.1F);
      Wall wall1 = new Wall(0.1F, 0.1F, (-1173.319F), 0.1F, 0.1F, 0.1F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      wall0.move(1.0F, 2206.1853F);
      wall0.intersectsRectangle((-536.2838F), 1487.7472F, 2206.1853F, 2206.1853F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall((-809.2146F), 0.01F, 1924.004F, 2221.0F, (-1189.0514F), (-809.2146F));
      assertNotNull(wall0);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(3521.829F, wall0.getLength(), 0.01F);
      assertEquals(1924.004F, wall0.getXEnd(), 0.01F);
      assertEquals((-809.2146F), wall0.getHeight(), 0.01F);
      assertEquals((-809.2146F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3521.829F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1110.505F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(557.3947F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(100000.0);
      assertEquals(100000.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(1134.9402F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(1.761196E8F, wall0.getLength(), 0.01F);
      assertEquals(1924.004F, wall0.getXEnd(), 0.01F);
      assertEquals((-809.2146F), wall0.getHeight(), 0.01F);
      assertEquals((-809.2146F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(537.53894F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3521.829F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(100000.0F, wall0.getArcExtent(), 0.01F);
      
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(669.935F, 0.0F);
      assertEquals(669.935F, float1, 0.01F);
      
      Float float2 = new Float(3257.0F);
      assertEquals(3257.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3257.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float3 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3257.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3257.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float4 = wall0.getLength();
      assertEquals(0.0F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float3, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3257.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 1355.83F, 1355.83F, 1355.83F);
      assertNotNull(wall0);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      
      Integer integer0 = new Integer((-1297));
      assertEquals((-1297), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(1.9263249635696411);
      assertEquals(1.926325F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setXStart(2.0F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1353.83F, wall0.getLength(), 0.01F);
      assertEquals(678.915F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1353.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart((-1297));
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1686.55F, 1198.038F, 0.0F);
      assertFalse(boolean0);
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(1686.55F, 2850.5F, 1686.55F, 2850.5F, (-1230.0F), (-2620.517F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2850.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2850.5F, wall1.getYStart(), 0.01F);
      assertEquals(1686.55F, wall1.getXStart(), 0.01F);
      assertEquals((-1230.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.55F, wall1.getXEnd(), 0.01F);
      assertEquals((-2620.517F), wall1.getHeight(), 0.01F);
      assertEquals(2850.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2850.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2850.5F, wall1.getYStart(), 0.01F);
      assertEquals(1686.55F, wall1.getXStart(), 0.01F);
      assertEquals((-1230.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.55F, wall1.getXEnd(), 0.01F);
      assertEquals((-2620.517F), wall1.getHeight(), 0.01F);
      assertEquals(2850.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2850.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2850.5F, wall1.getYStart(), 0.01F);
      assertEquals(1686.55F, wall1.getXStart(), 0.01F);
      assertEquals((-1230.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.55F, wall1.getXEnd(), 0.01F);
      assertEquals((-2620.517F), wall1.getHeight(), 0.01F);
      assertEquals(2850.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall1.containsWallEndAt(743.5F, (-1.0F), (-2620.517F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2850.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2850.5F, wall1.getYStart(), 0.01F);
      assertEquals(1686.55F, wall1.getXStart(), 0.01F);
      assertEquals((-1230.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1686.55F, wall1.getXEnd(), 0.01F);
      assertEquals((-2620.517F), wall1.getHeight(), 0.01F);
      assertEquals(2850.5F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1686.55F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2850.5F, wall2.getYStart(), 0.01F);
      assertEquals(2850.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2850.5F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1686.55F, wall2.getXStart(), 0.01F);
      assertEquals(1686.55F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2620.517F), wall2.getHeight(), 0.01F);
      assertEquals((-1230.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Level level0 = wall2.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1686.55F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2850.5F, wall2.getYStart(), 0.01F);
      assertEquals(2850.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2850.5F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1686.55F, wall2.getXStart(), 0.01F);
      assertEquals(1686.55F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2620.517F), wall2.getHeight(), 0.01F);
      assertEquals((-1230.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall3 = wall0.getWallAtStart();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals((-1297.0F), wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2652.83F, wall0.getLength(), 0.01F);
      assertEquals(29.414978F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2652.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(1686.55F, wall3.getXStart(), 0.01F);
      assertEquals((-1230.0F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1686.55F, wall3.getXEnd(), 0.01F);
      assertEquals((-2620.517F), wall3.getHeight(), 0.01F);
      assertEquals(2850.5F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(2850.5F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1686.55F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(2850.5F, wall3.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), 434.15F, 0.1F);
      assertNotNull(wall0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(434.15F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float(0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.1F, (float) float0, (float) float0, 0.1F, 434.15F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(434.15F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setXStart((float) float0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(434.15F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(434.15F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(434.15F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(434.15F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(434.15F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.intersectsRectangle((-785.648F), (-785.648F), (-785.648F), 434.15F);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(434.15F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall((-2368.0918F), (float) float2, (float) float2, 0.1F, (-423.8133F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((float) float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), 1.0F, (-2368.0918F));
      assertFalse(boolean0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall1.containsWallStartAt((-355.97F), (-0.18073148F), 1059.1039F);
      assertTrue(boolean1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Wall wall3 = wall0.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(0.1F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setHeight(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      assertNotNull(wall0);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      float float2 = wall0.getLength();
      assertEquals(1355.83F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1304.972F), (-1304.972F), 0.0F, 1355.83F);
      assertNotNull(wall0);
      assertEquals((-652.486F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-652.486F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1845.5092F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = Float.max((-1304.972F), (-1304.972F));
      assertEquals((-1304.972F), float0, 0.01F);
      
      Float float1 = new Float((-1.07219F));
      assertEquals((-1.07219F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1936.965F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(445.72772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(445.72772F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1936.965F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(445.72772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(445.72772F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1936.965F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(445.72772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(445.72772F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1304.972F), wall1.getXEnd(), 0.01F);
      assertEquals((-1304.972F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.07219F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1355.83F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(445.72772F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1845.5092F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1936.965F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(445.72772F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getYArcCircleCenter();
      assertEquals(445.72772F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1936.965F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(445.72772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(445.72772F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1304.972F), wall1.getXEnd(), 0.01F);
      assertEquals((-1304.972F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.07219F), wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1355.83F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(445.72772F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1845.5092F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1936.965F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(445.72772F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-1304.972F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1936.965F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1845.5092F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(445.72772F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(445.72772F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1304.972F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertNull(homeTexture1);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      wall0.setHeight(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(418.0116F, 418.0116F, 418.0116F, 2361.3535F, 2361.3535F, 0.0F);
      assertNotNull(wall0);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(418.0116F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(418.0116F, wall0.getXEnd(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1943.3419F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1943.3419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideShininess(186.39322F);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(418.0116F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(418.0116F, wall0.getXEnd(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1943.3419F, wall0.getLength(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1943.3419F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      wall0.setXEnd(2.0F);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(521.36);
      assertEquals(521.36F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-1.0F), 669.935F);
      assertEquals(669.935F, float1, 0.01F);
      
      float float2 = Float.max(0.1F, 0.0F);
      assertEquals(0.1F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(1.0F, 0.0F, 2078.21F);
      assertFalse(boolean0);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      float float3 = Float.max(0.0F, 3352.574F);
      assertEquals(3352.574F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      wall0.setHeight(float0);
      assertNotEquals((float)float0, (float)float3, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(521.36F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(521.36F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      float float4 = wall0.getLeftSideShininess();
      assertEquals(186.39322F, float4, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(521.36F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(521.36F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals(1389.6826F, float5, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(2361.3535F, wall0.getYEnd(), 0.01F);
      assertEquals(1389.6826F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1987.371F, wall0.getLength(), 0.01F);
      assertEquals(418.0116F, wall0.getYStart(), 0.01F);
      assertEquals(2361.3535F, wall0.getThickness(), 0.01F);
      assertEquals(521.36F, wall0.getHeight(), 0.01F);
      assertEquals(186.39322F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(418.0116F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getThickness();
      assertEquals((-2050.978F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-2050.978F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint((-443.12F), 1.0F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3025.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3025.003F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall1.containsWallStartAt(669.935F, (-1009.0F), (-762.6198F));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float4 = wall2.getLength();
      assertEquals(3025.003F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2140.8103F, wall0.getLength(), 0.01F);
      assertEquals((-2094.989F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2140.8103F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3025.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(3025.003F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, 1.0F, (-2424.902F), (-1.0F), 1918.799F, 1918.799F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(1389.07F, (-1402.0F), (-1173.319F), (-1240.179F), (-1173.319F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2567.4934F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1321.0895F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1389.07F, wall2.getXStart(), 0.01F);
      assertEquals(2567.4934F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1402.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1240.179F), wall2.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1173.319F), wall2.getXEnd(), 0.01F);
      assertEquals(107.87549F, wall2.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-4347.4985F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4418.0327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-2173.6992F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4347.4985F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4418.0327F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint(0.1F, (-1.0F), 0.01F);
      assertTrue(boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4418.0327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-2173.6992F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4347.4985F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4418.0327F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2424.902F), wall3.getXEnd(), 0.01F);
      assertEquals((-1212.401F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.799F, wall3.getHeight(), 0.01F);
      assertEquals(1918.799F, wall3.getThickness(), 0.01F);
      assertEquals(2425.003F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(2425.003F, wall3.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
      
      Integer integer0 = wall3.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4418.0327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-2173.6992F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4347.4985F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4418.0327F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2424.902F), wall3.getXEnd(), 0.01F);
      assertEquals((-1212.401F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.799F, wall3.getHeight(), 0.01F);
      assertEquals(1918.799F, wall3.getThickness(), 0.01F);
      assertEquals(2425.003F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(2425.003F, wall3.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall3.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4418.0327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-2173.6992F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4347.4985F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4418.0327F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2424.902F), wall3.getXEnd(), 0.01F);
      assertEquals((-1212.401F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.799F, wall3.getHeight(), 0.01F);
      assertEquals(1918.799F, wall3.getThickness(), 0.01F);
      assertEquals(2425.003F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals(2425.003F, wall3.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
      
      wall1.setRightSideShininess((-4347.4985F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2425.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1918.799F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-4347.4985F), wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1212.401F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1918.799F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2424.902F), wall1.getXEnd(), 0.01F);
      assertEquals(2425.003F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      
      float float4 = wall3.getLength();
      assertEquals(2425.003F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4418.0327F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-2173.6992F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4347.4985F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4418.0327F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals((-2424.902F), wall3.getXEnd(), 0.01F);
      assertEquals((-1212.401F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1918.799F, wall3.getHeight(), 0.01F);
      assertEquals(1918.799F, wall3.getThickness(), 0.01F);
      assertEquals(2425.003F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals((-4347.4985F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(2425.003F, wall3.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall((-1394.9248F), (-1394.9248F), (-0.025641026F), 1479.9231F, (-3363.0F), (-0.025641026F));
      assertNotNull(wall0);
      assertEquals((-0.025641026F), wall0.getHeight(), 0.01F);
      assertEquals(42.499146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-697.4752F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3363.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1394.9248F), wall0.getXStart(), 0.01F);
      assertEquals(1479.9231F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3195.3865F, wall0.getLength(), 0.01F);
      assertEquals(3195.3865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1394.9248F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.025641026F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.025641026F), wall0.getHeight(), 0.01F);
      assertEquals(42.499146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-697.4752F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3363.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1394.9248F), wall0.getXStart(), 0.01F);
      assertEquals(1479.9231F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3195.3865F, wall0.getLength(), 0.01F);
      assertEquals(3195.3865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1394.9248F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.025641026F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1394.9248F), wall1.getXStart(), 0.01F);
      assertEquals((-1394.9248F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-697.4752F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3195.3865F, wall1.getLength(), 0.01F);
      assertEquals((-3363.0F), wall1.getThickness(), 0.01F);
      assertEquals((-0.025641026F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3195.3865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1479.9231F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.025641026F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(42.499146F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.025641026F), wall0.getHeight(), 0.01F);
      assertEquals(42.499146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-697.4752F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3363.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1394.9248F), wall0.getXStart(), 0.01F);
      assertEquals(1479.9231F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3195.3865F, wall0.getLength(), 0.01F);
      assertEquals(3195.3865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1394.9248F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.025641026F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1394.9248F), wall1.getXStart(), 0.01F);
      assertEquals((-1394.9248F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-697.4752F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3195.3865F, wall1.getLength(), 0.01F);
      assertEquals((-3363.0F), wall1.getThickness(), 0.01F);
      assertEquals((-0.025641026F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3195.3865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1479.9231F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.025641026F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(42.499146F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.025641026F), wall0.getHeight(), 0.01F);
      assertEquals(42.499146F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-697.4752F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3363.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1394.9248F), wall0.getXStart(), 0.01F);
      assertEquals(1479.9231F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3195.3865F, wall0.getLength(), 0.01F);
      assertEquals(3195.3865F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1394.9248F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.025641026F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1394.9248F), wall1.getXStart(), 0.01F);
      assertEquals((-1394.9248F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-697.4752F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3195.3865F, wall1.getLength(), 0.01F);
      assertEquals((-3363.0F), wall1.getThickness(), 0.01F);
      assertEquals((-0.025641026F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3195.3865F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1479.9231F, wall1.getYEnd(), 0.01F);
      assertEquals((-0.025641026F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(42.499146F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getThickness();
      assertEquals((-2050.978F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-443.12F), 1.0F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3025.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(3025.003F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall2.getThickness(), 0.01F);
      assertEquals((-1069.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float3 = wall0.getLength();
      assertEquals(2139.0F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float4 = wall1.getXStart();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1.0F), (-1206.2697F), (-1206.2697F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.move((-1.0F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall1.setYStart((-1.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall2.setLeftSideShininess(2554.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2554.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      wall2.setYEnd((-2822.47F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2822.4702F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2822.4702F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1411.235F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2554.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2822.47F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall2.intersectsRectangle(2554.0F, (-1206.2697F), 2554.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2822.4702F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2822.4702F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1411.235F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2554.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals((-2822.47F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      String string0 = "";
      wall0.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      assertNotNull(temporaryURLContent0);
      
      // Undeclared exception!
      try { 
        TemporaryURLContent.copyToTemporaryURLContent(temporaryURLContent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min(94, 1501);
      assertEquals(94, int0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.1F, (-1.0F), 0.1F, (-1.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      
      float float0 = Float.max((-1.0F), 860.1858F);
      assertEquals(860.1858F, float0, 0.01F);
      
      Float float1 = new Float(2712.2695F);
      assertEquals(2712.2695F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite(0.0F);
      assertTrue(boolean0);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(2232.7407F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.20195767F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.7980423F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2712.2695F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      Wall wall2 = new Wall(837.991F, 2838.3057F, 860.1858F, 837.991F, 2838.3057F, (-1.0F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2000.4377F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1838.1483F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(837.991F, wall2.getXStart(), 0.01F);
      assertEquals(2838.3057F, wall2.getYStart(), 0.01F);
      assertEquals(2000.4377F, wall2.getLength(), 0.01F);
      assertEquals(860.1858F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(837.991F, wall2.getYEnd(), 0.01F);
      assertEquals(2838.3057F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals(849.0884F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      
      float float2 = wall0.getYArcCircleCenter();
      assertEquals(0.7980423F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(2232.7407F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.20195767F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.7980423F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2712.2695F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertEquals(2232.7407F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.20195767F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.7980423F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2712.2695F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(2206.1853F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getLength();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2206.1853F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall((-2390.983F), (float) float2, (float) float2, 0.1F, (-1173.319F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-2390.983F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2391.083F, wall2.getLength(), 0.01F);
      assertEquals((-1195.4414F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-2390.983F), wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(2391.083F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertEquals(2391.083F, wall2.getLength(), 0.01F);
      assertEquals((-1195.4414F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-2390.983F), wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(2391.083F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2391.083F, wall2.getLength(), 0.01F);
      assertEquals((-1195.4414F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-2390.983F), wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(2391.083F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall0.containsWallEndAt(0.1F, (-1065.5769F), (-2390.983F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall0.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(2516.8784F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2390.983F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-2390.983F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1173.319F), wall3.getThickness(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals(2516.8784F, wall3.getLength(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertEquals(2516.8784F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals((-1195.4414F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-392.77402F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Wall) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-0.8765584F), (-0.8765584F), (-0.8765584F), (-0.8765584F), (-0.8765584F));
      assertNotNull(wall0);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = new Float((-0.8765584F));
      assertEquals((-0.8765584F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = wall0.getArcExtent();
      assertNull(float1);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setHeightAtEnd((Float) null);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      wall0.setXStart((-4277.4062F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2390.6414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4277.4062F), wall0.getXStart(), 0.01F);
      assertEquals(3773.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(3773.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2390.6414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4277.4062F), wall0.getXStart(), 0.01F);
      assertEquals(3773.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(3773.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2390.6414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4277.4062F), wall0.getXStart(), 0.01F);
      assertEquals(3773.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(3773.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2390.6414F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-4277.4062F), wall0.getXStart(), 0.01F);
      assertEquals(3773.5298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(3773.5298F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall((-0.8765584F), (-0.8765584F), (-0.8765584F), (-0.8765584F), (-0.8765584F));
      assertNotNull(wall0);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("&h", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("&h", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals("&h", propertyChangeListenerProxy0.getPropertyName());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals((-0.8765584F), wall0.getXStart(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.8765584F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.8765584F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-0.8765584F), wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      
      wall0.setRightSideShininess((-536.2838F));
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals((-536.2838F), wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-536.2838F), 1487.7472F, 2206.1853F, 2206.1853F);
      assertTrue(boolean0);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals((-536.2838F), wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 0.0F, 0.0F, 3.6680827F);
      assertNotNull(wall0);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall((-1.404771F), 0.0F, 0, 793.248F, 1.0F, 3.6680827F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(3.6680827F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3.6680827F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(1.8340414F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.2565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(793.2565F, wall1.getLength(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-1.404771F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsPoint(1418.8771F, (-330.4F), 1724.9F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall0.containsWallStartAt(1418.8771F, 1.0F, (-0.5F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean1 == boolean0);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2492F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-0.7023855F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float(185.2);
      assertEquals(185.2F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(73673.086F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertEquals(185.2F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-31.296871F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(793.2492F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(396.67816F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.404771F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 1355.83F, 1355.83F, 1355.83F);
      assertNotNull(wall0);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = new Integer((-1297));
      assertEquals((-1297), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(1.9263249635696411);
      assertEquals(1.926325F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXStart(1355.83F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXStart((-667.6016F));
      assertEquals(2373.801F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(2023.4316F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(344.11417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-667.6016F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(2059.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean0 = wall0.containsPoint(765.1941F, 1418.8771F, 1418.8771F);
      assertTrue(boolean0);
      assertEquals(2373.801F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(2023.4316F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(344.11417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-667.6016F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(2059.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, 1355.83F, (-0.4903898F), (-667.6016F), 3111.3F, 1355.83F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2373.801F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(2023.4316F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(344.11417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-667.6016F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(2059.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall1.containsWallEndAt(3927.0F, (-0.4903898F), 1355.83F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      Level level0 = wall1.getLevel();
      assertNull(level0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2373.801F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(2023.4316F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(344.11417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-667.6016F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(2059.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2373.801F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getHeight(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(2023.4316F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(344.11417F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-667.6016F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYEnd(), 0.01F);
      assertEquals(2059.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2023.4316F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(3111.3F, wall1.getThickness(), 0.01F);
      assertEquals(344.11417F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.2451949F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2023.4316F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-667.6016F), wall1.getYEnd(), 0.01F);
      assertEquals((-0.4903898F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1355.83F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-0.2451949F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(344.11417F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-667.6016F), wall2.getYEnd(), 0.01F);
      assertEquals(3111.3F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2023.4316F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2023.4316F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1355.83F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-0.4903898F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1172.802F), 2522.99F, 0.1F, 2522.99F, (-1172.802F));
      assertNotNull(wall0);
      assertEquals((-1172.802F), wall0.getHeight(), 0.01F);
      assertEquals(1261.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2522.99F, wall0.getThickness(), 0.01F);
      assertEquals((-586.351F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2782.2065F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.802F), wall0.getYStart(), 0.01F);
      assertEquals(2782.2065F, wall0.getLength(), 0.01F);
      assertEquals(2522.99F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(1261.545F, float0, 0.01F);
      assertEquals((-1172.802F), wall0.getHeight(), 0.01F);
      assertEquals(1261.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2522.99F, wall0.getThickness(), 0.01F);
      assertEquals((-586.351F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2782.2065F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.802F), wall0.getYStart(), 0.01F);
      assertEquals(2782.2065F, wall0.getLength(), 0.01F);
      assertEquals(2522.99F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float(0.1F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(0.01F, 0.38600874F, 0.1F, 0.1F, 1300.6101F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.29983497F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.38600874F, wall1.getYStart(), 0.01F);
      assertEquals(0.29983497F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall1.getXStart(), 0.01F);
      assertEquals(0.24300437F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.055F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(1300.6101F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setXStart(0.38600874F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.24300437F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.38600874F, wall1.getYStart(), 0.01F);
      assertEquals(0.40447745F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.40447745F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.24300437F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.38600874F, wall1.getXStart(), 0.01F);
      assertEquals(1300.6101F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1172.802F), wall0.getHeight(), 0.01F);
      assertEquals(1261.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2522.99F, wall0.getThickness(), 0.01F);
      assertEquals((-586.351F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2782.2065F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.802F), wall0.getYStart(), 0.01F);
      assertEquals(2782.2065F, wall0.getLength(), 0.01F);
      assertEquals(2522.99F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.24300437F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.38600874F, wall1.getYStart(), 0.01F);
      assertEquals(0.40447745F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.40447745F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.24300437F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.38600874F, wall1.getXStart(), 0.01F);
      assertEquals(1300.6101F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1172.802F), wall0.getHeight(), 0.01F);
      assertEquals(1261.545F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2522.99F, wall0.getThickness(), 0.01F);
      assertEquals((-586.351F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2782.2065F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1172.802F), wall0.getYStart(), 0.01F);
      assertEquals(2782.2065F, wall0.getLength(), 0.01F);
      assertEquals(2522.99F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.24300437F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.38600874F, wall1.getYStart(), 0.01F);
      assertEquals(0.40447745F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.40447745F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.24300437F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.38600874F, wall1.getXStart(), 0.01F);
      assertEquals(1300.6101F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.24300437F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.38600874F, wall1.getYStart(), 0.01F);
      assertEquals(0.40447745F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.40447745F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.24300437F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.38600874F, wall1.getXStart(), 0.01F);
      assertEquals(1300.6101F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall((-2492.255F), (-2492.255F), (-2492.255F), (-2493.6335F), 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2492.9443F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.3786621F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getYStart(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(1.3786621F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness((-147.0F));
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2492.9443F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.3786621F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getYStart(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(1.3786621F, wall0.getLength(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart((-2493.6335F));
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart(0.0F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1246.8168F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness(0.1F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 0.68763864F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.68763864F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.68763864F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.68763864F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2221.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.removePropertyChangeListener((PropertyChangeListener) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.68763864F, wall0.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.68763864F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2221.0F, wall1.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.68763864F, wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 318.124F, 0.1F, 0.1F, 0.1F, (-2444.4512F));
      assertNotNull(wall0);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.offerLast(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = linkedList0.add(wall0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean1 == boolean0);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(2, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      wall0.setThickness(815.0F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      wall0.setXEnd(815.0F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = new Wall((-16.0F), (-3448.9773F), (-1241.1803F), (-3448.9773F), (-795.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1241.1803F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1225.1803F, wall1.getLength(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYStart(), 0.01F);
      assertEquals((-16.0F), wall1.getXStart(), 0.01F);
      assertEquals((-628.59015F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYEnd(), 0.01F);
      assertEquals(1225.1803F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-795.0F), wall1.getThickness(), 0.01F);
      
      float float0 = wall1.getLeftSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1241.1803F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1225.1803F, wall1.getLength(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYStart(), 0.01F);
      assertEquals((-16.0F), wall1.getXStart(), 0.01F);
      assertEquals((-628.59015F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3448.9773F), wall1.getYEnd(), 0.01F);
      assertEquals(1225.1803F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-795.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      
      float float1 = wall0.getLength();
      assertEquals(873.9195F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
      
      boolean boolean2 = wall0.isAtLevel((Level) null);
      assertTrue(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.59040546F, 0.59040546F, 0.59040546F, (-785.648F), 0.59040546F, 0.59040546F);
      assertNotNull(wall0);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((double) (-563.1505F));
      assertEquals((-563.1505F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess(0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertEquals((-563.1505F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(786.2384F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      Float float2 = new Float((double) (-785.648F));
      assertEquals((-785.648F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      wall0.setArcExtent(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3129.904F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2478783.2F, wall0.getLength(), 0.01F);
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals((-563.1505F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-392.5288F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3129.904F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.01F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2478783.2F, wall0.getLength(), 0.01F);
      assertEquals(786.2384F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(3152, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("t{x>#", "HEIGHT", 2, "HEIGHT", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertEquals("HEIGHT", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("HEIGHT", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("HEIGHT", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertEquals("t{x>#", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("HEIGHT:2", uRL0.getAuthority());
      assertNull(uRL0.toString());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("HEIGHT", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("HEIGHT", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("HEIGHT", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertEquals("t{x>#", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("HEIGHT:2", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("t{x>#", "HEIGHT", uRLContent0, (-503.8764F), (-503.8764F), "t{x>#", false);
      assertNotNull(catalogTexture0);
      assertEquals("HEIGHT", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("HEIGHT", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("HEIGHT", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertEquals("t{x>#", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("HEIGHT:2", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-503.8764F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("HEIGHT", catalogTexture0.getName());
      assertEquals("t{x>#", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("t{x>#", catalogTexture0.getId());
      assertEquals((-503.8764F), catalogTexture0.getHeight(), 0.01F);
      
      wall0.setPattern(catalogTexture0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals("HEIGHT", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals("HEIGHT", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("HEIGHT", uRL0.getPath());
      assertEquals(2, uRL0.getPort());
      assertEquals("t{x>#", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("HEIGHT:2", uRL0.getAuthority());
      assertNull(uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-503.8764F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("HEIGHT", catalogTexture0.getName());
      assertEquals("t{x>#", catalogTexture0.getCreator());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("t{x>#", catalogTexture0.getId());
      assertEquals((-503.8764F), catalogTexture0.getHeight(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((-503.8764F));
      assertEquals((-503.8764F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getArcExtent(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getArcExtent(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 318.124F, 0.1F, 0.1F, 0.1F, (-2444.4512F));
      assertNotNull(wall0);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(3.668F, 3.668F, 0.0F, 0.0F, (-144.20166F), (-3155.031F));
      assertNotNull(wall0);
      assertEquals((-3155.031F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.1873355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.834F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.1873355F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.834F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.20166F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-3155.031F));
      assertEquals((-3155.031F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-3155.031F), wall0.getHeight(), 0.01F);
      assertEquals((-3155.031F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.1873355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(19377.06F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.1025348F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.770535F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.20166F), wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-3155.031F), wall0.getHeight(), 0.01F);
      assertEquals((-3155.031F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5.1873355F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(19377.06F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2.1025348F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5.770535F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-144.20166F), wall0.getThickness(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, (-6.8342795F), (-6.8342795F), 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2227.8342F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2227.8342F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall((-355.0F), 1.0F, 1522.0F, (-6.8342795F), 1639.0577F, (-355.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1877.0164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.9171398F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(583.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-355.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-355.0F), wall1.getXStart(), 0.01F);
      assertEquals(1522.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1877.0164F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-6.8342795F), wall1.getYEnd(), 0.01F);
      assertEquals(1639.0577F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2227.8342F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2227.8342F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1877.0164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.9171398F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(583.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-355.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-355.0F), wall1.getXStart(), 0.01F);
      assertEquals(1522.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1877.0164F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-6.8342795F), wall1.getYEnd(), 0.01F);
      assertEquals(1639.0577F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2.9171398F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-355.0F), wall1.getHeight(), 0.01F);
      assertEquals(1523.0201F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(760.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1522.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-6.8342795F), wall1.getYEnd(), 0.01F);
      assertEquals(1639.0577F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1523.0201F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1639.0577F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1639.0577F, wall0.getXStart(), 0.01F);
      assertEquals(2302.586F, wall0.getLength(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2302.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1930.0288F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsPoint(1639.0577F, (-355.0F), 1418.8771F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1639.0577F, wall0.getXStart(), 0.01F);
      assertEquals(2302.586F, wall0.getLength(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2302.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1930.0288F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1639.0577F, wall0.getXStart(), 0.01F);
      assertEquals(2302.586F, wall0.getLength(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2302.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1930.0288F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2.9171398F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-355.0F), wall1.getHeight(), 0.01F);
      assertEquals(1523.0201F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(760.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1522.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-6.8342795F), wall1.getYEnd(), 0.01F);
      assertEquals(1639.0577F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1523.0201F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1639.0577F, wall0.getXStart(), 0.01F);
      assertEquals(2302.586F, wall0.getLength(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2302.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1930.0288F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall1.containsWallEndAt(1840.8405F, (-1.0F), 257.4394F);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2.9171398F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-355.0F), wall1.getHeight(), 0.01F);
      assertEquals(1523.0201F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(760.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals(1522.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-6.8342795F), wall1.getYEnd(), 0.01F);
      assertEquals(1639.0577F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1523.0201F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-6.8342795F), wall0.getThickness(), 0.01F);
      assertEquals(1107.0829F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1639.0577F, wall0.getXStart(), 0.01F);
      assertEquals(2302.586F, wall0.getLength(), 0.01F);
      assertEquals((-6.8342795F), wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2302.586F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1930.0288F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((-534.2045360391337));
      assertEquals((-534.2045F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-534.2045F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(7.963936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-6.963936F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5651.487F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(756.2498F, 2, 597.7F, 0.0F, 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(158.56242F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(756.2498F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(597.7F, wall1.getXEnd(), 0.01F);
      assertEquals(158.56242F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(676.9749F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-534.2045F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(7.963936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-6.963936F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5651.487F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(7.963936F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-6.963936F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall2.getLeftSideColor());
      assertEquals((-534.2045F), wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(5651.487F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-534.2045F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(7.963936F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-6.963936F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5651.487F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(156, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(756.2498F, 2, 597.7F, 1.0F, 0.01F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(676.9749F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(158.55296F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(756.2498F, wall0.getXStart(), 0.01F);
      assertEquals(597.7F, wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(158.55296F, wall0.getLength(), 0.01F);
      
      wall0.setXEnd(3423.8F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3423.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2667.5505F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(756.2498F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2090.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2667.5505F, wall0.getLength(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 597.7F, 1942.0F, false);
      assertNotNull(catalogTexture0);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1942.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(597.7F, catalogTexture0.getWidth(), 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1942.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(597.7F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(597.7F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1942.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      
      wall0.setRightSideTexture(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3423.8F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2667.5505F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall0.getThickness(), 0.01F);
      assertEquals(756.2498F, wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(2090.025F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(2667.5505F, wall0.getLength(), 0.01F);
      assertEquals("", catalogTexture0.getName());
      assertEquals(1942.0F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(597.7F, catalogTexture0.getWidth(), 0.01F);
      assertEquals(597.7F, homeTexture0.getWidth(), 0.01F);
      assertEquals(1942.0F, homeTexture0.getHeight(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall((-1306.1F), 2352.0F, (-1502.2F), (-1502.2F), 0.0F, (-1502.2F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(424.90002F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3859.1855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3859.1855F, wall1.getLength(), 0.01F);
      assertEquals((-1404.1499F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1502.2F), wall1.getYEnd(), 0.01F);
      assertEquals(2352.0F, wall1.getYStart(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall1.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(424.90002F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3859.1855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3859.1855F, wall1.getLength(), 0.01F);
      assertEquals((-1404.1499F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1502.2F), wall1.getYEnd(), 0.01F);
      assertEquals(2352.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2493.6335F, wall2.getLength(), 0.01F);
      assertEquals((-1246.8168F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2493.6335F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2493.6335F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Integer integer0 = wall2.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(2493.6335F, wall2.getLength(), 0.01F);
      assertEquals((-1246.8168F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2493.6335F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals((-2493.6335F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float2 = wall1.getLength();
      assertEquals(3859.1855F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(424.90002F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3859.1855F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(3859.1855F, wall1.getLength(), 0.01F);
      assertEquals((-1404.1499F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1502.2F), wall1.getXEnd(), 0.01F);
      assertEquals((-1502.2F), wall1.getYEnd(), 0.01F);
      assertEquals(2352.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall(22.713877F, 22.713877F, 22.713877F, 22.713877F, 22.713877F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getYStart(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((double) 22.713877F);
      assertEquals(22.713877F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getYStart(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getYStart(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYEnd(), 0.01F);
      assertEquals(22.713877F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F, 3.6680827F);
      assertNotNull(wall0);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(" doesn't contain texture ", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals(" doesn't contain texture ", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals(" doesn't contain texture ", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      
      Level level0 = new Level("", 5, (-2915.7F), (-446.06744F));
      assertNotNull(level0);
      assertEquals((-446.06744F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2915.7F), level0.getFloorThickness(), 0.01F);
      assertEquals(5.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals(" doesn't contain texture ", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      assertEquals((-446.06744F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-2915.7F), level0.getFloorThickness(), 0.01F);
      assertEquals(5.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      
      boolean boolean0 = wall0.containsPoint((-2915.7F), 0, 3.6680827F);
      assertFalse(boolean0);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals(3.6680827F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3.6680827F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.6680827F, wall0.getXEnd(), 0.01F);
      
      Random.setNextRandom(5);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall((-2492.255F), (-2492.255F), (-2492.255F), (-2493.6335F), 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals((-2492.9443F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.3786621F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals((-2492.255F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(1.3786621F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness((-147.0F));
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals((-2492.9443F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.3786621F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals((-2492.255F), wall0.getYStart(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertEquals(1.3786621F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart((-2493.6335F));
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2493.6335F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2493.6335F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYStart(0.0F);
      assertEquals((-2493.6335F), wall0.getYEnd(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1246.8168F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertEquals((-147.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setThickness((-937.0F));
      assertEquals((-937.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setXEnd((-2492.255F));
      assertEquals((-937.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals((-937.0F), wall0.getThickness(), 0.01F);
      assertEquals((-2492.255F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2492.255F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2492.255F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-785.648F), (-785.648F), 0.0F, 3161.052F, (-2220.826F), 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4024.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals(4024.1377F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertEquals((-392.824F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = new Float(1700.6514F);
      assertEquals(1700.6514F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-392.824F), float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4024.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals(4024.1377F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertEquals((-392.824F), wall0.getXArcCircleCenter(), 0.01F);
      
      Float float2 = new Float(1766.0F);
      assertEquals(1766.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(1700.6514F, (-1219.0F), 3071.74F, (-4138.5F), (-3565.34F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4024.1377F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals(4024.1377F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertEquals((-392.824F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-4138.5F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4138.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals((-2069.25F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4138.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals((-2069.25F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-3565.34F), wall2.getThickness(), 0.01F);
      assertEquals((-2678.75F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2386.1958F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1700.6514F, wall2.getXStart(), 0.01F);
      assertEquals(3225.4246F, wall2.getLength(), 0.01F);
      assertEquals((-1219.0F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-4138.5F), wall2.getYEnd(), 0.01F);
      assertEquals(3071.74F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3225.4246F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall1.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1187.702F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(5718.708F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(3161.052F, wall3.getYEnd(), 0.01F);
      assertEquals((-2069.25F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-4138.5F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(5718.708F, wall3.getLength(), 0.01F);
      assertEquals((-785.648F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall1.setWallAtStart(wall3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-2678.75F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3225.4246F, wall1.getLength(), 0.01F);
      assertEquals(3071.74F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-4138.5F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1700.6514F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3225.4246F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1219.0F), wall1.getYStart(), 0.01F);
      assertEquals(2386.1958F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3565.34F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1187.702F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(5718.708F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(3161.052F, wall3.getYEnd(), 0.01F);
      assertEquals((-2069.25F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-4138.5F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(5718.708F, wall3.getLength(), 0.01F);
      assertEquals((-785.648F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-4138.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3161.052F, wall0.getYEnd(), 0.01F);
      assertEquals((-2069.25F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1187.702F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5718.708F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2220.826F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall(3.668F, 3.668F, 3.668F, 3.668F, 3.668F, 3.668F);
      assertNotNull(wall0);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float(3.668F);
      assertEquals(3.668F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer0 = Integer.valueOf(69);
      assertEquals(69, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertEquals(69, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals(69, (int)integer1);
      assertNotNull(integer1);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertEquals(69, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideColor(integer1);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertEquals(69, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(69, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertEquals(69, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(3.668F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3.668F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals(69, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3.668F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getXStart(), 0.01F);
      assertEquals(69, (int)wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.668F, wall0.getYEnd(), 0.01F);
      assertEquals(3.668F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3.668F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall((-572.6651F), (-1798.0F), 505.479F, (-1798.0F), (-1173.319F), (-1173.319F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(505.479F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-33.59305F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1078.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1798.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1078.144F, wall0.getLength(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-572.6651F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(505.479F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-33.59305F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1078.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1798.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1078.144F, wall0.getLength(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-572.6651F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float1 = new Float((-785.648F));
      assertEquals((-785.648F), (float)float1, 0.01F);
      assertNotNull(float1);
      
      float float2 = (-2390.983F);
      Wall wall1 = new Wall((-1190.3109F), (-2390.983F), 1055.292F, (-1074.9955F), (-1074.9955F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2602.7976F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-67.50946F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2602.7976F, wall1.getLength(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1190.3109F), wall1.getXStart(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(505.479F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-33.59305F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1078.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1798.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1078.144F, wall0.getLength(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-572.6651F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2602.7976F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-67.50946F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2602.7976F, wall1.getLength(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1190.3109F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(505.479F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-33.59305F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1078.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1798.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1078.144F, wall0.getLength(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-572.6651F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2602.7976F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-67.50946F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2602.7976F, wall1.getLength(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1190.3109F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.035672683F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(505.44333F, wall0.getLength(), 0.01F);
      assertEquals(252.75734F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(505.44333F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(505.479F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.035672683F, wall0.getXStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1798.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.8503F, wall1.getLength(), 0.01F);
      assertEquals(527.646F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1686.8503F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.8503F, wall1.getLength(), 0.01F);
      assertEquals(527.646F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1686.8503F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(505.44333F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(505.479F, wall2.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall2.getHeight(), 0.01F);
      assertEquals(252.75734F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(505.44333F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.035672683F, wall2.getXStart(), 0.01F);
      assertEquals((-1798.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1798.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      boolean boolean0 = wall2.containsPoint((-1173.319F), 0.0F, (-572.6651F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.8503F, wall1.getLength(), 0.01F);
      assertEquals(527.646F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1686.8503F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(505.44333F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(505.479F, wall2.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall2.getHeight(), 0.01F);
      assertEquals(252.75734F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(505.44333F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.035672683F, wall2.getXStart(), 0.01F);
      assertEquals((-1798.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1798.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Wall wall3 = new Wall((-200.6F), (-572.6651F), 0.035672683F, (-785.648F), 505.479F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNull(wall3.getLeftSideColor());
      assertEquals(292.60278F, wall3.getLength(), 0.01F);
      assertEquals(0.035672683F, wall3.getXEnd(), 0.01F);
      assertEquals((-679.15656F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeight());
      assertEquals(292.60278F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-100.282166F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-200.6F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(505.479F, wall3.getThickness(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-572.6651F), wall3.getYStart(), 0.01F);
      
      Wall wall4 = wall1.clone();
      assertNotNull(wall4);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.8503F, wall1.getLength(), 0.01F);
      assertEquals(527.646F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1686.8503F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(1055.292F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(1686.8503F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1732.9893F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(527.646F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals((-2390.983F), wall4.getYStart(), 0.01F);
      assertEquals((-1074.9955F), wall4.getYEnd(), 0.01F);
      assertEquals((-1074.9955F), wall4.getThickness(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getLeftSideColor());
      assertEquals(1686.8503F, wall4.getLength(), 0.01F);
      assertEquals(0.0F, wall4.getXStart(), 0.01F);
      assertNull(wall4.getHeight());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      
      float[][] floatArray0 = wall3.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall3.equals((Object)wall4));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertNull(wall3.getLeftSideColor());
      assertEquals(292.60278F, wall3.getLength(), 0.01F);
      assertEquals(0.035672683F, wall3.getXEnd(), 0.01F);
      assertEquals((-679.15656F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getHeight());
      assertEquals(292.60278F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-100.282166F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-200.6F), wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(505.479F, wall3.getThickness(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-572.6651F), wall3.getYStart(), 0.01F);
      assertNotSame(wall3, wall4);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertEquals(4, floatArray0.length);
      
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      
      URL uRL1 = MockURL.URL(uRL0, "3dN>Q");
      assertNotNull(uRL1);
      assertFalse(uRL1.equals((Object)uRL0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, false);
      assertNotNull(resourceURLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("3dN>Q", resourceURLContent0, 709.45404F, (-785.648F), false);
      assertNotNull(catalogTexture0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("3dN>Q", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(709.45404F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-785.648F), catalogTexture0.getHeight(), 0.01F);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("3dN>Q", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(709.45404F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-785.648F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(709.45404F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-785.648F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("3dN>Q", homeTexture0.getName());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      
      wall2.setLeftSideTexture(homeTexture0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("3dN>Q", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(709.45404F, catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-785.648F), catalogTexture0.getHeight(), 0.01F);
      assertEquals(709.45404F, homeTexture0.getWidth(), 0.01F);
      assertEquals((-785.648F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("3dN>Q", homeTexture0.getName());
      assertEquals((-1074.9955F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1686.8503F, wall1.getLength(), 0.01F);
      assertEquals(527.646F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1074.9955F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1055.292F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1686.8503F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1732.9893F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2390.983F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(505.44333F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(505.479F, wall2.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall2.getHeight(), 0.01F);
      assertEquals(252.75734F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(505.44333F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.035672683F, wall2.getXStart(), 0.01F);
      assertEquals((-1798.0F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1798.0F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1798.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/3dN>Q", uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("ftp", uRL1.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      
      try { 
        Integer.decode("");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // Zero length string
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(882.8F, 882.8F, 882.8F, 882.8F, 882.8F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(882.8F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(882.8F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(882.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(882.8F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(882.8F, wall0.getYEnd(), 0.01F);
      assertEquals(882.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(882.8F, wall0.getYStart(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(882.8F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(882.8F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(882.8F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(882.8F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(882.8F, wall0.getYEnd(), 0.01F);
      assertEquals(882.8F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(882.8F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-2050.978F), (-2050.978F), (-2139.0F), (-2050.978F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2050.978F), wall0.getXEnd(), 0.01F);
      assertEquals(2052.866F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2050.978F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2094.989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2052.866F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1025.489F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-2139.0F), 0.0F, (-2139.0F), 0.1F, (-2139.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = wall1.getThickness();
      assertEquals((-2139.0F), float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float1, float0, 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2050.978F), wall0.getXEnd(), 0.01F);
      assertEquals(2052.866F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2050.978F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2094.989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2052.866F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1025.489F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = new Integer(1);
      assertEquals(1, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer(1);
      assertEquals(1, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setRightSideColor(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2050.978F), wall0.getXEnd(), 0.01F);
      assertEquals(2052.866F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2050.978F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1, (int)wall0.getRightSideColor());
      assertEquals((-2094.989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2052.866F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1025.489F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(2184.0908F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4235.9834F, wall0.getLength(), 0.01F);
      assertEquals(2184.0908F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2050.978F), wall0.getXEnd(), 0.01F);
      assertEquals(66.5564F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(4235.9834F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2050.978F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1, (int)wall0.getRightSideColor());
      assertEquals((-2094.989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.98566F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.324F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(876.98566F, wall1.getLength(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-2368.0918F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-785.648F), (-785.648F), 1.0F);
      assertTrue(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Float float4 = wall2.getArcExtent();
      assertNull(float4);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setRightSideShininess((-1173.319F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1173.319F), wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      boolean boolean1 = wall2.containsWallStartAt((-235.235F), (-944.0F), (-2329.0F));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1173.319F), wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Wall wall3 = wall0.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(785.748F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertEquals(785.748F, wall3.getLength(), 0.01F);
      assertEquals((-392.77402F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      
      float float5 = wall3.getLength();
      assertEquals(785.748F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.1F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(785.748F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertEquals(785.748F, wall3.getLength(), 0.01F);
      assertEquals((-392.77402F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall((-349.7F), 1240.0F, (-349.7F), 1240.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(1240.0F, (-1.0F), 390.098F, 3861.8828F, (-349.7F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall1.getLength(), 0.01F);
      assertEquals((-349.7F), wall1.getThickness(), 0.01F);
      assertEquals(1240.0F, wall1.getXStart(), 0.01F);
      assertEquals(390.098F, wall1.getXEnd(), 0.01F);
      assertEquals(3955.2747F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1930.4414F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(815.049F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3861.8828F, wall1.getYEnd(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall1.getLength(), 0.01F);
      assertEquals((-349.7F), wall1.getThickness(), 0.01F);
      assertEquals(1240.0F, wall1.getXStart(), 0.01F);
      assertEquals(390.098F, wall1.getXEnd(), 0.01F);
      assertEquals(3955.2747F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1930.4414F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(815.049F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3861.8828F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3955.2747F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(815.049F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1930.4414F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3861.8828F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-349.7F), wall2.getThickness(), 0.01F);
      assertEquals(1240.0F, wall2.getXStart(), 0.01F);
      assertEquals(390.098F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Wall wall3 = wall2.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3955.2747F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(815.049F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1930.4414F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3861.8828F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-349.7F), wall2.getThickness(), 0.01F);
      assertEquals(1240.0F, wall2.getXStart(), 0.01F);
      assertEquals(390.098F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall2.getLength(), 0.01F);
      assertEquals(3955.2747F, wall3.getLength(), 0.01F);
      assertEquals((-349.7F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1240.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(815.049F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(3861.8828F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(390.098F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1930.4414F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(3955.2747F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      float[][] floatArray0 = wall3.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3955.2747F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(815.049F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1930.4414F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3861.8828F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-349.7F), wall2.getThickness(), 0.01F);
      assertEquals(1240.0F, wall2.getXStart(), 0.01F);
      assertEquals(390.098F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall2.getLength(), 0.01F);
      assertEquals(3955.2747F, wall3.getLength(), 0.01F);
      assertEquals((-349.7F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1240.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(815.049F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(3861.8828F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(390.098F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1930.4414F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(3955.2747F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall2.getRightSideShininess();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(3955.2747F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(815.049F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1930.4414F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(3861.8828F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-349.7F), wall2.getThickness(), 0.01F);
      assertEquals(1240.0F, wall2.getXStart(), 0.01F);
      assertEquals(390.098F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(3955.2747F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1240.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1240.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-349.7F), wall0.getXStart(), 0.01F);
      assertEquals(1240.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-349.7F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("uyh`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.uyh`
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 1355.83F, (-1306.1F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer((-1297));
      assertEquals((-1297), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-1297));
      assertEquals((-1297), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1297), (int)wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float(1.9263249635696411);
      assertEquals(1.926325F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1590.6001F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1297), (int)wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(1827.2539F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setArcExtent(float0);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1590.6001F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1297), (int)wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(1827.2539F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-2840.0F), 2623.67F, (-2186.1636F), (-2840.0F), (-1297));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-108.16504F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2840.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(5502.6533F, wall1.getLength(), 0.01F);
      assertEquals((-2840.0F), wall1.getXStart(), 0.01F);
      assertEquals(5502.6533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2513.0818F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2623.67F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2186.1636F), wall1.getXEnd(), 0.01F);
      assertEquals((-1297.0F), wall1.getThickness(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1590.6001F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(1355.83F, wall0.getThickness(), 0.01F);
      assertEquals((-1297), (int)wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.926325F, wall0.getArcExtent(), 0.01F);
      assertEquals(1827.2539F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(1355.83F, wall2.getXEnd(), 0.01F);
      assertEquals(1355.83F, wall2.getYStart(), 0.01F);
      assertEquals(1355.83F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1590.6001F, wall2.getLength(), 0.01F);
      assertEquals(1.926325F, wall2.getArcExtent(), 0.01F);
      assertEquals(1355.83F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1827.2539F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(677.915F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1355.83F, wall2.getXStart(), 0.01F);
      assertEquals((-1297), (int)wall2.getLeftSideColor());
      assertEquals((-1306.1F), wall2.getHeight(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-108.16504F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2840.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(5502.6533F, wall1.getLength(), 0.01F);
      assertEquals((-2840.0F), wall1.getXStart(), 0.01F);
      assertEquals(5502.6533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2513.0818F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2623.67F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2186.1636F), wall1.getXEnd(), 0.01F);
      assertEquals((-1297.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertEquals(4, floatArray0.length);
      
      float float1 = wall1.getLength();
      assertEquals(5502.6533F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-108.16504F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2840.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(5502.6533F, wall1.getLength(), 0.01F);
      assertEquals((-2840.0F), wall1.getXStart(), 0.01F);
      assertEquals(5502.6533F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2513.0818F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2623.67F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2186.1636F), wall1.getXEnd(), 0.01F);
      assertEquals((-1297.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      
      wall0.setPattern((TextureImage) null);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.intersectsRectangle((-536.2838F), 1487.7472F, 2206.1853F, 2206.1853F);
      assertTrue(boolean0);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level("Y_START", (-14.195F), 2206.1853F, (-5732.328F));
      assertNotNull(level0);
      assertEquals("Y_START", level0.getName());
      assertEquals(2206.1853F, level0.getFloorThickness(), 0.01F);
      assertEquals((-14.195F), level0.getElevation(), 0.01F);
      assertEquals((-5732.328F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      wall0.setLevel(level0);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals("Y_START", level0.getName());
      assertEquals(2206.1853F, level0.getFloorThickness(), 0.01F);
      assertEquals((-14.195F), level0.getElevation(), 0.01F);
      assertEquals((-5732.328F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      wall0.setHeight((Float) null);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), 584.812F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(2.0F, (-1.0F), 584.812F, (-1401.8195F), (-1401.8195F), (-1.07219F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1517.2228F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.07219F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(584.812F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(1517.2228F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(293.406F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-701.4097F), wall1.getYArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1517.2228F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.07219F), wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(584.812F, wall1.getXEnd(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals(1517.2228F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(293.406F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals((-701.4097F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(584.812F, wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getXStart(), 0.01F);
      assertEquals(1517.2228F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1517.2228F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1.07219F), wall2.getHeight(), 0.01F);
      assertEquals((-1401.8195F), wall2.getThickness(), 0.01F);
      assertEquals(293.406F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1401.8195F), wall2.getYEnd(), 0.01F);
      assertEquals((-701.4097F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(58, floatArray0.length);
      
      Wall wall3 = wall0.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall3.getYStart(), 0.01F);
      assertEquals(584.812F, wall3.getHeight(), 0.01F);
      assertEquals((-704.15546F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(1460.9387F, wall3.getLength(), 0.01F);
      assertEquals(1400.8226F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals((-1.0F), wall3.getArcExtent(), 0.01F);
      assertEquals((-1401.8195F), wall3.getXStart(), 0.01F);
      assertEquals((-1401.8195F), wall3.getThickness(), 0.01F);
      assertEquals((-1281.5914F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-1367.0F), (-1367.0F), 0.0F, 0, 0.0F, (-1173.319F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getLength();
      assertEquals(785.748F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall(0.59040546F, 0.59040546F, 0.59040546F, 0.59040546F, 0.59040546F, 0.59040546F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYArcCircleCenter(), 0.01F);
      
      Level level0 = new Level("", (-209.03023F), 0.59040546F, (-563.1505F));
      assertNotNull(level0);
      assertEquals(0.59040546F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-563.1505F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-209.03023F), level0.getElevation(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-563.1505F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-209.03023F), level0.getElevation(), 0.01F);
      
      Level level1 = new Level("", 1.0F, 0.32454363F, 3441.1F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals("", level1.getName());
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals(3441.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.32454363F, level1.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(boolean0);
      assertFalse(level1.equals((Object)level0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals(3441.1F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(0.32454363F, level1.getFloorThickness(), 0.01F);
      assertNotSame(level1, level0);
      
      boolean boolean1 = wall0.isAtLevel(level0);
      assertTrue(boolean1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.59040546F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.59040546F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getYStart(), 0.01F);
      assertEquals(0.59040546F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.59040546F, wall0.getXEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYEnd(), 0.01F);
      assertEquals(0.59040546F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-563.1505F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-209.03023F), level0.getElevation(), 0.01F);
      assertNotSame(level0, level1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float((-534.0));
      assertEquals((-534.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(10676.123F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(14.628158F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-534.0F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-13.628158F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(756.2498F, 2, 597.7F, 0.0F, 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(158.56242F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(676.9749F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(756.2498F, wall1.getXStart(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(158.56242F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(597.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(10676.123F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(14.628158F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-534.0F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-13.628158F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2, (int)wall2.getLeftSideColor());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(14.628158F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(10676.123F, wall2.getLength(), 0.01F);
      assertEquals((-13.628158F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-534.0F), wall2.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(10676.123F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(14.628158F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-534.0F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-13.628158F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(212, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      float float0 = 2.0F;
      Wall wall0 = new Wall((-2187.0F), 2.0F, (-1028.214F), 2.0F, 2.0F, (-2187.0F));
      assertNotNull(wall0);
      assertEquals(1158.786F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1607.6069F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1028.214F), wall0.getXEnd(), 0.01F);
      assertEquals(1158.786F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2187.0F), wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2187.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Wall wall1 = wall0.getWallAtStart();
      assertNull(wall1);
      assertEquals(1158.786F, wall0.getLength(), 0.01F);
      assertEquals(2.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1607.6069F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1028.214F), wall0.getXEnd(), 0.01F);
      assertEquals(1158.786F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2187.0F), wall0.getXStart(), 0.01F);
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2187.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      String string0 = "G";
      String string1 = "";
      Class<Integer> class0 = Integer.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "G", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource G
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), 584.812F);
      assertNotNull(wall0);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(0.5F, float1, 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 643.77936F, (-1.0F), (-1957.0F), (-2226.0F), (-2226.0F));
      assertNotNull(wall0);
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getThickness();
      assertEquals((-2226.0F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setThickness(2838.3057F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals((-0.5F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float2 = new Float((-2226.0F));
      assertEquals((-2226.0F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2600.7795F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2600.7795F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setXStart((-67.807F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean0 = wall1.containsPoint(2838.3057F, (-1.0F), (-2050.978F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(2601.6372F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1957.0F), wall3.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2601.6372F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-34.4035F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-67.807F), wall3.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float3 = wall2.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall1.setRightSideShininess(0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      float float4 = wall1.getLength();
      assertEquals(2600.7795F, float4, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2600.7795F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-656.61035F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.01F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2226.0F), wall1.getHeight(), 0.01F);
      assertEquals(643.77936F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2600.7795F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2838.3057F, wall1.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Integer integer1 = wall3.getRightSideColor();
      assertNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(2601.6372F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-1957.0F), wall3.getYEnd(), 0.01F);
      assertEquals((-656.61035F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall3.getThickness(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(2601.6372F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(643.77936F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals((-34.4035F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-2226.0F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-67.807F), wall3.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      
      float float5 = wall2.getXArcCircleCenter();
      assertEquals((-0.5F), float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float5, float2, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float0, 0.01F);
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(643.77936F, wall2.getYStart(), 0.01F);
      assertEquals(2600.7795F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-2226.0F), wall2.getHeight(), 0.01F);
      assertEquals((-656.61035F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2600.7795F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1957.0F), wall2.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2226.0F), wall2.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float float6 = wall0.getYEnd();
      assertEquals((-1957.0F), float6, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float6, float4, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertEquals((-2226.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-34.4035F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(643.77936F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2226.0F), wall0.getThickness(), 0.01F);
      assertEquals((-1957.0F), wall0.getYEnd(), 0.01F);
      assertEquals(2601.6372F, wall0.getLength(), 0.01F);
      assertEquals(2601.6372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-656.61035F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-67.807F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertSame(wall0, wall3);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 711.195F, (-546.1087F), 937.3263F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.1677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.1677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-273.00436F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(1821.3491F, 1.0F, 1.0F, 0.0F, 0, 0.1F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(911.17456F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1821.3491F, wall1.getXStart(), 0.01F);
      assertEquals(1820.3494F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1820.3494F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.1677F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.1677F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-273.00436F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(911.17456F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1821.3491F, wall1.getXStart(), 0.01F);
      assertEquals(1820.3494F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1820.3494F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.9994F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.9994F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-272.55435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.9994F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.9994F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-272.55435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.9994F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.9994F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-272.55435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(591.9994F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(591.9994F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(937.3263F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(824.2606F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-272.55435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(711.195F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-546.1087F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(2206.1853F, 378.18F, (-513.7F), 378.18F, 0.70455056F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(378.18F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2719.8853F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(378.18F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(378.18F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-513.7F), wall2.getXEnd(), 0.01F);
      assertEquals(846.2427F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2719.8853F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.70455056F, wall2.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall2.getXStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.move((-3015.4F), 921.93F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3529.0999F), wall2.getXEnd(), 0.01F);
      assertEquals(2719.8853F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1300.11F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1300.11F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-809.2146F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2719.8853F, wall2.getLength(), 0.01F);
      assertEquals((-2169.1572F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1300.11F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.70455056F, wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall2.containsPoint(0.70455056F, (-513.7F), (-1605.0F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-3529.0999F), wall2.getXEnd(), 0.01F);
      assertEquals(2719.8853F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(1300.11F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1300.11F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-809.2146F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2719.8853F, wall2.getLength(), 0.01F);
      assertEquals((-2169.1572F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1300.11F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.70455056F, wall2.getThickness(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(846.2427F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-513.7F), wall1.getXEnd(), 0.01F);
      assertEquals(378.18F, wall1.getYStart(), 0.01F);
      assertEquals(2719.8853F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2719.8853F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(378.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(378.18F, wall1.getYEnd(), 0.01F);
      assertEquals(0.70455056F, wall1.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall((-1367.0F), (-1367.0F), 0.0F, 0, 0.0F, (-1173.319F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall1.setHeightAtEnd((Float) null);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-683.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1367.0F), wall1.getXStart(), 0.01F);
      assertEquals(1933.23F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getHeight(), 0.01F);
      assertEquals(1933.23F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-683.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1367.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      
      float float1 = wall0.getLength();
      assertEquals(785.748F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float(2171.7);
      assertEquals(2171.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-474.2286F));
      assertEquals((-474.2286F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtStart(wall0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      wall1.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      wall1.setYEnd((-2837.3057F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.0F, 1.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall1.containsPoint(1.0F, 0.01F, 0.0F);
      assertTrue(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float2 = wall1.getArcExtent();
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      boolean boolean2 = wall0.containsWallStartAt(0.0F, 53.0582F, 760.3499F);
      assertTrue(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      
      wall1.move(760.3499F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(760.3499F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertEquals(761.3499F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(760.8499F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall((-2413.5793F), (-2413.5793F), (-2413.5793F), (-2413.5793F), (-2413.5793F));
      assertNotNull(wall0);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2413.5793F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float(1.0E-10);
      assertEquals(1.0E-10F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2413.5793F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsWallStartAt((-519.3F), (-519.3F), (-3598.8462F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float(3015.8);
      assertEquals(3015.8F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean1 = Float.isFinite((-519.3F));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      wall1.setHeight(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getLength();
      assertEquals(2412.5793F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float3 = wall1.getXStart();
      assertEquals((-1.0F), float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float4 = wall1.getRightSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean2 = wall1.isTrapezoidal();
      assertTrue(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float5 = wall1.getLength();
      assertEquals(2412.5793F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertEquals((-1207.2897F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2412.5793F, wall1.getLength(), 0.01F);
      assertEquals(2412.5793F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3015.8F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2413.5793F), wall1.getThickness(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYStart(), 0.01F);
      assertEquals(1.0E-10F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYEnd(), 0.01F);
      assertEquals((-2413.5793F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2413.5793F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2413.5793F), wall0.getXEnd(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2413.5793F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2413.5793F), wall0.getXStart(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2413.5793F), wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), 584.812F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(584.812F, wall1.getHeight(), 0.01F);
      assertEquals((-701.4097F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(2093.3F, (-1401.8195F), (-1401.8195F), 1388.6525F, (-423.8133F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1401.8195F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(4472.426F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(345.7403F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-6.583496F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2093.3F, wall2.getXStart(), 0.01F);
      assertEquals(1388.6525F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall2.getYStart(), 0.01F);
      assertEquals((-423.8133F), wall2.getThickness(), 0.01F);
      assertEquals(4472.426F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      
      Float float0 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean0 = wall2.containsPoint(0.0F, 584.812F, (-785.648F));
      assertFalse(boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1401.8195F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(4472.426F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeight());
      assertEquals(345.7403F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-6.583496F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(2093.3F, wall2.getXStart(), 0.01F);
      assertEquals(1388.6525F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall2.getYStart(), 0.01F);
      assertEquals((-423.8133F), wall2.getThickness(), 0.01F);
      assertEquals(4472.426F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertEquals(58, floatArray0.length);
      
      Float float1 = wall0.getArcExtent();
      assertEquals((-1.0F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-704.15546F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1281.5914F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1460.9387F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(669.935F, 0.0F);
      assertEquals(669.935F, float1, 0.01F);
      
      float float2 = Float.max(669.935F, 3604.54F);
      assertEquals(3604.54F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(2554.0F, (-2493.6335F), 2711.9F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      
      float float3 = Float.max(1.0F, 0.0F);
      assertEquals(1.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      Wall wall1 = new Wall(761.3499F, (-992.3735F), 0.0F, 256.78482F, 815.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(380.67496F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(761.3499F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1462.891F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-367.7943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(256.78482F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-992.3735F), wall1.getYStart(), 0.01F);
      assertEquals(1462.891F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setLeftSideShininess(2740.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(380.67496F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(761.3499F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1462.891F, wall1.getLength(), 0.01F);
      assertEquals(2740.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-367.7943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(256.78482F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-992.3735F), wall1.getYStart(), 0.01F);
      assertEquals(1462.891F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      Float float4 = wall1.getHeight();
      assertNull(float4);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(380.67496F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(761.3499F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1462.891F, wall1.getLength(), 0.01F);
      assertEquals(2740.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-367.7943F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(256.78482F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-992.3735F), wall1.getYStart(), 0.01F);
      assertEquals(1462.891F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Wall wall0 = new Wall(0.01F, 0.01F, 3529.1F, 3529.1F, 3529.1F, 3529.1F);
      assertNotNull(wall0);
      assertEquals(1764.555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3529.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(4990.887F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3529.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1764.555F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3529.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4990.887F, wall0.getLength(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(1764.555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3529.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.01F, wall0.getYStart(), 0.01F);
      assertEquals(4990.887F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3529.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1764.555F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3529.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4990.887F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(22.713877F, 22.713877F, 22.713877F, 22.713877F, 22.713877F);
      assertNotNull(wall0);
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertEquals(22.713877F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float(22.713877F);
      assertEquals(22.713877F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent((Float) null);
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertEquals(22.713877F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(1626.0F, (-76.8232F), 1626.0F, 0.0F, (-76.8232F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-76.8232F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-38.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(76.8232F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1626.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1626.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.8232F), wall0.getYStart(), 0.01F);
      assertEquals(76.8232F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1626.0F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertNull(float0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-76.8232F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-38.4116F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(76.8232F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1626.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1626.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-76.8232F), wall0.getYStart(), 0.01F);
      assertEquals(76.8232F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1626.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(2207.0088F, 2207.0088F, 2207.0088F, 2207.0088F, 2207.0088F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2207.0088F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2207.0088F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2207.0088F, wall0.getYStart(), 0.01F);
      assertEquals(2207.0088F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2207.0088F, wall0.getXEnd(), 0.01F);
      assertEquals(2207.0088F, wall0.getYEnd(), 0.01F);
      assertEquals(2207.0088F, wall0.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt((-536.2838F), 1487.7472F, (-536.2838F));
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2207.0088F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2207.0088F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2207.0088F, wall0.getYStart(), 0.01F);
      assertEquals(2207.0088F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2207.0088F, wall0.getXEnd(), 0.01F);
      assertEquals(2207.0088F, wall0.getYEnd(), 0.01F);
      assertEquals(2207.0088F, wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall((-295.72348F), (-1306.1F), (-2050.978F), 127.0F, 581.009F, (-1306.1F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1306.1F), wall2.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall2.getXEnd(), 0.01F);
      assertEquals(2265.9863F, wall2.getLength(), 0.01F);
      assertEquals(581.009F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1173.3507F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2265.9863F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(127.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1306.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-589.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-295.72348F), wall2.getXStart(), 0.01F);
      
      Float float0 = new Float((-1306.1F));
      assertEquals((-1306.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1306.1F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(3576218.8F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(381.57617F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      float float1 = wall2.getLeftSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1306.1F), wall2.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall2.getXEnd(), 0.01F);
      assertEquals(2265.9863F, wall2.getLength(), 0.01F);
      assertEquals(581.009F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1173.3507F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2265.9863F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(127.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-1306.1F), wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-589.55F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-295.72348F), wall2.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1306.1F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(3576218.8F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(381.57617F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      float float2 = wall0.getLength();
      assertEquals(3576218.8F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1306.1F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(3576218.8F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(381.57617F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      float float0 = 0.0F;
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(2171.7);
      assertEquals(2171.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.1F, 0.0F, (-330.4F), 1.0F, 0, (-785.648F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.74805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.74805F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart((-330.4F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint((-1.0F), 1418.8771F, (-785.648F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(852.4261F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-165.15F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-330.4F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(852.4261F, wall2.getLength(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall((-2140.298F), 0.0F, (-2140.298F), (-2140.298F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2140.298F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals(2140.298F, wall0.getLength(), 0.01F);
      assertEquals((-2140.298F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2140.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2140.298F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals(2140.298F, wall0.getLength(), 0.01F);
      assertEquals((-2140.298F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2140.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2140.298F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2140.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2140.298F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall1.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2140.298F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getThickness();
      assertEquals((-2050.978F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2140.298F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals(2140.298F, wall0.getLength(), 0.01F);
      assertEquals((-2140.298F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2140.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2140.298F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2140.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2140.298F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall1.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2140.298F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall((-2368.0918F), (-2140.298F), (-656.1F), (-656.1F), 0.1F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2140.298F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals(2140.298F, wall0.getLength(), 0.01F);
      assertEquals((-2140.298F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2140.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2140.298F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals(2140.298F, wall0.getLength(), 0.01F);
      assertEquals((-2140.298F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2140.298F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setXStart((-2368.0918F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setXStart((-1.07219F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1070.6852F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals(3026.0806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getXStart(), 0.01F);
      assertEquals(3026.0806F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.containsPoint(1.0F, (-1.0F), (-2404.984F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1070.6852F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals(3026.0806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getXStart(), 0.01F);
      assertEquals(3026.0806F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Wall wall3 = wall2.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2050.978F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(3026.0806F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1070.6852F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2140.298F), wall3.getXEnd(), 0.01F);
      assertEquals((-2140.298F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(3026.0806F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1070.149F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.07219F), wall3.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      
      Integer integer0 = wall3.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2050.978F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(3026.0806F, wall3.getLength(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1070.6852F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2140.298F), wall3.getXEnd(), 0.01F);
      assertEquals((-2140.298F), wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(3026.0806F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-1070.149F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.07219F), wall3.getXStart(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall2);
      assertSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      
      Float float1 = wall1.getArcExtent();
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1070.6852F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals(3026.0806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getXStart(), 0.01F);
      assertEquals(3026.0806F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2140.298F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2140.298F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2140.298F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall1.getYEnd(), 0.01F);
      assertEquals((-1070.149F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2140.298F, wall1.getLength(), 0.01F);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall2.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-656.1F), wall2.getXEnd(), 0.01F);
      assertEquals((-656.1F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals((-2140.298F), wall2.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall2.getXStart(), 0.01F);
      assertEquals(2265.7803F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(2265.7803F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1398.199F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1512.096F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      Wall wall4 = new Wall((-2140.298F), 0.0F, 0.01F, 0.0F, 0.01F);
      assertNotNull(wall4);
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertNull(wall4.getLeftSideColor());
      assertEquals(2140.308F, wall4.getLength(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(2140.308F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals(0.01F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals((-1070.144F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-2140.298F), wall4.getXStart(), 0.01F);
      
      wall4.setRightSideShininess((-1222.652F));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertNull(wall4.getLeftSideColor());
      assertEquals(2140.308F, wall4.getLength(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(0.01F, wall4.getXEnd(), 0.01F);
      assertNull(wall4.getHeight());
      assertEquals(2140.308F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals((-1222.652F), wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getYEnd(), 0.01F);
      assertEquals((-1070.144F), wall4.getXArcCircleCenter(), 0.01F);
      assertEquals((-2140.298F), wall4.getXStart(), 0.01F);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      
      boolean boolean1 = wall0.containsWallStartAt((-2050.978F), (-2050.978F), (-962.12F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1070.6852F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals(3026.0806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getXStart(), 0.01F);
      assertEquals(3026.0806F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      float float2 = wall0.getLength();
      assertEquals(3026.0806F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1070.6852F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2140.298F), wall0.getYEnd(), 0.01F);
      assertEquals(3026.0806F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1070.149F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2140.298F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getXStart(), 0.01F);
      assertEquals(3026.0806F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall4);
      assertSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float float1 = wall0.getLength();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, (-1.0F), (-1.0F), (-1206.2697F), (-1206.2697F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.move((-1.0F), 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals((-2.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals((-2.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      wall1.setXEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall1.setYStart((-1.0F));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setLeftSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Wall wall3 = new Wall(902.305F, 0.0F, 2983.9316F, 2983.9316F, 0.0F, 0.0F);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(1491.9658F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2983.9316F, wall3.getYEnd(), 0.01F);
      assertEquals(2983.9316F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1943.1183F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(3638.2712F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3638.2712F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(902.305F, wall3.getXStart(), 0.01F);
      
      Integer integer0 = new Integer(1050);
      assertEquals(1050, (int)integer0);
      assertNotNull(integer0);
      
      wall3.setLeftSideColor(integer0);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(1491.9658F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2983.9316F, wall3.getYEnd(), 0.01F);
      assertEquals(2983.9316F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(1943.1183F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(3638.2712F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3638.2712F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getHeight(), 0.01F);
      assertEquals(1050, (int)wall3.getLeftSideColor());
      assertEquals(902.305F, wall3.getXStart(), 0.01F);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall2.setLeftSideShininess((-1206.2697F));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1206.2697F), wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      boolean boolean0 = wall2.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1206.2697F), wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      Level level0 = new Level("VISIBLE", (-988.3997F), (-1.0F), (-1206.2697F));
      assertNotNull(level0);
      assertEquals((-988.3997F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1206.2697F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("VISIBLE", level0.getName());
      
      level0.setElevation(2681.8838F);
      assertEquals(2681.8838F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1206.2697F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("VISIBLE", level0.getName());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals(2681.8838F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1206.2697F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("VISIBLE", level0.getName());
      assertEquals((-1206.2697F), level1.getHeight(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("VISIBLE", level1.getName());
      assertEquals(2681.8838F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean1 = wall2.isAtLevel(level1);
      assertFalse(boolean1);
      assertFalse(level0.equals((Object)level1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean1 == boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(2681.8838F, level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-1206.2697F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("VISIBLE", level0.getName());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1206.2697F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall1.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), level1.getHeight(), 0.01F);
      assertEquals((-1.0F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals("VISIBLE", level1.getName());
      assertEquals(2681.8838F, level1.getElevation(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1206.2697F), wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1206.2697F), wall2.getThickness(), 0.01F);
      assertEquals((-0.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals((-1206.2697F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-0.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall3);
      assertNotSame(level1, level0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      Float float1 = wall0.getHeight();
      assertEquals((-1206.2697F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1206.2697F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1206.2697F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall(2228.0F, 2228.0F, 2228.0F, (-785.648F), (-1172.802F), 2228.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3013.648F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXStart(), 0.01F);
      assertEquals(721.176F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getHeight(), 0.01F);
      assertEquals(3013.648F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2228.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float0 = new Float(2228.0F);
      assertEquals(2228.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(2228.0F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3013.648F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXStart(), 0.01F);
      assertEquals(721.176F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getHeight(), 0.01F);
      assertEquals(3013.648F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2228.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Float float2 = new Float(2228.0F);
      assertEquals(2228.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(2228.0F, (float) float2, (float) float2, 2228.0F, (-1172.802F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3013.648F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXStart(), 0.01F);
      assertEquals(721.176F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getHeight(), 0.01F);
      assertEquals(3013.648F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2228.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3013.648F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXStart(), 0.01F);
      assertEquals(721.176F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getHeight(), 0.01F);
      assertEquals(3013.648F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2228.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall1.containsWallStartAt(874.53F, (-2490.5906F), 0.049000144F);
      assertFalse(boolean0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2228.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2228.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2228.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall1.getXStart(), 0.01F);
      assertEquals(2228.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3013.648F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2228.0F, wall0.getXStart(), 0.01F);
      assertEquals(721.176F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getHeight(), 0.01F);
      assertEquals(3013.648F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2228.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2228.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), (-1401.8195F));
      assertNotNull(wall0);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float0 = new Float((-785.648F));
      assertEquals((-785.648F), float0, 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-785.648F), (-785.648F), 1.0F);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      Float float3 = wall2.getArcExtent();
      assertNull(float3);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall2.setRightSideShininess((-1173.319F));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      boolean boolean1 = wall2.containsWallStartAt((-235.235F), (-944.0F), (-2329.0F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Wall wall3 = wall0.clone();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall3.getHeight(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-392.77402F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall3.getLength(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals(0.1F, wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(785.748F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.1F, 405.0F, 405.0F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = new Integer(5);
      assertEquals(5, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess((-1.0F));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 1.0F, (-1.0F), 625.6964F, 0.0F, 1.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(624.6972F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(624.6972F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(625.6964F, wall1.getYEnd(), 0.01F);
      assertEquals(313.3482F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(624.6972F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(624.6972F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(625.6964F, wall1.getYEnd(), 0.01F);
      assertEquals(313.3482F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = new Wall(0.0F, 1.0F, 1672.0F, 1672.0F, 0.1F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1672.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2363.8582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1672.0F, wall2.getXEnd(), 0.01F);
      assertEquals(836.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(2363.8582F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(836.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      
      HomeTexture homeTexture1 = wall2.getLeftSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1672.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2363.8582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1672.0F, wall2.getXEnd(), 0.01F);
      assertEquals(836.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(2363.8582F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(836.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setPattern((TextureImage) null);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1672.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2363.8582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1672.0F, wall2.getXEnd(), 0.01F);
      assertEquals(836.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(2363.8582F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(836.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(313.3482F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(624.6972F, wall3.getLength(), 0.01F);
      assertEquals(625.6964F, wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(624.6972F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-0.5F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall3.addPropertyChangeListener((PropertyChangeListener) null);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(313.3482F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(624.6972F, wall3.getLength(), 0.01F);
      assertEquals(625.6964F, wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(624.6972F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-0.5F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      Float float0 = wall3.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(1.0F, wall3.getHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(313.3482F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall3.getXEnd(), 0.01F);
      assertEquals(624.6972F, wall3.getLength(), 0.01F);
      assertEquals(625.6964F, wall3.getYEnd(), 0.01F);
      assertEquals(1.0F, wall3.getYStart(), 0.01F);
      assertEquals(624.6972F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertEquals((-0.5F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      Integer integer1 = new Integer(5);
      assertEquals(5, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = new Integer((-16));
      assertEquals((-16), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      
      wall0.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(integer0.equals((Object)integer2));
      assertTrue(integer0.equals((Object)integer1));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getRightSideColor());
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
      
      wall1.setXStart(2554.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1276.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2630.2605F, wall1.getLength(), 0.01F);
      assertEquals(625.6964F, wall1.getYEnd(), 0.01F);
      assertEquals(313.3482F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(2554.0F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(2630.2605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall3);
      
      boolean boolean0 = wall2.containsWallEndAt((-1.0F), (-252.2094F), (-3442.0F));
      assertFalse(boolean0);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(1672.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(2363.8582F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1672.0F, wall2.getXEnd(), 0.01F);
      assertEquals(836.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(2363.8582F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(836.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      
      Integer integer3 = wall0.getRightSideColor();
      assertEquals(5, (int)integer3);
      assertNotNull(integer3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall3));
      assertTrue(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(405.0F, wall0.getLength(), 0.01F);
      assertEquals(405.0F, wall0.getYEnd(), 0.01F);
      assertEquals(405.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(405.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(202.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5, (int)wall0.getRightSideColor());
      assertEquals(5, (int)wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall3);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-785.648F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall((-785.648F), (float) float2, (float) float2, 0.1F, (-785.648F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.1F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((float) float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), (-785.648F), (-785.648F));
      assertFalse(boolean0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-785.648F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-1172.802F), (-1.0F), 0.1F, (-1172.802F), 1821.3491F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1657.9563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1821.3491F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1657.9563F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-586.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1172.802F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-586.351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1657.9563F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1821.3491F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1657.9563F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-586.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1172.802F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-586.351F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1821.3491F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(1171.802F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-586.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1171.802F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1821.3491F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(1171.802F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-586.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1171.802F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1821.3491F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(1171.802F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-586.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1171.802F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.intersectsRectangle(0.1F, (-1172.802F), (-1172.802F), 2.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2206.1853F, wall1.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2206.1853F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2206.1853F, wall1.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2206.1853F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-3466.7F), (-3466.7F), (-1643.1F), (-3466.7F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint(1.0F, (-2247.6587F), (-3466.7F));
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsWallEndAt(1677.5795F, (-1643.1F), (-578.1724F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals((-3466.7F), (float)float0, 0.01F);
      assertNotNull(float0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float1 = new Float((-631.2F));
      assertEquals((-631.2F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals((-631.2F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(4901.2397F, float3, 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", 18.194689F, (-2247.6587F), 215.0F);
      assertNotNull(level0);
      assertEquals(215.0F, level0.getHeight(), 0.01F);
      assertEquals(18.194689F, level0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level0.getName());
      assertEquals((-2247.6587F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      
      Level level1 = level0.clone();
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals(215.0F, level0.getHeight(), 0.01F);
      assertEquals(18.194689F, level0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level0.getName());
      assertEquals((-2247.6587F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level1.getName());
      assertEquals((-2247.6587F), level1.getFloorThickness(), 0.01F);
      assertEquals(215.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(18.194689F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      boolean boolean2 = wall0.isAtLevel(level1);
      assertFalse(boolean2);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(215.0F, level0.getHeight(), 0.01F);
      assertEquals(18.194689F, level0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level0.getName());
      assertEquals((-2247.6587F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level1.getName());
      assertEquals((-2247.6587F), level1.getFloorThickness(), 0.01F);
      assertEquals(215.0F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(18.194689F, level1.getElevation(), 0.01F);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      Integer integer0 = wall0.getRightSideColor();
      assertNull(integer0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4901.2397F, wall0.getLength(), 0.01F);
      assertEquals((-3466.7F), wall0.getYEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1643.1F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1733.85F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-631.2F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-3466.7F), wall0.getHeight(), 0.01F);
      assertEquals(4901.2397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1733.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3466.7F), wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setYEnd(0.1F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(4.9249535F, (-1173.319F), 7.3867345F, (-1173.319F), 7.3867345F, (-1173.319F));
      assertNotNull(wall0);
      assertEquals((-1173.319F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.3867345F, wall0.getXEnd(), 0.01F);
      assertEquals(6.1558437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall0.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.461781F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.3867345F, wall0.getThickness(), 0.01F);
      assertEquals(2.461781F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(4.9249535F, (-1.0F), 980.0F, (-1173.319F), 980.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-587.1595F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(492.46246F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(980.0F, wall1.getXEnd(), 0.01F);
      assertEquals(980.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1524.8289F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(1524.8289F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1173.319F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.3867345F, wall0.getXEnd(), 0.01F);
      assertEquals(6.1558437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall0.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.461781F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.3867345F, wall0.getThickness(), 0.01F);
      assertEquals(2.461781F, wall0.getLength(), 0.01F);
      assertEquals((-587.1595F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(492.46246F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(980.0F, wall1.getXEnd(), 0.01F);
      assertEquals(980.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1524.8289F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(1524.8289F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1173.319F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(7.3867345F, wall0.getXEnd(), 0.01F);
      assertEquals(6.1558437F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall0.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.461781F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1173.319F), wall0.getHeight(), 0.01F);
      assertEquals((-1173.319F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(7.3867345F, wall0.getThickness(), 0.01F);
      assertEquals(2.461781F, wall0.getLength(), 0.01F);
      assertEquals((-587.1595F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(492.46246F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(980.0F, wall1.getXEnd(), 0.01F);
      assertEquals(980.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1524.8289F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(1524.8289F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-587.1595F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(492.46246F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(980.0F, wall1.getXEnd(), 0.01F);
      assertEquals(980.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1524.8289F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(1524.8289F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall((-1144.8989F), (-1144.8989F), (-1144.8989F), (-1144.8989F), (-1144.8989F), 0.01F);
      assertNotNull(wall0);
      assertEquals((-1144.8989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1144.8989F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1144.8989F), wall0.getXEnd(), 0.01F);
      assertEquals((-1144.8989F), wall0.getYEnd(), 0.01F);
      assertEquals((-1144.8989F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1144.8989F), wall0.getYStart(), 0.01F);
      assertEquals((-1144.8989F), wall0.getThickness(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals((-1144.8989F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1144.8989F), wall0.getXStart(), 0.01F);
      assertEquals(0.01F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1144.8989F), wall0.getXEnd(), 0.01F);
      assertEquals((-1144.8989F), wall0.getYEnd(), 0.01F);
      assertEquals((-1144.8989F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1144.8989F), wall0.getYStart(), 0.01F);
      assertEquals((-1144.8989F), wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float1 = new Float(2171.7);
      assertEquals(2171.7F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(0, (-2059.7F), (-1189.0514F), (-353.849F), (-353.849F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1206.7744F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-353.849F), wall1.getYEnd(), 0.01F);
      assertEquals(2079.368F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-1189.0514F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-594.5257F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-353.849F), wall1.getThickness(), 0.01F);
      assertEquals(2079.368F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2059.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals((-179.94418F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2171.7F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(938531.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0, (int)wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy(")C`].bO+WRu'-=X", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals(")C`].bO+WRu'-=X", propertyChangeListenerProxy0.getPropertyName());
      
      wall2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals((-179.94418F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2171.7F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(938531.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0, (int)wall2.getLeftSideColor());
      assertEquals(")C`].bO+WRu'-=X", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall2.getRightSideColor());
      assertEquals((-179.94418F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(2171.7F, wall2.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(938531.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(0, (int)wall2.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertEquals(2, floatArray0.length);
      
      Float float2 = wall0.getArcExtent();
      assertEquals(2171.7F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0, (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-179.94418F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(938531.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), 584.812F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(584.812F, wall0.getHeight(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("ZVRW~/.<ydX7", temporaryURLContent0, (-1.0F), (-1.0F));
      assertNotNull(catalogTexture0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("ZVRW~/.<ydX7", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("ZVRW~/.<ydX7", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals("ZVRW~/.<ydX7", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      
      wall0.setPattern(homeTexture0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("ZVRW~/.<ydX7", catalogTexture0.getName());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1.0F), catalogTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1.0F), homeTexture0.getHeight(), 0.01F);
      assertEquals("ZVRW~/.<ydX7", homeTexture0.getName());
      assertEquals((-1.0F), homeTexture0.getWidth(), 0.01F);
      
      Wall wall1 = new Wall((-1953.9554F), 584.812F, (-1163.0F), (-1.0F), 584.812F, (-1.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(984.2694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1163.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1558.4778F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(984.2694F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(291.906F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1953.9554F), wall1.getXStart(), 0.01F);
      assertEquals(584.812F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(584.812F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(984.2694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1163.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1558.4778F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(984.2694F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(291.906F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1953.9554F), wall1.getXStart(), 0.01F);
      assertEquals(584.812F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(584.812F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(984.2694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1163.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1558.4778F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(984.2694F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(291.906F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1953.9554F), wall1.getXStart(), 0.01F);
      assertEquals(584.812F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(584.812F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall2.getXStart(), 0.01F);
      assertEquals(1400.8226F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall2.getThickness(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-701.4097F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      HomeTexture homeTexture1 = wall2.getRightSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(984.2694F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1163.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1558.4778F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(984.2694F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(291.906F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1953.9554F), wall1.getXStart(), 0.01F);
      assertEquals(584.812F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(584.812F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall2.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall2.getLength(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall2.getXStart(), 0.01F);
      assertEquals(1400.8226F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall2.getThickness(), 0.01F);
      assertEquals(2.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-701.4097F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setRightSideShininess(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setYEnd(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setYEnd((-2837.3057F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.0F, 1.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean1 = wall1.containsPoint(1.0F, 0.01F, 0.0F);
      assertTrue(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(boolean1 == boolean0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float2 = wall1.getArcExtent();
      assertNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture1 = wall1.getLeftSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean2 = wall0.containsWallStartAt(0.0F, 53.0582F, 760.3499F);
      assertTrue(boolean2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.move(760.3499F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(760.3499F, wall1.getXEnd(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2838.306F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(761.3499F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2838.306F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(760.8499F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      assertNotNull(wall0);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(2206.1853F, wall0.getXEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getYEnd(), 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
      assertEquals(2206.1853F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2206.1853F, wall0.getXStart(), 0.01F);
      assertEquals(2206.1853F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2206.1853F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall((-2992.976F), 1999.8062F, 0.0F, (-1769.9845F), (-1769.9845F), (-2992.976F));
      assertNotNull(wall0);
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = wall1.getHeightAtEnd();
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1769.9845F), wall2.getYEnd(), 0.01F);
      assertEquals(4813.4424F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(114.91083F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2992.976F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2992.976F), wall2.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1769.9845F), wall2.getThickness(), 0.01F);
      assertEquals(4813.4424F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1769.9845F), wall2.getYEnd(), 0.01F);
      assertEquals(4813.4424F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(114.91083F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2992.976F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2992.976F), wall2.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1769.9845F), wall2.getThickness(), 0.01F);
      assertEquals(4813.4424F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall2.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1769.9845F), wall2.getYEnd(), 0.01F);
      assertEquals(4813.4424F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(114.91083F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2992.976F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2992.976F), wall2.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1769.9845F), wall2.getThickness(), 0.01F);
      assertEquals(4813.4424F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = Integer.valueOf(767);
      assertEquals(767, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("com.eteks.sweethome3d.model.BackgroundImage", 0);
      assertEquals(0, (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(integer0.equals((Object)integer1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(767, (int)wall1.getLeftSideColor());
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      wall1.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(767, (int)wall1.getLeftSideColor());
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsPoint(0.0F, 1999.8062F, (-1769.9845F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      boolean boolean1 = wall1.containsWallEndAt((-2992.976F), 1.0F, (-4440.5015F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(767, (int)wall1.getLeftSideColor());
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent("", "", (Object) null, (Object) null);
      assertNotNull(propertyChangeEvent0);
      assertEquals("", propertyChangeEvent0.getPropertyName());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      propertyChangeEvent0.setPropagationId(object0);
      assertEquals("", propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeEvent0.getPropertyName());
      
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(767, (int)wall1.getLeftSideColor());
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float1 = wall2.getXEnd();
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1769.9845F), wall2.getYEnd(), 0.01F);
      assertEquals(4813.4424F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(114.91083F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2992.976F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2992.976F), wall2.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1769.9845F), wall2.getThickness(), 0.01F);
      assertEquals(4813.4424F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2992.976F), wall1.getXStart(), 0.01F);
      assertEquals((-1769.9845F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1769.9845F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1496.488F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(114.91083F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2992.976F), wall1.getHeight(), 0.01F);
      assertEquals(767, (int)wall1.getLeftSideColor());
      assertEquals(1999.8062F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1769.9845F), wall0.getThickness(), 0.01F);
      assertEquals((-2992.976F), wall0.getXStart(), 0.01F);
      assertEquals(114.91083F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4813.4424F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(4813.4424F, wall0.getLength(), 0.01F);
      assertEquals((-2992.976F), wall0.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1769.9845F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1769.9845F), wall2.getYEnd(), 0.01F);
      assertEquals(4813.4424F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(114.91083F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-2992.976F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2992.976F), wall2.getHeight(), 0.01F);
      assertEquals(1999.8062F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1496.488F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1769.9845F), wall2.getThickness(), 0.01F);
      assertEquals(4813.4424F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 0.0F, 0.0F, 3.6680827F);
      assertNotNull(wall0);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0, 793.248F, 0.0F, 3.6680827F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(3.6680827F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(793.2565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(793.2565F, wall1.getLength(), 0.01F);
      assertEquals(1.8340414F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall0.containsWallStartAt(1418.8771F, 0.0F, (-0.5F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      
      Integer integer0 = wall1.getRightSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(396.624F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(793.248F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(793.248F, wall2.getLength(), 0.01F);
      assertEquals(3.6680827F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(793.248F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Float float0 = wall2.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(396.624F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(793.248F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(793.248F, wall2.getLength(), 0.01F);
      assertEquals(3.6680827F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(793.248F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      Float float1 = wall2.getArcExtent();
      assertNull(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(396.624F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(793.248F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(793.248F, wall2.getLength(), 0.01F);
      assertEquals(3.6680827F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(793.248F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", (Content) null, 0.01F, 0.1F, false);
      assertNotNull(catalogTexture0);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.1F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.01F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4, floatArray0.length);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.1F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.01F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.01F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(0.1F, homeTexture0.getHeight(), 0.01F);
      
      wall0.setRightSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.1F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.01F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.01F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(0.1F, homeTexture0.getHeight(), 0.01F);
      
      wall0.setLeftSideTexture(homeTexture0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals(0.1F, catalogTexture0.getHeight(), 0.01F);
      assertEquals(0.01F, catalogTexture0.getWidth(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals("", catalogTexture0.getName());
      assertEquals(0.01F, homeTexture0.getWidth(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals("", homeTexture0.getName());
      assertEquals(0.1F, homeTexture0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 318.124F, 0.1F, 0.1F, 0.1F, (-2444.4512F));
      assertNotNull(wall0);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      wall0.setThickness(815.0F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXEnd(815.0F);
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("'<Ka\"{~L!:miZTxs}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.'<Ka\"{~L!:miZTxs}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1185.5286F, 0.0F, (-238.568F), (-1529.8473F));
      assertNotNull(wall0);
      assertEquals(1424.0966F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(473.4803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1529.8473F), wall0.getThickness(), 0.01F);
      assertEquals(1185.5286F, wall0.getYStart(), 0.01F);
      assertEquals(1424.0966F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-238.568F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1424.0966F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(473.4803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1529.8473F), wall0.getThickness(), 0.01F);
      assertEquals(1185.5286F, wall0.getYStart(), 0.01F);
      assertEquals(1424.0966F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-238.568F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1424.0966F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-238.568F), wall1.getYEnd(), 0.01F);
      assertEquals((-1529.8473F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(473.4803F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1424.0966F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1185.5286F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.move(1185.5286F, 0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1424.0966F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1185.5286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(473.4803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1185.5286F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1185.5286F, wall0.getXStart(), 0.01F);
      assertEquals((-1529.8473F), wall0.getThickness(), 0.01F);
      assertEquals(1185.5286F, wall0.getYStart(), 0.01F);
      assertEquals(1424.0966F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-238.568F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Level level0 = new Level("kcS+=w-s;+}sgbV<HG", (-937.0F), (-666.48F), (-1.0F));
      assertNotNull(level0);
      assertEquals((-666.48F), level0.getFloorThickness(), 0.01F);
      assertEquals((-937.0F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals("kcS+=w-s;+}sgbV<HG", level0.getName());
      assertTrue(level0.isVisible());
      
      wall1.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1424.0966F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1185.5286F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(473.4803F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1185.5286F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1185.5286F, wall0.getXStart(), 0.01F);
      assertEquals((-1529.8473F), wall0.getThickness(), 0.01F);
      assertEquals(1185.5286F, wall0.getYStart(), 0.01F);
      assertEquals(1424.0966F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-238.568F), wall0.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1424.0966F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-238.568F), wall1.getYEnd(), 0.01F);
      assertEquals((-1529.8473F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(473.4803F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1424.0966F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1185.5286F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-666.48F), level0.getFloorThickness(), 0.01F);
      assertEquals((-937.0F), level0.getElevation(), 0.01F);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals("kcS+=w-s;+}sgbV<HG", level0.getName());
      assertTrue(level0.isVisible());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float1 = wall0.getArcExtent();
      assertNull(float1);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float2 = new Float(1.0F);
      assertEquals(1.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      wall0.setArcExtent(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1178.522F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(6.4161193E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1178.522F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(6.4161193E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      float float4 = wall0.getLength();
      assertEquals(785.748F, float4, 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1178.522F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(6.4161193E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-685.2016F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(0.1F, 0.1F, (-685.2016F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("THICKNESS", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      
      Integer integer0 = new Integer(574);
      assertEquals(574, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-685.2016F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer1 = new Integer(574);
      assertEquals(574, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(integer1, "THICKNESS", "", wall0);
      assertNotNull(propertyChangeEvent0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertEquals("THICKNESS", propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("THICKNESS", propertyChangeEvent0.getPropertyName());
      assertNotSame(wall0, wall1);
      
      PropertyChangeEvent propertyChangeEvent1 = new PropertyChangeEvent(integer0, "THICKNESS", wall1, integer0);
      assertNotNull(propertyChangeEvent1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-685.2016F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals("THICKNESS", propertyChangeEvent1.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(propertyChangeEvent1.equals((Object)propertyChangeEvent0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-685.2016F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals("THICKNESS", propertyChangeEvent1.getPropertyName());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(propertyChangeEvent1, propertyChangeEvent0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      PropertyChangeEvent propertyChangeEvent2 = new PropertyChangeEvent(propertyChangeListenerProxy0, "THICKNESS", propertyChangeListenerProxy0, object0);
      assertNotNull(propertyChangeEvent2);
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("THICKNESS", propertyChangeEvent2.getPropertyName());
      
      propertyChangeEvent2.setPropagationId(object0);
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("THICKNESS", propertyChangeEvent2.getPropertyName());
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      
      String string0 = propertyChangeEvent2.toString();
      assertNotNull(string0);
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("THICKNESS", propertyChangeEvent2.getPropertyName());
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent2);
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent0));
      assertFalse(propertyChangeEvent2.equals((Object)propertyChangeEvent1));
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("THICKNESS", propertyChangeEvent2.getPropertyName());
      assertNotSame(propertyChangeEvent2, propertyChangeEvent0);
      assertNotSame(propertyChangeEvent2, propertyChangeEvent1);
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertEquals("THICKNESS", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(wall0, wall1);
      
      wall0.setLeftSideShininess((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-685.2016F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setThickness(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      float float0 = wall0.getYEnd();
      assertEquals(0.1F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture2 = wall0.getRightSideTexture();
      assertNull(homeTexture2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture3 = wall0.getRightSideTexture();
      assertNull(homeTexture3);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-685.2016F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall0.getYEnd();
      assertEquals(0.1F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-685.2016F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setPattern((TextureImage) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getThickness();
      assertEquals((-2050.978F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-443.12F), 1.0F, 1.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(3025.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3025.003F, wall2.getLength(), 0.01F);
      assertEquals((-2139.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3025.003F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3025.003F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float float4 = wall2.getLength();
      assertEquals(3025.003F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(3025.003F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(3025.003F, wall2.getLength(), 0.01F);
      assertEquals((-2139.0F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1206.2697F), (-1.0F), 0.0F, (-1.0F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1206.2697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1206.2697F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideShininess((-1.0F));
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1206.2697F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1206.2697F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setXEnd(3938.847F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-2.0F), 186.18935F);
      assertEquals(186.18935F, float1, 0.01F);
      
      float float2 = Float.max((-1.0F), (-1.0F));
      assertEquals((-1.0F), float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(2554.0F, (-1.0F), 2.0F);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      
      float float3 = Float.max(1355.83F, (-1206.2697F));
      assertEquals(1355.83F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      
      Float float4 = new Float((-1087.10943252));
      assertEquals((-1087.1094F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      
      wall0.setHeight(float4);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      
      float float5 = wall0.getLeftSideShininess();
      assertEquals((-1.0F), float5, 0.01F);
      assertEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      
      float float6 = wall0.getYArcCircleCenter();
      assertEquals((-603.1348F), float6, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
      
      boolean boolean2 = wall0.intersectsRectangle(186.18935F, (-1180.2593F), 2.0F, (-1180.2593F));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1968.9235F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1206.2697F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1087.1094F), wall0.getHeight(), 0.01F);
      assertEquals((-1.0F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4120.374F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3938.847F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-603.1348F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(4120.374F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-27.04416F), (-785.648F), 0.0F, (-27.04416F), (-1173.319F), (-27.04416F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-13.52208F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-27.04416F), wall1.getHeight(), 0.01F);
      assertEquals(759.08575F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-27.04416F), wall1.getYEnd(), 0.01F);
      assertEquals(759.08575F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-27.04416F), wall1.getXStart(), 0.01F);
      assertEquals((-406.3461F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-13.52208F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-27.04416F), wall1.getHeight(), 0.01F);
      assertEquals(759.08575F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-27.04416F), wall1.getYEnd(), 0.01F);
      assertEquals(759.08575F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-27.04416F), wall1.getXStart(), 0.01F);
      assertEquals((-406.3461F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(1.0F, 1923.0F, (-590.0F), 1923.0F, 0.0F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertEquals(591.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-294.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(591.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertEquals(591.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-294.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(591.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setXStart((-1173.319F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(583.319F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(583.319F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-881.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall0.containsPoint((-785.648F), (-816.2F), (-423.8133F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertNull(wall3.getHeight());
      assertEquals(583.319F, wall3.getLength(), 0.01F);
      assertEquals((-881.6595F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall3.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall3.getXStart(), 0.01F);
      assertEquals(1923.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(583.319F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals((-590.0F), wall3.getXEnd(), 0.01F);
      assertEquals(1923.0F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertSame(wall3, wall2);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Float float3 = wall2.getArcExtent();
      assertNull(float3);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(583.319F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(583.319F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-881.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall0.setRightSideShininess(0.060219467F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.060219467F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float4 = wall0.getLength();
      assertEquals(785.748F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.060219467F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float5 = wall0.getYStart();
      assertEquals(0.1F, float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertEquals(float5, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.060219467F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 2323.137F, 1.0F, 1.0F, (-1441.2461F));
      assertNotNull(wall0);
      assertEquals(1162.0685F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2322.137F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2322.137F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setYEnd(0.0F);
      assertEquals(2322.1372F, wall0.getLength(), 0.01F);
      assertEquals(1162.0685F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2322.1372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setXStart(0.0F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2323.1372F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2323.1372F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart((-666.48F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean0 = wall0.containsPoint(0.0F, 0.01F, 1734.24F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      boolean boolean1 = wall0.containsWallEndAt((-1741.4103F), (-1795.11F), 0.0F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("%\"~m&7(QW^V[*", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("%\"~m&7(QW^V[*", propertyChangeListenerProxy0.getPropertyName());
      
      wall0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals("%\"~m&7(QW^V[*", propertyChangeListenerProxy0.getPropertyName());
      
      boolean boolean2 = wall0.containsPoint(58.24702F, 1.0F, 58.24702F);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2416.8494F, wall0.getLength(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-333.24F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2416.8494F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-666.48F), wall0.getYStart(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setYStart((-1741.4103F));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1441.2461F), wall1.getHeight(), 0.01F);
      assertEquals(2903.356F, wall1.getLength(), 0.01F);
      assertEquals(2323.137F, wall1.getXEnd(), 0.01F);
      assertEquals((-870.70514F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1741.4103F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2903.356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1441.2461F), wall1.getHeight(), 0.01F);
      assertEquals(2903.356F, wall1.getLength(), 0.01F);
      assertEquals(2323.137F, wall1.getXEnd(), 0.01F);
      assertEquals((-870.70514F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1741.4103F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2903.356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setRightSideTexture((HomeTexture) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1441.2461F), wall1.getHeight(), 0.01F);
      assertEquals(2903.356F, wall1.getLength(), 0.01F);
      assertEquals(2323.137F, wall1.getXEnd(), 0.01F);
      assertEquals((-870.70514F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1741.4103F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2903.356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall0.getYArcCircleCenter();
      assertEquals((-870.70514F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture1 = wall0.getRightSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setRightSideShininess(2323.137F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1161.5685F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1441.2461F), wall1.getHeight(), 0.01F);
      assertEquals(2903.356F, wall1.getLength(), 0.01F);
      assertEquals(2323.137F, wall1.getXEnd(), 0.01F);
      assertEquals((-870.70514F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1741.4103F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(2903.356F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2323.137F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setYEnd(1556.3318F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1161.5685F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2903.356F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-870.70514F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2903.356F, wall0.getLength(), 0.01F);
      assertEquals(2323.137F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1441.2461F), wall0.getHeight(), 0.01F);
      assertEquals((-1741.4103F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1161.5685F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1556.3318F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-92.539246F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4033.8652F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1441.2461F), wall1.getHeight(), 0.01F);
      assertEquals(2323.137F, wall1.getXEnd(), 0.01F);
      assertEquals((-1741.4103F), wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(4033.8652F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2323.137F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 0.0F, 0.0F, 3.6680827F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0, 793.248F, 0.0F, 3.6680827F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(3.6680827F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(793.2565F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(793.2565F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(793.248F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(396.624F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(793.248F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(793.248F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      Wall wall2 = new Wall(0, 1.0F, 1.0F, 0.0F, (-5030.2075F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.5F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1.4142135F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-5030.2075F), wall2.getThickness(), 0.01F);
      assertEquals(0.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      wall0.setXStart((-416.1F));
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(416.2F, wall0.getLength(), 0.01F);
      assertEquals(416.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-416.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-208.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(416.2F, wall0.getLength(), 0.01F);
      assertEquals(416.2F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-416.1F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level0 = new Level((String) null, (-177.8257F), (-4136.19F), (-4136.19F));
      assertNotNull(level0);
      assertEquals((-4136.19F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-177.8257F), level0.getElevation(), 0.01F);
      assertEquals((-4136.19F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      wall0.setLevel(level0);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-4136.19F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-177.8257F), level0.getElevation(), 0.01F);
      assertEquals((-4136.19F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Level level1 = new Level("2!O", 3328.8772F, (-877.81F), 2024.2F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals("2!O", level1.getName());
      assertEquals(2024.2F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3328.8772F, level1.getElevation(), 0.01F);
      assertEquals((-877.81F), level1.getFloorThickness(), 0.01F);
      
      Level level2 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-4136.19F), (-569.42F), 1429.5062F);
      assertNotNull(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals((-569.42F), level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level2.getName());
      assertEquals((-4136.19F), level2.getElevation(), 0.01F);
      assertEquals(1429.5062F, level2.getHeight(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("(dn,I~8%1*GCK M", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("(dn,I~8%1*GCK M", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("npk3t[I1D", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("(dn,I~8%1*GCK M", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("npk3t[I1D", propertyChangeListenerProxy1.getPropertyName());
      
      Level level3 = wall0.getLevel();
      assertNotNull(level3);
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals((-4136.19F), level3.getFloorThickness(), 0.01F);
      assertNull(level3.getName());
      assertEquals((-177.8257F), level3.getElevation(), 0.01F);
      assertEquals((-4136.19F), level3.getHeight(), 0.01F);
      assertNotSame(level3, level2);
      assertSame(level3, level0);
      assertNotSame(level3, level1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = new Object();
      assertNotNull(object1);
      assertFalse(object1.equals((Object)object0));
      
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(object0, "", "", object1);
      assertNotNull(propertyChangeEvent0);
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("", propertyChangeEvent0.getPropertyName());
      
      propertyChangeListenerProxy1.propertyChange(propertyChangeEvent0);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(object0.equals((Object)object1));
      assertFalse(object1.equals((Object)object0));
      assertEquals("(dn,I~8%1*GCK M", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("npk3t[I1D", propertyChangeListenerProxy1.getPropertyName());
      assertEquals("", propertyChangeEvent0.getPropertyName());
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(object0, object1);
      assertNotSame(object1, object0);
      
      level3.setElevation((-1.0F));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertTrue(level3.isVisible());
      assertEquals((-1.0F), level3.getElevation(), 0.01F);
      assertEquals((-4136.19F), level3.getFloorThickness(), 0.01F);
      assertNull(level3.getName());
      assertEquals((-4136.19F), level3.getHeight(), 0.01F);
      assertNotSame(level3, level2);
      assertSame(level3, level0);
      assertNotSame(level3, level1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy2 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy1);
      assertNotNull(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertEquals("(dn,I~8%1*GCK M", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("npk3t[I1D", propertyChangeListenerProxy1.getPropertyName());
      assertNull(propertyChangeListenerProxy2.getPropertyName());
      
      level3.removePropertyChangeListener(propertyChangeListenerProxy2);
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy2));
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertFalse(level3.equals((Object)level2));
      assertFalse(level3.equals((Object)level1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy1));
      assertFalse(propertyChangeListenerProxy2.equals((Object)propertyChangeListenerProxy0));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("(dn,I~8%1*GCK M", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("npk3t[I1D", propertyChangeListenerProxy1.getPropertyName());
      assertTrue(level3.isVisible());
      assertEquals((-1.0F), level3.getElevation(), 0.01F);
      assertEquals((-4136.19F), level3.getFloorThickness(), 0.01F);
      assertNull(level3.getName());
      assertEquals((-4136.19F), level3.getHeight(), 0.01F);
      assertNull(propertyChangeListenerProxy2.getPropertyName());
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy2);
      assertNotSame(propertyChangeListenerProxy1, propertyChangeListenerProxy0);
      assertNotSame(level3, level2);
      assertSame(level3, level0);
      assertNotSame(level3, level1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy1);
      assertNotSame(propertyChangeListenerProxy2, propertyChangeListenerProxy0);
      
      boolean boolean0 = wall0.isAtLevel(level1);
      assertFalse(boolean0);
      assertFalse(level1.equals((Object)level3));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level1.equals((Object)level0));
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals("2!O", level1.getName());
      assertEquals(2024.2F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3328.8772F, level1.getElevation(), 0.01F);
      assertEquals((-877.81F), level1.getFloorThickness(), 0.01F);
      assertNotSame(level1, level3);
      assertNotSame(level1, level2);
      assertNotSame(level1, level0);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float1 = wall0.getHeightAtEnd();
      assertNull(float1);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float2 = new Float(0.1F);
      assertEquals(0.1F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      Wall wall1 = new Wall((-2368.0918F), 0.1F, 0.1F, 0.1F, (-423.8133F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.192F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2368.192F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals((-1183.9958F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), 1.0F, (-2368.0918F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Level level0 = new Level("", (-1173.319F), 0.1F, 0.1F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1173.319F), level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      
      boolean boolean1 = wall2.isAtLevel(level0);
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(0.1F, level0.getFloorThickness(), 0.01F);
      assertEquals((-1173.319F), level0.getElevation(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Float float0 = new Float((double) 22.713877F);
      assertEquals(22.713877F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall0 = new Wall(22.713877F, (-3409.0F), (-1.0F), 1313.0F, 1490.5F, (-1.0F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1490.5F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-3409.0F), wall1.getYStart(), 0.01F);
      assertEquals(10.856938F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1048.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1313.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(4722.0596F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4722.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1490.5F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4722.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1048.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1313.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4722.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1490.5F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4722.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1048.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1313.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4722.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1490.5F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4722.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1048.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1313.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.intersectsRectangle((-1.0F), 22.713877F, 1490.5F, 0.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1490.5F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3409.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4722.0596F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-1048.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1313.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4722.0596F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(10.856938F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4722.0F, wall1.getLength(), 0.01F);
      assertEquals((-0.5F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1490.5F, wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(4722.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3409.0F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1048.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1313.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), 0.0F, 1.0F, 1227.75F, 2.0F, 2.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      Wall wall1 = new Wall((-1173.319F), 485.0F, (-3707.67F), 0.0F, 0.0F, (-362.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-362.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2440.4944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getXStart(), 0.01F);
      assertEquals(2580.341F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(485.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3707.67F), wall1.getXEnd(), 0.01F);
      assertEquals(242.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2580.341F, wall1.getLength(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-362.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2440.4944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getXStart(), 0.01F);
      assertEquals(2580.341F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(485.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3707.67F), wall1.getXEnd(), 0.01F);
      assertEquals(242.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2580.341F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(1227.7516F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(613.875F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1227.7516F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1227.75F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-362.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2440.4944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getXStart(), 0.01F);
      assertEquals(2580.341F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(485.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3707.67F), wall1.getXEnd(), 0.01F);
      assertEquals(242.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2580.341F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(2.0F, wall2.getThickness(), 0.01F);
      assertEquals(1227.7516F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(613.875F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1227.7516F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1227.75F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getXArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Float float2 = new Float((-733.53253F));
      assertEquals((-733.53253F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.0F, wall0.getHeight(), 0.01F);
      assertEquals(1227.75F, wall0.getYEnd(), 0.01F);
      assertEquals(1227.7516F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(613.875F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1227.7516F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      
      Integer integer0 = Integer.getInteger("`", 1417);
      assertEquals(1417, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setLeftSideColor(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-362.0F), wall1.getHeight(), 0.01F);
      assertEquals((-2440.4944F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getXStart(), 0.01F);
      assertEquals(2580.341F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1417, (int)wall1.getLeftSideColor());
      assertEquals(485.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-3707.67F), wall1.getXEnd(), 0.01F);
      assertEquals(242.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2580.341F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1172.802F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = new Level((String) null, (-1172.802F), 0.0F, (-785.648F));
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-785.648F), level0.getHeight(), 0.01F);
      assertEquals((-1172.802F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      
      wall0.setLevel(level0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-785.648F), level0.getHeight(), 0.01F);
      assertEquals((-1172.802F), level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      
      Level level1 = new Level((String) null, (-4533.41F), (-4533.41F), 458.4453F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals(458.4453F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-4533.41F), level1.getElevation(), 0.01F);
      assertEquals((-4533.41F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      
      Level level2 = level1.clone();
      assertNotNull(level2);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals(458.4453F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-4533.41F), level1.getElevation(), 0.01F);
      assertEquals((-4533.41F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level2.getName());
      assertEquals(458.4453F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-4533.41F), level2.getElevation(), 0.01F);
      assertEquals((-4533.41F), level2.getFloorThickness(), 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertFalse(boolean0);
      assertFalse(level1.equals((Object)level0));
      assertFalse(level1.equals((Object)level2));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(458.4453F, level1.getHeight(), 0.01F);
      assertNull(level1.getName());
      assertEquals((-4533.41F), level1.getElevation(), 0.01F);
      assertEquals((-4533.41F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertNull(level2.getName());
      assertEquals(458.4453F, level2.getHeight(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals((-4533.41F), level2.getElevation(), 0.01F);
      assertEquals((-4533.41F), level2.getFloorThickness(), 0.01F);
      assertNotSame(level1, level0);
      assertNotSame(level1, level2);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      
      wall0.setYEnd(1136.5819F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(1136.5819F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1640.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(316.35275F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1640.4583F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(1136.5819F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1640.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(316.35275F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1640.4583F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(1136.5819F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1640.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(316.35275F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1640.4583F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(1136.5819F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1640.4583F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(316.35275F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1640.4583F, wall0.getLength(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1135.3F), (-1.0F), 64.2154F);
      assertNotNull(wall0);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-3942.5F));
      assertEquals((-3942.5F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setLeftSideShininess(496.68F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = Float.max(64.2154F, 3410.89F);
      assertEquals(3410.89F, float1, 0.01F);
      
      wall0.setHeight(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setLevel((Level) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float2 = wall0.getHeight();
      assertEquals((-3942.5F), (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      Integer integer0 = new Integer(94);
      assertEquals(94, (int)integer0);
      assertNotNull(integer0);
      
      wall1.setRightSideColor(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-567.65F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1135.3005F, wall0.getLength(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer1 = new Integer(94);
      assertEquals(94, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Integer integer2 = Integer.getInteger("g@\"d-+o");
      assertNull(integer2);
      
      wall1.setRightSideColor(integer1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer3 = wall1.getRightSideColor();
      assertEquals(94, (int)integer3);
      assertNotNull(integer3);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      int int0 = Integer.sum(94, (-4132));
      assertEquals((-4038), int0);
      
      wall1.setLeftSideColor(integer3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(integer3.equals((Object)int0));
      assertTrue(integer3.equals((Object)integer0));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(94, (int)wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Integer integer4 = wall0.getRightSideColor();
      assertNull(integer4);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float3 = wall1.getLength();
      assertEquals(1135.3005F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float3, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertEquals((-0.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1135.3F), wall1.getXEnd(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1135.3005F, wall1.getLength(), 0.01F);
      assertEquals((-3942.5F), wall1.getHeight(), 0.01F);
      assertEquals((-567.65F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(94, (int)wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(64.2154F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(94, (int)wall1.getLeftSideColor());
      assertEquals(496.68F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1135.3005F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float4 = wall0.getLength();
      assertEquals(2249060.5F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float5 = wall0.getStartPointToEndPointDistance();
      assertEquals(1135.3005F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(64.2154F, wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1135.3005F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(496.68F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2249060.5F, wall0.getLength(), 0.01F);
      assertEquals((-1135.3F), wall0.getXEnd(), 0.01F);
      assertEquals((-567.6999F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(56.10532F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3942.5F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3942.5F), wall0.getArcExtent(), 0.01F);
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall((-2390.983F), (float) float2, (float) float2, 0.1F, (-1173.319F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-2390.983F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2391.083F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2391.083F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1195.4414F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.9F, wall1.getLength(), 0.01F);
      assertEquals(0.9F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((float) float2);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), (-2390.983F), (-2390.983F));
      assertFalse(boolean0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = wall0.containsWallEndAt(0.1F, 2877.6946F, (-785.648F));
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(3772.73F, 419.4933F, (-2478.0F), 3772.73F, (-3797.43F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7093.3647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(419.4933F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7093.3647F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2096.1116F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3797.43F), wall0.getThickness(), 0.01F);
      assertEquals(3772.73F, wall0.getXStart(), 0.01F);
      assertEquals(647.365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3772.73F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2478.0F), wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getHeightAtEnd();
      assertNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7093.3647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(419.4933F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7093.3647F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2096.1116F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3797.43F), wall0.getThickness(), 0.01F);
      assertEquals(3772.73F, wall0.getXStart(), 0.01F);
      assertEquals(647.365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3772.73F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2478.0F), wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getThickness();
      assertEquals((-3797.43F), float1, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(7093.3647F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(419.4933F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(7093.3647F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2096.1116F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3797.43F), wall0.getThickness(), 0.01F);
      assertEquals(3772.73F, wall0.getXStart(), 0.01F);
      assertEquals(647.365F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3772.73F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2478.0F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall(0.1F, 181.0F, 181.0F, 965.1401F, 181.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(90.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(804.73627F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(181.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(965.1401F, wall1.getYEnd(), 0.01F);
      assertEquals(181.0F, wall1.getYStart(), 0.01F);
      assertEquals(804.73627F, wall1.getLength(), 0.01F);
      assertEquals(573.07007F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      
      Level level0 = new Level("com.eteks.sweethome3d.model.BackgroundImage", (-569.42F), (-177.8257F), (-2260.07F));
      assertNotNull(level0);
      assertEquals((-2260.07F), level0.getHeight(), 0.01F);
      assertEquals((-569.42F), level0.getElevation(), 0.01F);
      assertEquals((-177.8257F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level0.getName());
      
      wall0.setLevel(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2260.07F), level0.getHeight(), 0.01F);
      assertEquals((-569.42F), level0.getElevation(), 0.01F);
      assertEquals((-177.8257F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("com.eteks.sweethome3d.model.BackgroundImage", level0.getName());
      assertNotSame(wall0, wall1);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(90.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(804.73627F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(181.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(965.1401F, wall1.getYEnd(), 0.01F);
      assertEquals(181.0F, wall1.getYStart(), 0.01F);
      assertEquals(804.73627F, wall1.getLength(), 0.01F);
      assertEquals(573.07007F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
      
      Level level1 = new Level("2!O", 3328.8772F, 629.7397F, 1.0F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals(3328.8772F, level1.getElevation(), 0.01F);
      assertEquals(629.7397F, level1.getFloorThickness(), 0.01F);
      assertEquals(1.0F, level1.getHeight(), 0.01F);
      assertEquals("2!O", level1.getName());
      assertTrue(level1.isVisible());
      
      Level level2 = new Level("", (-569.42F), 965.1401F, (-177.8257F));
      assertNotNull(level2);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("", level2.getName());
      assertEquals(965.1401F, level2.getFloorThickness(), 0.01F);
      assertEquals((-177.8257F), level2.getHeight(), 0.01F);
      assertEquals((-569.42F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("2!O", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("2!O", propertyChangeListenerProxy0.getPropertyName());
      
      level2.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals("", level2.getName());
      assertEquals(965.1401F, level2.getFloorThickness(), 0.01F);
      assertEquals((-177.8257F), level2.getHeight(), 0.01F);
      assertEquals((-569.42F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("2!O", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level2.equals((Object)level1));
      assertFalse(level2.equals((Object)level0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals("", level2.getName());
      assertEquals(965.1401F, level2.getFloorThickness(), 0.01F);
      assertEquals((-177.8257F), level2.getHeight(), 0.01F);
      assertEquals((-569.42F), level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertNotSame(wall0, wall1);
      assertNotSame(level2, level1);
      assertNotSame(level2, level0);
      
      Float float0 = wall1.getArcExtent();
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(90.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(804.73627F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(181.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(965.1401F, wall1.getYEnd(), 0.01F);
      assertEquals(181.0F, wall1.getYStart(), 0.01F);
      assertEquals(804.73627F, wall1.getLength(), 0.01F);
      assertEquals(573.07007F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(2171.7);
      assertEquals(2171.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(0.1F, 0.0F, (-330.4F), 1.0F, 0, (-785.648F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.74805F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.74805F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart((-330.4F));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint((-1.0F), 1418.8771F, (-785.648F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-165.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(852.4261F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(852.4261F, wall0.getLength(), 0.01F);
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray1 = wall1.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals(330.5015F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(330.5015F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-330.4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-165.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 318.124F, 0.1F, 0.1F, 0.1F, (-2444.4512F));
      assertNotNull(wall0);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      wall0.setThickness(815.0F);
      assertEquals(318.02527F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.55F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(318.02527F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setXEnd(815.0F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(815.0F, wall0.getThickness(), 0.01F);
      assertEquals((-2444.4512F), wall0.getHeight(), 0.01F);
      assertEquals(408.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(318.124F, wall0.getYStart(), 0.01F);
      assertEquals(815.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(873.9195F, wall0.getLength(), 0.01F);
      assertEquals(159.112F, wall0.getYArcCircleCenter(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("'<Ka\"{~L!:miZTxs}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.'<Ka\"{~L!:miZTxs}
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setThickness(671.75867F);
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float4 = wall0.getRightSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float2, 0.01F);
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall((-785.648F), (-27.04416F), 1747.4242F, (-1173.319F), 0.1F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(2780.3599F, wall1.getLength(), 0.01F);
      assertEquals(480.8881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2780.3599F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(2780.3599F, wall1.getLength(), 0.01F);
      assertEquals(480.8881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2780.3599F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getXStart(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(2780.3599F, wall1.getLength(), 0.01F);
      assertEquals(480.8881F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(2780.3599F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(328.2F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1037.8121F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(328.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1824.32F, wall1.getLength(), 0.01F);
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1824.32F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall0.containsPoint(0.1F, (-1173.319F), 0.1F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(671.75867F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1824.32F, wall2.getLength(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getArcExtent());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertEquals(328.2F, wall2.getXStart(), 0.01F);
      assertEquals(1747.4242F, wall2.getXEnd(), 0.01F);
      assertEquals(1037.8121F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(1824.32F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-27.04416F), wall2.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getYEnd(), 0.01F);
      assertEquals((-600.1816F), wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1037.8121F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(328.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1824.32F, wall1.getLength(), 0.01F);
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1824.32F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
      
      float float5 = wall1.getLength();
      assertEquals(1824.32F, float5, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(1037.8121F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-27.04416F), wall1.getYStart(), 0.01F);
      assertEquals(328.2F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1824.32F, wall1.getLength(), 0.01F);
      assertEquals(1747.4242F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1173.319F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-600.1816F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1824.32F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart((Wall) null);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-27.04416F), (-785.648F), 0.0F, (-27.04416F), (-1173.319F), (-27.04416F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-27.04416F), wall1.getYEnd(), 0.01F);
      assertEquals(759.08575F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals((-27.04416F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-785.648F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-27.04416F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(759.08575F, wall1.getLength(), 0.01F);
      assertEquals((-13.52208F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-406.3461F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-27.04416F), wall1.getYEnd(), 0.01F);
      assertEquals(759.08575F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1173.319F), wall1.getThickness(), 0.01F);
      assertEquals((-27.04416F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-785.648F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-27.04416F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(759.08575F, wall1.getLength(), 0.01F);
      assertEquals((-13.52208F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-406.3461F), wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(1.0F, 1923.0F, (-590.0F), 1923.0F, 0.0F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-294.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(591.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(591.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-294.5F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(591.0F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(591.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall2.setXStart((-1173.319F));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals(583.319F, wall2.getLength(), 0.01F);
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-881.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(583.319F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall0.containsPoint((-785.648F), (-816.2F), (-423.8133F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertEquals(1923.0F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(583.319F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getHeight());
      assertEquals((-590.0F), wall3.getXEnd(), 0.01F);
      assertEquals(1923.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-881.6595F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall3.getXStart(), 0.01F);
      assertEquals(583.319F, wall3.getLength(), 0.01F);
      assertEquals(1923.0F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      Float float3 = wall2.getArcExtent();
      assertNull(float3);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals(583.319F, wall2.getLength(), 0.01F);
      assertEquals(1923.0F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1923.0F, wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-590.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-881.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(583.319F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(1923.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall3);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      wall0.setRightSideShininess(1.0F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      
      float float4 = wall0.getLength();
      assertEquals(785.748F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      assertNotNull(wall0);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Float float1 = new Float((double) (-1306.1F));
      assertEquals((-1306.1F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      boolean boolean0 = Float.isFinite((-2857.3848F));
      assertTrue(boolean0);
      
      wall0.setHeightAtEnd(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      boolean boolean1 = wall0.isTrapezoidal();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getYStart();
      assertEquals(1355.83F, float2, 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(1355.83F, float3, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-2368.0918F), 0.0F, 0.0F, 0.1F, (-423.8133F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(1.0049876F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(1.0049876F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), 1.0F, (-2368.0918F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      Float float3 = wall0.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall1.setRightSideShininess(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      boolean boolean1 = wall2.containsWallStartAt(0.0F, (-423.8133F), (-1143.127F));
      assertFalse(boolean1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float float4 = wall2.getLength();
      assertEquals(785.748F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getLeftSideColor());
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), (-1401.8195F), (-1.0F), (-1.0F), (-1401.8195F), (-1401.8195F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Integer integer0 = Integer.valueOf((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      Wall wall0 = new Wall((-803.746F), 3.668F, (-1), (-3155.031F), 0.59040546F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Integer integer1 = wall0.getRightSideColor();
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-1), (int)wall0.getRightSideColor());
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Integer integer2 = new Integer((-1430));
      assertEquals((-1430), (int)integer2);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      
      Integer integer3 = Integer.getInteger("__6=`d:", integer2);
      assertEquals((-1430), (int)integer3);
      assertNotNull(integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      
      wall0.setRightSideColor(integer3);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1430), (int)wall0.getRightSideColor());
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      Integer integer4 = Integer.valueOf((-1430));
      assertEquals((-1430), (int)integer4);
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      
      wall0.setLeftSideColor(integer4);
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertTrue(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)integer3));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals((-1430), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1430), (int)wall0.getRightSideColor());
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideColor(integer2);
      assertTrue(integer2.equals((Object)integer4));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals((-1430), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1430), (int)wall0.getRightSideColor());
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals((-1575.6815F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3259.1074F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3.668F, wall0.getYStart(), 0.01F);
      assertEquals((-803.746F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3259.1074F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-402.373F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.59040546F, wall0.getThickness(), 0.01F);
      assertEquals((-1430), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1430), (int)wall0.getRightSideColor());
      assertEquals((-3155.031F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, (-1.0F), 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      
      Float float0 = new Float((double) (-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.1472063F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.1067683F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(1.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.1472063F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.45F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getYStart(), 0.01F);
      assertEquals(1.1067683F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getArcExtent(), 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setYEnd((-2837.3057F));
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.0F, 1.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(1.0F, 0.01F, 0.0F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Float float2 = wall0.getArcExtent();
      assertNull(float2);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture1 = wall0.getLeftSideTexture();
      assertNull(homeTexture1);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      boolean boolean2 = wall0.containsWallStartAt(0.0F, 53.0582F, 754.303F);
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(2838.306F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 0.0F, 0.0F, 3.6680827F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = new Level("q0mPc+fEsm8bZlEr8", 3381.2317F, 181.0F, 3.6680827F);
      assertNotNull(level0);
      assertEquals(3.6680827F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3381.2317F, level0.getElevation(), 0.01F);
      assertEquals("q0mPc+fEsm8bZlEr8", level0.getName());
      assertEquals(181.0F, level0.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3.6680827F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3381.2317F, level0.getElevation(), 0.01F);
      assertEquals("q0mPc+fEsm8bZlEr8", level0.getName());
      assertEquals(181.0F, level0.getFloorThickness(), 0.01F);
      
      Wall wall1 = new Wall(4.9249535F, 4, 4.9249535F, 3381.2317F, 181.0F, 0.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3377.2317F, wall1.getLength(), 0.01F);
      assertEquals(1692.6158F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.0F, wall1.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3377.2317F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4.9249535F, wall1.getXEnd(), 0.01F);
      assertEquals(3381.2317F, wall1.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall1.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3377.2317F, wall1.getLength(), 0.01F);
      assertEquals(1692.6158F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.0F, wall1.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3377.2317F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4.9249535F, wall1.getXEnd(), 0.01F);
      assertEquals(3381.2317F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Level level1 = new Level("com.eteks.sweethome3d.model.CatalogTexture", 3328.8772F, (-740.73F), 3328.8772F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals((-740.73F), level1.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogTexture", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals(3328.8772F, level1.getHeight(), 0.01F);
      assertEquals(3328.8772F, level1.getElevation(), 0.01F);
      
      Level level2 = new Level("2!O", 181.0F, 1.0F, 1.0F);
      assertNotNull(level2);
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals(181.0F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("2!O", level2.getName());
      assertEquals(1.0F, level2.getHeight(), 0.01F);
      assertEquals(1.0F, level2.getFloorThickness(), 0.01F);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("q0mPc+fEsm8bZlEr8", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("q0mPc+fEsm8bZlEr8", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("", propertyChangeListenerProxy0);
      assertNotNull(propertyChangeListenerProxy1);
      assertFalse(propertyChangeListenerProxy1.equals((Object)propertyChangeListenerProxy0));
      assertEquals("q0mPc+fEsm8bZlEr8", propertyChangeListenerProxy0.getPropertyName());
      assertEquals("", propertyChangeListenerProxy1.getPropertyName());
      
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertFalse(level0.equals((Object)level2));
      assertFalse(level0.equals((Object)level1));
      assertFalse(propertyChangeListenerProxy0.equals((Object)propertyChangeListenerProxy1));
      assertEquals(3.6680827F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3381.2317F, level0.getElevation(), 0.01F);
      assertEquals("q0mPc+fEsm8bZlEr8", level0.getName());
      assertEquals(181.0F, level0.getFloorThickness(), 0.01F);
      assertEquals("q0mPc+fEsm8bZlEr8", propertyChangeListenerProxy0.getPropertyName());
      assertNotSame(level0, level2);
      assertNotSame(level0, level1);
      assertNotSame(propertyChangeListenerProxy0, propertyChangeListenerProxy1);
      
      boolean boolean0 = wall0.isAtLevel(level2);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(level2.equals((Object)level0));
      assertFalse(level2.equals((Object)level1));
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.8340414F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(5.1874523F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.6680827F, wall0.getThickness(), 0.01F);
      assertEquals(3.6680827F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.8340414F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5.1874523F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.6680827F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(181.0F, level2.getElevation(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("2!O", level2.getName());
      assertEquals(1.0F, level2.getHeight(), 0.01F);
      assertEquals(1.0F, level2.getFloorThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(level2, level0);
      assertNotSame(level2, level1);
      
      Float float0 = wall1.getArcExtent();
      assertNull(float0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3377.2317F, wall1.getLength(), 0.01F);
      assertEquals(1692.6158F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(4.0F, wall1.getYStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXStart(), 0.01F);
      assertEquals(4.9249535F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(181.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(3377.2317F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(4.9249535F, wall1.getXEnd(), 0.01F);
      assertEquals(3381.2317F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(1994.254F, 1.0F, 1994.254F, 357.04266F, 1994.254F, 1980.6674F);
      assertNotNull(wall0);
      assertEquals(1994.254F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(179.02133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(356.04266F, wall0.getLength(), 0.01F);
      assertEquals(1980.6674F, wall0.getHeight(), 0.01F);
      assertEquals(1994.254F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1994.254F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(357.04266F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1994.254F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(356.04266F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float(1.0F);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.sum(0.01F, 0.0F);
      assertEquals(0.01F, float1, 0.01F);
      
      wall0.setXEnd(1.0F);
      assertEquals(179.02133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(997.627F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2024.8032F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1980.6674F, wall0.getHeight(), 0.01F);
      assertEquals(1994.254F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1994.254F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2024.8032F, wall0.getLength(), 0.01F);
      assertEquals(357.04266F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals(179.02133F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(997.627F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2024.8032F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1980.6674F, wall0.getHeight(), 0.01F);
      assertEquals(1994.254F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1994.254F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2024.8032F, wall0.getLength(), 0.01F);
      assertEquals(357.04266F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall0.setXStart(1.0F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      boolean boolean1 = wall0.containsPoint((-423.8133F), 767.0205F, (-423.8133F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNotNull(wall1);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Integer integer1 = wall1.getLeftSideColor();
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.5F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.4142135F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.4142135F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      
      Wall wall2 = new Wall((-816.2F), (-705.0F), 1.0F, 1355.83F, 767.0205F, 2295.28F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertNotNull(wall3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2216.9429F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(325.41498F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall3.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall3.getYStart(), 0.01F);
      assertEquals(767.0205F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-407.6F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-816.2F), wall3.getXStart(), 0.01F);
      assertEquals(2216.9429F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall3.getXEnd(), 0.01F);
      assertEquals(2295.28F, wall3.getHeight(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      Float float0 = wall3.getArcExtent();
      assertNull(float0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2216.9429F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(325.41498F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall3.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall3.getYStart(), 0.01F);
      assertEquals(767.0205F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-407.6F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals((-816.2F), wall3.getXStart(), 0.01F);
      assertEquals(2216.9429F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall3.getXEnd(), 0.01F);
      assertEquals(2295.28F, wall3.getHeight(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      HomeTexture homeTexture1 = wall2.getLeftSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      
      Wall wall4 = wall2.clone();
      assertNotNull(wall4);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall2));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals((-407.6F), wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.0F, wall4.getRightSideShininess(), 0.01F);
      assertEquals(2216.9429F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2216.9429F, wall4.getLength(), 0.01F);
      assertEquals(2295.28F, wall4.getHeight(), 0.01F);
      assertEquals(767.0205F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals((-705.0F), wall4.getYStart(), 0.01F);
      assertEquals(1.0F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getLeftSideColor());
      assertEquals((-816.2F), wall4.getXStart(), 0.01F);
      assertEquals(325.41498F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall4.getYEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall2);
      
      wall4.setRightSideShininess((-2837.3057F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall2));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals((-2837.3057F), wall4.getRightSideShininess(), 0.01F);
      assertEquals((-407.6F), wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(2216.9429F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2216.9429F, wall4.getLength(), 0.01F);
      assertEquals(2295.28F, wall4.getHeight(), 0.01F);
      assertEquals(767.0205F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals((-705.0F), wall4.getYStart(), 0.01F);
      assertEquals(1.0F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getLeftSideColor());
      assertEquals((-816.2F), wall4.getXStart(), 0.01F);
      assertEquals(325.41498F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall4.getYEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall2);
      
      float float1 = wall4.getLength();
      assertEquals(2216.9429F, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall2));
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-407.6F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2216.9429F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2295.28F, wall2.getHeight(), 0.01F);
      assertEquals(767.0205F, wall2.getThickness(), 0.01F);
      assertEquals((-816.2F), wall2.getXStart(), 0.01F);
      assertEquals(325.41498F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2216.9429F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1355.83F, wall2.getYEnd(), 0.01F);
      assertEquals((-705.0F), wall2.getYStart(), 0.01F);
      assertEquals(1.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertEquals((-2837.3057F), wall4.getRightSideShininess(), 0.01F);
      assertEquals((-407.6F), wall4.getXArcCircleCenter(), 0.01F);
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(2216.9429F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2216.9429F, wall4.getLength(), 0.01F);
      assertEquals(2295.28F, wall4.getHeight(), 0.01F);
      assertEquals(767.0205F, wall4.getThickness(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals((-705.0F), wall4.getYStart(), 0.01F);
      assertEquals(1.0F, wall4.getXEnd(), 0.01F);
      assertFalse(wall4.isTrapezoidal());
      assertNull(wall4.getLeftSideColor());
      assertEquals((-816.2F), wall4.getXStart(), 0.01F);
      assertEquals(325.41498F, wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall4.getYEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall3);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      assertNotNull(wall0);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      
      float float0 = Float.max((-1306.1F), (-1306.1F));
      assertEquals((-1306.1F), float0, 0.01F);
      
      Float float1 = new Float((-1.07219F));
      assertEquals((-1.07219F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(214.81616F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1423.0192F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(214.81616F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1423.0192F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(214.81616F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1423.0192F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(1423.0192F, float3, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals(214.81616F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-1.07219F), wall0.getArcExtent(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1423.0192F, wall0.getLength(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, (-11.163085F));
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.163085F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-11.163085F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Level level0 = new Level("", 16.40855F, 1564.4342F, 0.1F);
      assertNotNull(level0);
      assertEquals(1564.4342F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(16.40855F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      
      wall0.setLevel(level0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(16.40855F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      
      Level level1 = new Level("JU,W_]Q", (-3101.258F), (-785.648F), (-785.648F));
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertEquals((-785.648F), level1.getFloorThickness(), 0.01F);
      assertEquals("JU,W_]Q", level1.getName());
      assertEquals((-785.648F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-3101.258F), level1.getElevation(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertTrue(boolean0);
      assertFalse(level0.equals((Object)level1));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, level0.getFloorThickness(), 0.01F);
      assertEquals(0.1F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(16.40855F, level0.getElevation(), 0.01F);
      assertEquals("", level0.getName());
      assertNotSame(level0, level1);
      
      boolean boolean1 = wall0.isAtLevel((Level) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(890.2417F, (-0.5F), (-0.5F), (-1.0207154F), 2221.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(890.2417F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertEquals(890.7418F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(444.87085F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(890.7418F, wall0.getLength(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals(444.87085F, float0, 0.01F);
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(890.2417F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertEquals(890.7418F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(444.87085F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(890.7418F, wall0.getLength(), 0.01F);
      
      Float float1 = new Float(0.01F);
      assertEquals(0.01F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall(444.87085F, 2221.0F, (-1.0207154F), (-1.0207154F), 383.33673F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(444.87085F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(383.33673F, wall1.getThickness(), 0.01F);
      assertEquals(221.92506F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1109.9896F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0207154F), wall1.getYEnd(), 0.01F);
      assertEquals(2266.3176F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0207154F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2266.3176F, wall1.getLength(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(890.2417F, wall0.getXStart(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertEquals(890.7418F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(444.87085F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(890.7418F, wall0.getLength(), 0.01F);
      assertEquals(444.87085F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(383.33673F, wall1.getThickness(), 0.01F);
      assertEquals(221.92506F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1109.9896F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0207154F), wall1.getYEnd(), 0.01F);
      assertEquals(2266.3176F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0207154F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2266.3176F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(1.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5878112F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5878112F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5878112F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5878112F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(444.87085F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(383.33673F, wall1.getThickness(), 0.01F);
      assertEquals(221.92506F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1109.9896F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0207154F), wall1.getYEnd(), 0.01F);
      assertEquals(2266.3176F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0207154F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2266.3176F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5878112F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5878112F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(444.87085F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(383.33673F, wall1.getThickness(), 0.01F);
      assertEquals(221.92506F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1109.9896F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0207154F), wall1.getYEnd(), 0.01F);
      assertEquals(2266.3176F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0207154F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2266.3176F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(444.87085F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(383.33673F, wall1.getThickness(), 0.01F);
      assertEquals(221.92506F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1109.9896F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0207154F), wall1.getYEnd(), 0.01F);
      assertEquals(2266.3176F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0207154F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2266.3176F, wall1.getLength(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      Float float2 = wall0.getHeight();
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-0.7603577F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.5878112F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.25F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.5F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.5878112F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0207154F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals((-0.5F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1172.802F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float2 = new Float(0.1F);
      assertEquals(0.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      
      Wall wall1 = new Wall(0.1F, (float) float2, (float) float2, 0.1F, (-1172.802F));
      assertNotNull(wall1);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((float) float2);
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float2, (float)float0, 0.01F);
      assertEquals((float)float2, (float)float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      wall0.setWallAtStart(wall2);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), 2.0F, (-1.0F), (-1.0F), (-1401.8195F), (-1401.8195F));
      assertNotNull(wall0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall(2.0F, (-1.0F), (-1.0F), (-1.0F), (-1.0F), 2.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals(1400.8226F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals(3.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.0F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals(2.0F, wall1.getHeight(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1.0F), wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall(0.0012970156F, (-503.8764F), 2675.7F, (-503.8764F), (-1.0F));
      assertNotNull(wall0);
      assertEquals(2675.6987F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1337.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2675.6987F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0012970156F, wall0.getXStart(), 0.01F);
      assertEquals(2675.7F, wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((-6174.694));
      assertEquals((-6174.694F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(698.5583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.1107054E7F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1337.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6174.694F), wall0.getArcExtent(), 0.01F);
      assertEquals(2675.6987F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0012970156F, wall0.getXStart(), 0.01F);
      assertEquals(2675.7F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer(69);
      assertEquals(69, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setRightSideColor(integer0);
      assertEquals(698.5583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.1107054E7F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1337.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(69, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6174.694F), wall0.getArcExtent(), 0.01F);
      assertEquals(2675.6987F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0012970156F, wall0.getXStart(), 0.01F);
      assertEquals(2675.7F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideColor(integer0);
      assertEquals(698.5583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.1107054E7F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1337.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(69, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6174.694F), wall0.getArcExtent(), 0.01F);
      assertEquals(2675.6987F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0012970156F, wall0.getXStart(), 0.01F);
      assertEquals(2675.7F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getStartPointToEndPointDistance();
      assertEquals(2675.6987F, float1, 0.01F);
      assertEquals(698.5583F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.1107054E7F, wall0.getLength(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(1337.8506F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(69, (int)wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-6174.694F), wall0.getArcExtent(), 0.01F);
      assertEquals(2675.6987F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0012970156F, wall0.getXStart(), 0.01F);
      assertEquals(2675.7F, wall0.getXEnd(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("GwE0OZE</c=");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.GwE0OZE</c=
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall((-1369.0F), 1355.83F, 1810.6057F, 318.124F, 1520.3889F, 1810.6057F);
      assertNotNull(wall0);
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertEquals(1520.3889F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertEquals(1520.3889F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3344.6562F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(3344.6562F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall1.getXStart(), 0.01F);
      assertEquals(220.80286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(4364.85F, 1508.1437F, 1508.1437F, 1520.3889F, 0.0F, (-2050.978F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      
      Wall wall3 = wall2.clone();
      assertNotNull(wall3);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      float float0 = wall3.getThickness();
      assertEquals(0.0F, float0, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall0.setThickness(1508.1437F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      
      float float1 = wall3.getXArcCircleCenter();
      assertEquals(2936.4968F, float1, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      float float2 = wall2.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3344.6562F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(3344.6562F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall1.getXStart(), 0.01F);
      assertEquals(220.80286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      wall1.setWallAtEnd(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3344.6562F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(3344.6562F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall1.getXStart(), 0.01F);
      assertEquals(220.80286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      wall1.setXStart(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2086.894F, wall1.getLength(), 0.01F);
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(905.30286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(2086.894F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      boolean boolean0 = wall1.containsPoint(1355.83F, 946.5369F, (-2095.246F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2086.894F, wall1.getLength(), 0.01F);
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(905.30286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(2086.894F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      HomeTexture homeTexture0 = wall3.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      wall3.setLeftSideTexture((HomeTexture) null);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      Wall wall4 = wall3.getWallAtEnd();
      assertNull(wall4);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      
      Float float3 = wall1.getArcExtent();
      assertNull(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(1810.6057F, wall0.getHeight(), 0.01F);
      assertEquals(3344.6562F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1369.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(836.977F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3344.6562F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1508.1437F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(318.124F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall0.getXEnd(), 0.01F);
      assertEquals(220.80286F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2086.894F, wall1.getLength(), 0.01F);
      assertEquals(1520.3889F, wall1.getThickness(), 0.01F);
      assertEquals(905.30286F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1810.6057F, wall1.getHeight(), 0.01F);
      assertEquals(318.124F, wall1.getYEnd(), 0.01F);
      assertEquals(2086.894F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1810.6057F, wall1.getXEnd(), 0.01F);
      assertEquals(836.977F, wall1.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      HomeTexture homeTexture1 = wall2.getLeftSideTexture();
      assertNull(homeTexture1);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      wall3.setRightSideShininess((-423.8133F));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2936.4968F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall3.getYArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getArcExtent());
      assertEquals((-423.8133F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(2856.7327F, wall3.getLength(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      
      float float4 = wall2.getLength();
      assertEquals(2856.7327F, float4, 0.01F);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      
      Float float5 = new Float((-1920.9));
      assertEquals((-1920.9F), (float)float5, 0.01F);
      assertNotNull(float5);
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      
      wall3.setArcExtent(float5);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotEquals((float)float5, (float)float0, 0.01F);
      assertNotEquals((float)float5, (float)float1, 0.01F);
      assertNotEquals((float)float5, (float)float2, 0.01F);
      assertNotEquals((float)float5, (float)float4, 0.01F);
      assertEquals(0.0F, wall2.getThickness(), 0.01F);
      assertEquals(2856.7327F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2936.4968F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2856.7327F, wall2.getLength(), 0.01F);
      assertEquals(4364.85F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1520.3889F, wall2.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1514.2664F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-2050.978F), wall2.getHeight(), 0.01F);
      assertEquals(1508.1437F, wall2.getXEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getXEnd(), 0.01F);
      assertEquals(327.07083F, wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(2931.408F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(2856.7327F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(3567753.0F, wall3.getLength(), 0.01F);
      assertEquals((-2050.978F), wall3.getHeight(), 0.01F);
      assertEquals(4364.85F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1520.3889F, wall3.getYEnd(), 0.01F);
      assertEquals(1508.1437F, wall3.getYStart(), 0.01F);
      assertEquals((-1920.9F), wall3.getArcExtent(), 0.01F);
      assertNull(wall3.getRightSideColor());
      assertEquals((-423.8133F), wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall1);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1868.0F), 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1868.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1868.0F, wall0.getLength(), 0.01F);
      assertEquals((-934.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1868.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1868.0F, wall0.getLength(), 0.01F);
      assertEquals((-934.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1868.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1868.0F, wall0.getLength(), 0.01F);
      assertEquals((-934.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setYEnd((-1.0F));
      assertNull(wall0.getRightSideColor());
      assertEquals(1867.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1867.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-934.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1867.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1867.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-934.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1867.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1867.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-934.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart(0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1867.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1867.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-934.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getLength();
      assertEquals(1867.0F, float0, 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(1867.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1868.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1867.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-934.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      String string0 = ",kC~s`j)Kj]h";
      // Undeclared exception!
      try { 
        Wall.Property.valueOf(",kC~s`j)Kj]h");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.,kC~s`j)Kj]h
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall((-2368.0918F), 0.0F, 0.0F, 0.1F, (-423.81F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-423.81F), wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-423.81F), wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-423.81F), wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setXStart(0.1F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = new Wall(0.0F, 0.1F, (-1173.319F), (-456.9298F), (-785.648F), 0.0F);
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(1259.1877F, wall2.getLength(), 0.01F);
      assertEquals((-228.4149F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-456.9298F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1173.319F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1259.1877F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-586.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-423.81F), wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-423.81F), wall1.getThickness(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall2.containsWallEndAt((-3189.7F), 0.0F, (-2368.0918F));
      assertFalse(boolean0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(1259.1877F, wall2.getLength(), 0.01F);
      assertEquals((-228.4149F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-456.9298F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1173.319F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(1259.1877F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-586.6595F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setRightSideShininess((-1.4874175F));
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setYEnd((-1.4874175F));
      assertEquals((-0.24370873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.680904F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.4874175F), wall0.getYEnd(), 0.01F);
      assertEquals(2.680904F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals((-0.24370873F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.680904F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.4874175F), wall0.getYEnd(), 0.01F);
      assertEquals(2.680904F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      wall0.setYEnd((-2837.3057F));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      
      Float float0 = new Float((-1.4874175F));
      assertEquals((-1.4874175F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer1 = new Integer((-16));
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      Wall wall1 = new Wall(1.0F, 1988.0F, 1468.0F, 0.0F, 1468.0F, (-2837.3057F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertEquals(734.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1988.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2470.6746F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1468.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2837.3057F), wall1.getHeight(), 0.01F);
      assertEquals(2470.6746F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1468.0F, wall1.getXEnd(), 0.01F);
      assertEquals(994.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(734.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1988.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2470.6746F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1468.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2837.3057F), wall1.getHeight(), 0.01F);
      assertEquals(2470.6746F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1468.0F, wall1.getXEnd(), 0.01F);
      assertEquals(994.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2837.3057F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(2470.6746F, wall2.getLength(), 0.01F);
      assertEquals(734.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1468.0F, wall2.getThickness(), 0.01F);
      assertEquals(1988.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(994.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1468.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2470.6746F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean0 = wall2.containsWallEndAt(1.0F, (-1928.0209F), (-1928.0209F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2837.3057F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getRightSideColor());
      assertEquals(2470.6746F, wall2.getLength(), 0.01F);
      assertEquals(734.5F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1468.0F, wall2.getThickness(), 0.01F);
      assertEquals(1988.0F, wall2.getYStart(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(994.0F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1468.0F, wall2.getXEnd(), 0.01F);
      assertEquals(2470.6746F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      
      boolean boolean1 = wall0.containsWallEndAt((-1928.0209F), 1468.0F, (-1873.0F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.4874175F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Wall wall0 = new Wall(3724.0F, 2.0F, 3724.0F, 3724.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3724.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3724.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3722.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1863.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3722.0F, wall0.getLength(), 0.01F);
      assertEquals(3724.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(2.0F, wall0.getYStart(), 0.01F);
      assertEquals(3724.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYStart(1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3724.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1862.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3724.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3723.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3724.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(3723.0F, wall0.getLength(), 0.01F);
      assertEquals(3724.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd(1.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3724.0F, wall0.getXStart(), 0.01F);
      assertEquals(5265.117F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1862.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5265.117F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNull(wall1);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3724.0F, wall0.getXStart(), 0.01F);
      assertEquals(5265.117F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1862.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1862.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(5265.117F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3724.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      
      wall0.setLeftSideShininess(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1246.8168F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2493.6335F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2493.6335F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2493.6335F), wall0.getXEnd(), 0.01F);
      
      wall0.setXEnd(0.0F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(669.935F, 0.0F);
      assertEquals(669.935F, float1, 0.01F);
      
      float float2 = Float.max(669.935F, 3604.54F);
      assertEquals(3604.54F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt(2554.0F, (-2493.6335F), 2711.9F);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float3 = Float.max(0.0F, (-2493.6335F));
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      
      float float4 = Float.max(1.0F, 1291.06F);
      assertEquals(1291.06F, float4, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      
      wall0.setHeight(float0);
      assertNotEquals((float)float0, (float)float4, 0.01F);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotEquals((float)float0, (float)float2, 0.01F);
      assertEquals((float)float0, (float)float3, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float5 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(float5, float3, 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Integer integer1 = wall0.getRightSideColor();
      assertNull(integer1);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(2503918.7186677754);
      assertEquals(2503918.8F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1.225138E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3.9234703F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2.9234703F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2503918.8F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart((-1.0F));
      assertEquals(1.225138E7F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2.9234703F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3.9234703F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2503918.8F, wall0.getArcExtent(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      wall0.setXStart((-102.9162F));
      assertEquals((-102.9162F), wall0.getXStart(), 0.01F);
      assertEquals((-48.03463F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(102.92106F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(352.8305F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2503918.8F, wall0.getArcExtent(), 0.01F);
      assertEquals(8.9160851E8F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      // Undeclared exception!
      wall0.containsWallEndAt(1027.8633F, (-1.4874175F), (-1396.77F));
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Wall wall0 = new Wall(22.713877F, 1564.4342F, 22.713877F, 1564.4342F, 1564.4342F, (-726.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1564.4342F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYStart(), 0.01F);
      assertEquals((-726.0F), wall0.getHeight(), 0.01F);
      
      Wall wall1 = new Wall(1093.5203F, 966.1964F, 966.1964F, 1564.4342F, 22.713877F, 1564.4342F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1564.4342F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(966.1964F, wall1.getYStart(), 0.01F);
      assertEquals(611.637F, wall1.getLength(), 0.01F);
      assertEquals(1093.5203F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall1.getHeight(), 0.01F);
      assertEquals(1265.3153F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(611.637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(966.1964F, wall1.getXEnd(), 0.01F);
      assertEquals(1029.8584F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall0.setYEnd(966.1964F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(598.2378F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(966.1964F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1265.3153F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYStart(), 0.01F);
      assertEquals(598.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-726.0F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(598.2378F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(966.1964F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1265.3153F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYStart(), 0.01F);
      assertEquals(598.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-726.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1564.4342F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(966.1964F, wall1.getYStart(), 0.01F);
      assertEquals(611.637F, wall1.getLength(), 0.01F);
      assertEquals(1093.5203F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall1.getHeight(), 0.01F);
      assertEquals(1265.3153F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(611.637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(966.1964F, wall1.getXEnd(), 0.01F);
      assertEquals(1029.8584F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(598.2378F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(966.1964F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1265.3153F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYStart(), 0.01F);
      assertEquals(598.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-726.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(22.713877F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1564.4342F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(966.1964F, wall1.getYStart(), 0.01F);
      assertEquals(611.637F, wall1.getLength(), 0.01F);
      assertEquals(1093.5203F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall1.getHeight(), 0.01F);
      assertEquals(1265.3153F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(611.637F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(966.1964F, wall1.getXEnd(), 0.01F);
      assertEquals(1029.8584F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(598.2378F, wall0.getLength(), 0.01F);
      assertEquals(22.713877F, wall0.getXStart(), 0.01F);
      assertEquals(966.1964F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(22.713877F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1265.3153F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(22.713877F, wall0.getXEnd(), 0.01F);
      assertEquals(1564.4342F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1564.4342F, wall0.getYStart(), 0.01F);
      assertEquals(598.2378F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-726.0F), wall0.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      Float float0 = new Float((double) 0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Wall wall0 = new Wall(368.28857F, 368.28857F, (-1.0026257F), 1243.8875F, (-1.0026257F), (-1481.8481F));
      assertNotNull(wall0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(368.28857F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(950.2891F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(806.088F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(950.2891F, wall0.getLength(), 0.01F);
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(368.28857F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(950.2891F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(806.088F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(950.2891F, wall0.getLength(), 0.01F);
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      wall0.setLevel((Level) null);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(368.28857F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(950.2891F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(806.088F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(950.2891F, wall0.getLength(), 0.01F);
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      Float float0 = new Float((double) 1171.1F);
      assertEquals(1171.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(368.28857F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(950.2891F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(806.088F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(950.2891F, wall0.getLength(), 0.01F);
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      wall0.setYStart(1171.1F);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      wall0.setRightSideShininess(368.28857F);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(368.28857F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      boolean boolean2 = wall0.containsWallEndAt((-1.0026257F), (-1.0026257F), (-2006.7F));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(368.28857F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      Float float1 = wall0.getHeight();
      assertEquals((-1481.8481F), (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(368.28857F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(1171.1F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertEquals((-1481.8481F), wall0.getHeight(), 0.01F);
      assertEquals(376.3961F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1171.1F, wall0.getYStart(), 0.01F);
      assertEquals(368.28857F, wall0.getXStart(), 0.01F);
      assertEquals(183.64297F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(368.28857F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0026257F), wall0.getThickness(), 0.01F);
      assertEquals(1207.4937F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1243.8875F, wall0.getYEnd(), 0.01F);
      assertEquals(1171.1F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(376.3961F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0026257F), wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2.74F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.74F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setXEnd(2.74F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.74F, wall0.getThickness(), 0.01F);
      assertEquals(2218.26F, wall0.getLength(), 0.01F);
      assertEquals(2218.26F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.74F, wall0.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1111.87F, wall0.getXArcCircleCenter(), 0.01F);
      
      wall0.setXStart(2221.0F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2.74F, wall0.getThickness(), 0.01F);
      assertEquals(2218.26F, wall0.getLength(), 0.01F);
      assertEquals(2218.26F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.74F, wall0.getXEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1111.87F, wall0.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = new Integer(2706);
      assertEquals(2706, (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = new Integer((-3107));
      assertEquals((-3107), (int)integer1);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-3107), (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(2706);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-3107), (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2706.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd((Wall) null);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-3107), (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2706.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      
      Float float3 = new Float(4169.2);
      assertEquals(4169.2F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      Float float4 = new Float(0.0F);
      assertEquals(0.0F, (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      
      wall0.setArcExtent(float4);
      assertEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-3107), (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1178.522F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.4161193E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2706.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(2510.94F, 0.1F, 0.0F, 1146.6283F, 1.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1255.47F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2760.3164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2760.3164F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(1146.6283F, wall1.getYEnd(), 0.01F);
      assertEquals(573.36414F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2510.94F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-3107), (int)wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-1178.522F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(6.4161193E18F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2706.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-1178.522F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-3107), (int)wall2.getLeftSideColor());
      assertEquals(6.4161193E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(2706.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1255.47F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2760.3164F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(2760.3164F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getRightSideColor());
      assertEquals(1146.6283F, wall1.getYEnd(), 0.01F);
      assertEquals(573.36414F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2510.94F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Wall wall0 = new Wall(1355.83F, 1355.83F, 1355.83F, 0.0F, 3529.1F, (-1306.1F));
      assertNotNull(wall0);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float((double) (-1306.1F));
      assertEquals((-1306.1F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-2563.321F), 868.6609F, (-849.0F), 0.0F, 999.44F, (-2563.321F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-849.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2563.321F), wall1.getXStart(), 0.01F);
      assertEquals(999.44F, wall1.getThickness(), 0.01F);
      assertEquals(1921.8398F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(868.6609F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1921.8398F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(434.33044F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2563.321F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1706.1605F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      
      Float float1 = new Float(0.0F);
      assertEquals(0.0F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-849.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2563.321F), wall1.getXStart(), 0.01F);
      assertEquals(999.44F, wall1.getThickness(), 0.01F);
      assertEquals(1921.8398F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(868.6609F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1921.8398F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(434.33044F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2563.321F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1706.1605F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
      
      wall0.setHeightAtEnd(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-849.0F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2563.321F), wall1.getXStart(), 0.01F);
      assertEquals(999.44F, wall1.getThickness(), 0.01F);
      assertEquals(1921.8398F, wall1.getLength(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(868.6609F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1921.8398F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(434.33044F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2563.321F), wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1706.1605F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float2 = wall0.getLength();
      assertEquals(1355.83F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Level level0 = wall0.getLevel();
      assertNull(level0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float3 = wall0.getStartPointToEndPointDistance();
      assertEquals(1355.83F, float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(float3, float2, 0.01F);
      assertEquals(1355.83F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1306.1F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3529.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1355.83F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(1355.83F, wall0.getLength(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(677.915F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1355.83F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Wall wall0 = new Wall(1338.16F, (-1361.8512F), (-3383.41F), (-1172.802F), (-3383.41F), (-785.648F));
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-1022.62494F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(1338.16F, wall0.getXStart(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4725.353F, wall0.getLength(), 0.01F);
      assertEquals(4725.353F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      
      float float0 = wall0.getXArcCircleCenter();
      assertEquals((-1022.62494F), float0, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-1022.62494F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(1338.16F, wall0.getXStart(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4725.353F, wall0.getLength(), 0.01F);
      assertEquals(4725.353F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      
      Float float1 = new Float(1338.16F);
      assertEquals(1338.16F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      Wall wall1 = new Wall((-1022.62494F), 2221.0F, 1977.0F, (-3212.7F), (-1361.8512F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1022.62494F), wall1.getXStart(), 0.01F);
      assertEquals(1977.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1361.8512F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(6206.6772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6206.6772F, wall1.getLength(), 0.01F);
      assertEquals(477.18753F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3212.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-495.84998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-1022.62494F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(1338.16F, wall0.getXStart(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4725.353F, wall0.getLength(), 0.01F);
      assertEquals(4725.353F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1022.62494F), wall1.getXStart(), 0.01F);
      assertEquals(1977.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1361.8512F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(6206.6772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6206.6772F, wall1.getLength(), 0.01F);
      assertEquals(477.18753F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3212.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-495.84998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-785.648F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2084.529F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2604.6318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(2604.6318F, wall0.getLength(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2084.529F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2604.6318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(2604.6318F, wall0.getLength(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1022.62494F), wall1.getXStart(), 0.01F);
      assertEquals(1977.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1361.8512F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(6206.6772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6206.6772F, wall1.getLength(), 0.01F);
      assertEquals(477.18753F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3212.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-495.84998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2084.529F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2604.6318F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1361.8512F), wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1172.802F), wall0.getYEnd(), 0.01F);
      assertEquals((-3383.41F), wall0.getXEnd(), 0.01F);
      assertEquals(2604.6318F, wall0.getLength(), 0.01F);
      assertEquals((-1267.3267F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-3383.41F), wall0.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1022.62494F), wall1.getXStart(), 0.01F);
      assertEquals(1977.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1361.8512F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(6206.6772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6206.6772F, wall1.getLength(), 0.01F);
      assertEquals(477.18753F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3212.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-495.84998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1022.62494F), wall1.getXStart(), 0.01F);
      assertEquals(1977.0F, wall1.getXEnd(), 0.01F);
      assertEquals((-1361.8512F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(6206.6772F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(6206.6772F, wall1.getLength(), 0.01F);
      assertEquals(477.18753F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals((-3212.7F), wall1.getYEnd(), 0.01F);
      assertEquals((-495.84998F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall1, wall0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      
      Integer integer0 = new Integer(2);
      assertEquals(2, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      
      wall0.setThickness((-1143.127F));
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1143.127F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      
      Float float0 = new Float((-534.0));
      assertEquals((-534.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(10676.123F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(14.628158F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-534.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-13.628158F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1143.127F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall(756.2498F, 2, 597.7F, 0.0F, 0.01F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(756.2498F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(158.56242F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(597.7F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(676.9749F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(158.56242F, wall1.getLength(), 0.01F);
      
      wall1.setXEnd(3423.8F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(756.2498F, wall1.getXStart(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2667.551F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2.0F, wall1.getYStart(), 0.01F);
      assertEquals(2667.551F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(3423.8F, wall1.getXEnd(), 0.01F);
      assertEquals(2090.025F, wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeight());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2, (int)wall0.getLeftSideColor());
      assertEquals(10676.123F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(14.628158F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-534.0F), wall0.getArcExtent(), 0.01F);
      assertEquals((-13.628158F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1143.127F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall2.getXStart(), 0.01F);
      assertEquals(1.0F, wall2.getYStart(), 0.01F);
      assertEquals(1.4142135F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-1143.127F), wall2.getThickness(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(2, (int)wall2.getLeftSideColor());
      assertNull(wall2.getHeight());
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-534.0F), wall2.getArcExtent(), 0.01F);
      assertEquals((-13.628158F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals(10676.123F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(14.628158F, wall2.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall((-795.5767F), (-345.14404F), 1.0F, (-2368.0918F), 3136.14F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2174.1326F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-795.5767F), wall1.getXStart(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-397.28836F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2174.1326F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2174.1326F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-795.5767F), wall1.getXStart(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-397.28836F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2174.1326F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2174.1326F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-795.5767F), wall1.getXStart(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-397.28836F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2174.1326F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.1F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2022.948F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2022.948F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-1173.319F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1412.2012F, wall0.getLength(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1412.2012F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-586.6095F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint(0.1F, (-423.8133F), (-1173.319F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2022.948F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2022.948F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2022.948F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2022.948F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(1412.2012F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-586.6095F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(1412.2012F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall1.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2022.948F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2022.948F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall2.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(1.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3136.14F, wall1.getThickness(), 0.01F);
      assertEquals((-345.14404F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2022.948F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1356.6179F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals(2022.948F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-2368.0918F), wall1.getYEnd(), 0.01F);
      assertEquals(0.55F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1173.319F), wall2.getXStart(), 0.01F);
      assertEquals(1412.2012F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-586.6095F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(1412.2012F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = new Float((-983.5598));
      assertEquals((-983.5598F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setXStart((-1620.5F));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1620.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1620.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-810.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1620.6F, wall0.getLength(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1620.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1620.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-810.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1620.6F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1620.6F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1620.5F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-983.5598F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(1620.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-810.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1620.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1620.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-810.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1620.6F, wall0.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1620.6F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1620.5F), wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-983.5598F), wall1.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(1620.6F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-810.2F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1620.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1620.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-810.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1620.6F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals((-1620.5F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-810.2F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-983.5598F), wall2.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(1620.6F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(0.1F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(1620.6F, wall2.getLength(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1620.5F), wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1620.6F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-983.5598F), wall0.getHeightAtEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-810.2F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1620.6F, wall0.getLength(), 0.01F);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("iMv_]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.iMv_]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Wall wall0 = new Wall(2249.5393F, 2249.5393F, 2249.5393F, (-785.648F), (-1172.802F), 2249.5393F);
      assertNotNull(wall0);
      assertEquals(731.9457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.5393F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5393F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3035.1873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.5393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3035.1873F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2249.5393F, wall0.getYStart(), 0.01F);
      assertEquals(2249.5393F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(2249.5393F);
      assertEquals(2249.5393F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(2249.5393F, float1, 0.01F);
      assertEquals(731.9457F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2249.5393F, wall0.getHeight(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5393F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3035.1873F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2249.5393F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3035.1873F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(2249.5393F, wall0.getYStart(), 0.01F);
      assertEquals(2249.5393F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, (-1173.319F), (-785.648F), (-785.648F), (-944.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.17847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getHeight());
      assertEquals(876.17847F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(876.98566F, wall1.getLength(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-392.324F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(876.98566F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-2368.0918F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      
      Wall wall2 = new Wall(739.7684F, 418.0116F, 0.1F, (-1.07219F), (-456.9298F), (-1065.5769F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1065.5769F), wall2.getHeight(), 0.01F);
      assertEquals(208.4697F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(850.1415F, wall2.getLength(), 0.01F);
      assertEquals(369.93417F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(739.7684F, wall2.getXStart(), 0.01F);
      assertEquals(850.1415F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-456.9298F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(418.0116F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.07219F), wall2.getYEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      
      float[][] floatArray0 = wall2.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1065.5769F), wall2.getHeight(), 0.01F);
      assertEquals(208.4697F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(850.1415F, wall2.getLength(), 0.01F);
      assertEquals(369.93417F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertEquals(739.7684F, wall2.getXStart(), 0.01F);
      assertEquals(850.1415F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-456.9298F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(418.0116F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-1.07219F), wall2.getYEnd(), 0.01F);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall1.containsWallEndAt((-456.9298F), 0.0F, (-785.648F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals((-1173.319F), wall1.getYStart(), 0.01F);
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1629.2382F, wall1.getLength(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertEquals(1629.2382F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-979.4835F), wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float0 = wall1.getThickness();
      assertEquals((-2050.978F), float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float1 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float3 = Float.min((-1045.0F), 0.0F);
      assertEquals((-1045.0F), float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      
      Float float4 = new Float((double) (-2139.0F));
      assertEquals((-2139.0F), (float)float4, 0.01F);
      assertNotNull(float4);
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      
      wall0.setHeightAtEnd(float4);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((float)float4, (float)float1, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float3, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsPoint(0.0F, 0.0F, (-2050.978F));
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2139.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals((-2050.978F), wall2.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Integer integer0 = wall2.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2139.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals((-2050.978F), wall2.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Float float5 = wall0.getArcExtent();
      assertNull(float5);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setRightSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2139.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals((-2050.978F), wall2.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      boolean boolean1 = wall0.containsWallStartAt(3543.1187F, 0.0F, (-1367.0F));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      float float6 = wall2.getLength();
      assertEquals(2139.0F, float6, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertEquals((-2139.0F), wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall2.getHeightAtEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(2139.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall2.getXStart(), 0.01F);
      assertEquals((-1069.5F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertTrue(wall2.isTrapezoidal());
      assertEquals((-2050.978F), wall2.getThickness(), 0.01F);
      assertEquals((-2139.0F), wall2.getXEnd(), 0.01F);
      assertEquals((-2139.0F), wall2.getYEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall2.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Wall wall0 = new Wall((-1401.8195F), (-1401.8195F), (-1.0F), (-1.0F), (-1401.8195F), (-1401.8195F));
      assertNotNull(wall0);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      
      wall0.setYStart((-1401.8195F));
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      
      boolean boolean0 = wall0.containsWallEndAt((-355.0F), (-821.582F), (-1401.8195F));
      assertFalse(boolean0);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(1981.0579F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-701.4097F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1401.8195F), wall0.getYStart(), 0.01F);
      assertEquals((-1401.8195F), wall0.getThickness(), 0.01F);
      assertEquals((-1.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-701.4097F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1981.0579F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1401.8195F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1401.8195F), wall0.getHeight(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.8525934F), (-1.8525934F), (-1.8525934F));
      assertNotNull(wall0);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      
      Float float0 = new Float(1435.0F);
      assertEquals(1435.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(810.065F, (-2874.8826F));
      assertEquals(810.065F, float1, 0.01F);
      
      Level level0 = new Level("O%$n!G", 810.065F, 810.065F, 2752.1562F);
      assertNotNull(level0);
      assertEquals(810.065F, level0.getFloorThickness(), 0.01F);
      assertEquals(810.065F, level0.getElevation(), 0.01F);
      assertEquals(2752.1562F, level0.getHeight(), 0.01F);
      assertEquals("O%$n!G", level0.getName());
      assertTrue(level0.isVisible());
      
      wall0.setLevel(level0);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(810.065F, level0.getFloorThickness(), 0.01F);
      assertEquals(810.065F, level0.getElevation(), 0.01F);
      assertEquals(2752.1562F, level0.getHeight(), 0.01F);
      assertEquals("O%$n!G", level0.getName());
      assertTrue(level0.isVisible());
      
      Level level1 = new Level("nAPZ]uf ~#X9{TWsP]", 1.0F, 1625.0662F, 0.0F);
      assertNotNull(level1);
      assertFalse(level1.equals((Object)level0));
      assertTrue(level1.isVisible());
      assertEquals(1.0F, level1.getElevation(), 0.01F);
      assertEquals(0.0F, level1.getHeight(), 0.01F);
      assertEquals("nAPZ]uf ~#X9{TWsP]", level1.getName());
      assertEquals(1625.0662F, level1.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertTrue(boolean0);
      assertFalse(level0.equals((Object)level1));
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(810.065F, level0.getFloorThickness(), 0.01F);
      assertEquals(810.065F, level0.getElevation(), 0.01F);
      assertEquals(2752.1562F, level0.getHeight(), 0.01F);
      assertEquals("O%$n!G", level0.getName());
      assertTrue(level0.isVisible());
      assertNotSame(level0, level1);
      
      Level level2 = wall0.getLevel();
      assertNotNull(level2);
      assertFalse(level2.equals((Object)level1));
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(810.065F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("O%$n!G", level2.getName());
      assertEquals(2752.1562F, level2.getHeight(), 0.01F);
      assertEquals(810.065F, level2.getElevation(), 0.01F);
      assertSame(level2, level0);
      assertNotSame(level2, level1);
      
      boolean boolean1 = wall0.isAtLevel(level2);
      assertTrue(boolean1);
      assertFalse(level2.equals((Object)level1));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(810.065F, level2.getFloorThickness(), 0.01F);
      assertTrue(level2.isVisible());
      assertEquals("O%$n!G", level2.getName());
      assertEquals(2752.1562F, level2.getHeight(), 0.01F);
      assertEquals(810.065F, level2.getElevation(), 0.01F);
      assertSame(level2, level0);
      assertNotSame(level2, level1);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1172.802F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals((-1172.802F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(785.748F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(785.748F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1172.802F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1.8525934F), (-1.8525934F), (-1.8525934F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(1435.0F);
      assertEquals(1435.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max(810.065F, (-2874.8826F));
      assertEquals(810.065F, float1, 0.01F);
      
      wall0.setHeightAtEnd(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess((-2874.8826F));
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      
      Float float2 = wall0.getHeightAtEnd();
      assertEquals(1435.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      wall0.setHeightAtEnd(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      
      Float float3 = new Float((-1.8525934F));
      assertEquals((-1.8525934F), (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      
      wall0.setHeight(float3);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.8525934F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.8525934F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.6199627F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.8525934F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.8525934F), wall0.getYEnd(), 0.01F);
      assertEquals((-1.8525934F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1435.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals((-0.9262967F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(2.6199627F, wall0.getLength(), 0.01F);
      assertEquals((-2874.8826F), wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.8525934F), wall0.getThickness(), 0.01F);
      assertTrue(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Wall> list1 = Wall.clone(list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertNotNull(list1);
      assertTrue(list1.equals((Object)list0));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      List<Wall> list2 = Wall.clone(list1);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertNotNull(list2);
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-503.8764F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-503.8764F), wall1.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-503.8764F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-503.8764F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-503.8764F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-503.8764F), wall1.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-503.8764F), wall1.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-503.8764F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-503.8764F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-503.8764F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-503.8764F), wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotNull(floatArray1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(4, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-785.648F), 0.1F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      float float3 = wall0.getRightSideShininess();
      assertEquals(0.0F, float3, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, 0.1F, (-785.648F), (-785.648F), (-944.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1111.2155F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1111.2155F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1111.2155F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1111.2155F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1111.2155F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-392.77402F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1111.2155F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals(1111.852F, wall1.getLength(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-392.324F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1111.852F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart((-2368.0918F));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-785.648F), (-785.648F), 1.0F);
      assertTrue(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      
      Float float4 = wall2.getArcExtent();
      assertNull(float4);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      HomeTexture homeTexture0 = wall1.getLeftSideTexture();
      assertNull(homeTexture0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      wall2.setRightSideShininess((-785.648F));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      
      Wall wall3 = wall1.clone();
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-785.648F), wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall3.getXEnd(), 0.01F);
      assertEquals(1766.7847F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1576.8699F), wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertEquals((-944.0F), wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeight());
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(1766.7847F, wall3.getLength(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-2368.0918F), wall3.getXStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall2.containsWallStartAt((-235.235F), (-944.0F), (-2329.0F));
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall0);
      
      Wall wall4 = wall0.clone();
      assertNotNull(wall4);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-785.648F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.1F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall4.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall4.getLength(), 0.01F);
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals((-785.648F), wall4.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(785.748F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall4.getHeight(), 0.01F);
      assertEquals((-785.648F), wall4.getThickness(), 0.01F);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      
      float float5 = wall4.getLength();
      assertEquals(785.748F, float5, 0.01F);
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall0));
      assertFalse(wall4.equals((Object)wall1));
      assertFalse(wall4.equals((Object)wall3));
      assertFalse(wall4.equals((Object)wall2));
      assertNotEquals(float5, float3, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-785.648F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall4.getHeightAtEnd());
      assertNull(wall4.getArcExtent());
      assertNull(wall4.getRightSideColor());
      assertEquals(0.1F, wall4.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall4.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall4.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall4.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall4.getLength(), 0.01F);
      assertEquals(0.1F, wall4.getXStart(), 0.01F);
      assertEquals((-785.648F), wall4.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall4.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall4.getYStart(), 0.01F);
      assertNull(wall4.getLeftSideColor());
      assertFalse(wall4.isTrapezoidal());
      assertEquals(785.748F, wall4.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall4.getHeight(), 0.01F);
      assertEquals((-785.648F), wall4.getThickness(), 0.01F);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
      assertNotSame(wall4, wall0);
      assertNotSame(wall4, wall1);
      assertNotSame(wall4, wall3);
      assertNotSame(wall4, wall2);
      
      wall2.setArcExtent((Float) null);
      assertFalse(wall1.equals((Object)wall4));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall4));
      assertFalse(wall2.equals((Object)wall3));
      assertEquals((-944.0F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-785.648F), wall1.getXEnd(), 0.01F);
      assertEquals((-392.77402F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1576.8699F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals(1766.7847F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-785.648F), wall1.getYEnd(), 0.01F);
      assertEquals(1766.7847F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals((-785.648F), wall2.getThickness(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-785.648F), wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertNotSame(wall1, wall4);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall4);
      assertNotSame(wall2, wall3);
      assertSame(wall2, wall0);
      
      float float6 = wall0.getRightSideShininess();
      assertEquals((-785.648F), float6, 0.01F);
      assertFalse(wall0.equals((Object)wall4));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float6, float5, 0.01F);
      assertNotEquals(float6, float2, 0.01F);
      assertNotEquals(float6, float1, 0.01F);
      assertNotEquals(float6, float3, 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-785.648F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-785.648F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall4);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall1);
      assertSame(wall0, wall2);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setYEnd((-2837.3057F));
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min(0.0F, 1.0F);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals((float)float0, (float)float1, 0.01F);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Integer integer1 = wall0.getLeftSideColor();
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(2838.306F, float3, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float4 = wall0.getThickness();
      assertEquals(1.0F, float4, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float float5 = wall0.getXStart();
      assertEquals(1.0F, float5, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertNotEquals(float5, float3, 0.01F);
      assertEquals(float5, float4, 0.01F);
      assertEquals((-8.1656197E15F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.3176524E19F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float1 = wall0.getXArcCircleCenter();
      assertEquals(0.1F, float1, 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      float float2 = wall0.getRightSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = new Wall((-2368.0918F), 0.0F, 0.0F, 0.1F, (-423.8133F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1184.0459F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2368.0918F, wall1.getLength(), 0.01F);
      assertEquals(2368.0918F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2368.0918F), wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(1.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0049876F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertEquals(1.0049876F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      
      wall1.setXStart(0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.containsPoint((-355.97F), 1.0F, (-2368.0918F));
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtEnd();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Integer integer0 = wall2.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-423.8133F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertEquals(785.748F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals((-785.648F), wall2.getYEnd(), 0.01F);
      assertEquals(785.748F, wall2.getLength(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals((-1173.319F), wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-392.77402F), wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals((-1173.319F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Integer integer0 = new Integer(4441);
      assertEquals(4441, (int)integer0);
      assertNotNull(integer0);
      
      Wall wall0 = new Wall(0.0F, (-1198.66F), 0.01F, 2.0F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1200.66F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1200.66F, wall0.getLength(), 0.01F);
      assertEquals((-598.33F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1198.66F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Integer integer1 = new Integer(4441);
      assertEquals(4441, (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.005F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1200.66F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1200.66F, wall0.getLength(), 0.01F);
      assertEquals((-598.33F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1198.66F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals(4441, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((float) 4441);
      assertEquals(4441.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(4680680.5F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1200.66F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2.0F, wall0.getYEnd(), 0.01F);
      assertEquals(4441.0F, wall0.getArcExtent(), 0.01F);
      assertEquals(866.29395F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1198.66F), wall0.getYStart(), 0.01F);
      assertEquals(0.01F, wall0.getXEnd(), 0.01F);
      assertEquals((-598.3372F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4441, (int)wall0.getLeftSideColor());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      
      Wall wall1 = new Wall((-353.849F), (-353.849F), (-1198.66F), 0.01F, (-1401.8195F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1198.66F), wall1.getXEnd(), 0.01F);
      assertEquals((-776.2545F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-353.849F), wall1.getYStart(), 0.01F);
      assertEquals(915.92676F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-176.9195F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(915.92676F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-1198.66F), wall1.getXEnd(), 0.01F);
      assertEquals((-776.2545F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-353.849F), wall1.getYStart(), 0.01F);
      assertEquals(915.92676F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-176.9195F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(915.92676F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall2.getXStart(), 0.01F);
      assertEquals((-353.849F), wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals(915.92676F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-1401.8195F), wall2.getThickness(), 0.01F);
      assertEquals(915.92676F, wall2.getLength(), 0.01F);
      assertEquals((-1198.66F), wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals((-176.9195F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-776.2545F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      Wall wall3 = new Wall(0.0F, 0.01F, 4441, 2.0F, 4441, 4441);
      assertNotNull(wall3);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(4441.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(4441.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4441.0F, wall3.getHeight(), 0.01F);
      assertEquals(4441.0005F, wall3.getLength(), 0.01F);
      assertEquals(2220.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.01F, wall3.getYStart(), 0.01F);
      assertEquals(4441.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.005F, wall3.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall3.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(4441.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(4441.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4441.0F, wall3.getHeight(), 0.01F);
      assertEquals(4441.0005F, wall3.getLength(), 0.01F);
      assertEquals(2220.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.01F, wall3.getYStart(), 0.01F);
      assertEquals(4441.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.005F, wall3.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      assertEquals(4, floatArray0.length);
      
      Integer integer2 = wall3.getRightSideColor();
      assertNull(integer2);
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(4441.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(4441.0F, wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(4441.0F, wall3.getHeight(), 0.01F);
      assertEquals(4441.0005F, wall3.getLength(), 0.01F);
      assertEquals(2220.5F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getXStart(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(2.0F, wall3.getYEnd(), 0.01F);
      assertEquals(0.01F, wall3.getYStart(), 0.01F);
      assertEquals(4441.0005F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.005F, wall3.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall3, wall0);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall1);
      
      float float1 = wall1.getYStart();
      assertEquals((-353.849F), float1, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1198.66F), wall1.getXEnd(), 0.01F);
      assertEquals((-776.2545F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-353.849F), wall1.getYStart(), 0.01F);
      assertEquals(915.92676F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-176.9195F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(915.92676F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotNull(float2);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      wall2.setArcExtent(float2);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall3));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertEquals((-1198.66F), wall1.getXEnd(), 0.01F);
      assertEquals((-776.2545F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-353.849F), wall1.getYStart(), 0.01F);
      assertEquals(915.92676F, wall1.getLength(), 0.01F);
      assertEquals(0.01F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals((-176.9195F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(915.92676F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getHeight());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-6.8984052E18F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-353.849F), wall2.getXStart(), 0.01F);
      assertEquals((-353.849F), wall2.getYStart(), 0.01F);
      assertEquals(0.01F, wall2.getYEnd(), 0.01F);
      assertEquals(915.92676F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2.88947807E18F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1401.8195F), wall2.getThickness(), 0.01F);
      assertEquals(915.92676F, wall2.getLength(), 0.01F);
      assertEquals((-1198.66F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall3);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((double) 0.1F);
      assertEquals(0.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 549.6F, 0.0F, 549.6F, 0.0F, 0.0F);
      assertNotNull(wall0);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(549.6F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(549.6F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(549.6F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(549.6F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(549.6F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(549.6F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(549.6F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(549.6F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(549.6F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setLeftSideShininess(0.0F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(549.6F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(549.6F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(549.6F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(549.6F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(549.6F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(549.6F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float0 = new Float(0.0);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setArcExtent(float0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(549.6F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(549.6F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(549.6F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(549.6F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getArcExtent(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(549.6F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getThickness(), 0.01F);
      assertEquals(549.6F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      float float0 = Float.max((-1.0F), 2164.474F);
      assertEquals(2164.474F, float0, 0.01F);
      
      float float1 = Float.max((-874.5217F), 28.347795F);
      assertEquals(28.347795F, float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      
      Wall wall0 = new Wall(0.0F, (-3093.791F), 2.0F, 2164.474F, 28.347795F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5258.2656F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.791F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5258.2656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(28.347795F, wall1.getThickness(), 0.01F);
      assertEquals((-464.65845F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2164.474F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      boolean boolean0 = wall1.containsWallEndAt((-5863.2F), 1.0F, 0.0F);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5258.2656F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.791F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5258.2656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(28.347795F, wall1.getThickness(), 0.01F);
      assertEquals((-464.65845F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2164.474F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = Float.max(28.347795F, 0.0F);
      assertEquals(28.347795F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      
      Float float3 = new Float(0.0F);
      assertEquals(0.0F, (float)float3, 0.01F);
      assertNotNull(float3);
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      
      wall0.setHeight(float3);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float3, (float)float0, 0.01F);
      assertNotEquals((float)float3, (float)float1, 0.01F);
      assertNotEquals((float)float3, (float)float2, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      
      float float4 = wall1.getLeftSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float2, 0.01F);
      assertNotEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5258.2656F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.791F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5258.2656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(28.347795F, wall1.getThickness(), 0.01F);
      assertEquals((-464.65845F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2164.474F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean1 = wall1.isTrapezoidal();
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(5258.2656F, wall1.getLength(), 0.01F);
      assertEquals(2.0F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3093.791F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(5258.2656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(28.347795F, wall1.getThickness(), 0.01F);
      assertEquals((-464.65845F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2164.474F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float5 = wall0.getYArcCircleCenter();
      assertEquals((-464.65845F), float5, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float5, float0, 0.01F);
      assertNotEquals(float5, float4, 0.01F);
      assertNotEquals(float5, float2, 0.01F);
      assertNotEquals(float5, float1, 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5258.2656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3093.791F), wall0.getYStart(), 0.01F);
      assertEquals(2164.474F, wall0.getYEnd(), 0.01F);
      assertEquals(2.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(28.347795F, wall0.getThickness(), 0.01F);
      assertEquals(5258.2656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-464.65845F), wall0.getYArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-2050.978F);
      Wall wall0 = new Wall((-2139.0F), 0.0F, (-2139.0F), (-2139.0F), (-2050.978F), 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getThickness();
      assertEquals((-2050.978F), float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertEquals((-2050.978F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setThickness((-2139.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float3 = wall1.getXArcCircleCenter();
      assertEquals((-2139.0F), float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float4 = wall1.getRightSideShininess();
      assertEquals(0.0F, float4, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float4, float1, 0.01F);
      assertEquals(float4, float0, 0.01F);
      assertNotEquals(float4, float3, 0.01F);
      assertNotEquals(float4, float2, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float5 = 0.0F;
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2139.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-2050.978F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-2139.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-1069.5F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(2139.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2139.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2139.0F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(2139.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2139.0F), wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1069.5F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2139.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals((-2139.0F), wall1.getXEnd(), 0.01F);
      assertEquals(2139.0F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2139.0F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2139.0F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("", propertyChangeListenerProxy0.getPropertyName());
      
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, (String) null, propertyChangeListenerProxy0, (Object) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float0 = wall0.getArcExtent();
      assertNull(float0);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Float float1 = new Float(2171.7);
      assertEquals(2171.7F, (float)float1, 0.01F);
      assertNotNull(float1);
      
      Wall wall1 = new Wall((-3655.0F), (-3655.0F), (-7.6923077E-4F), (-7.6923077E-4F), (-1145.6F), (-1200.4634F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3655.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall1.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1145.6F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getYEnd(), 0.01F);
      assertEquals(5168.9497F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1827.5004F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall1.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3655.0F), wall1.getXStart(), 0.01F);
      
      Wall wall2 = wall1.clone();
      assertNotNull(wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals((-3655.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall1.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1145.6F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getYEnd(), 0.01F);
      assertEquals(5168.9497F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1827.5004F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall1.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3655.0F), wall1.getXStart(), 0.01F);
      assertEquals((-3655.0F), wall2.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall2.getHeight(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getHeightAtEnd());
      assertEquals((-1145.6F), wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5168.9497F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-7.6923077E-4F), wall2.getYEnd(), 0.01F);
      assertEquals((-1827.5004F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals((-7.6923077E-4F), wall2.getXEnd(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(5168.9497F, wall2.getLength(), 0.01F);
      assertEquals((-1827.5004F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-3655.0F), wall2.getXStart(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-3655.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall1.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1145.6F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getYEnd(), 0.01F);
      assertEquals(5168.9497F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1827.5004F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall1.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3655.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      
      Wall wall3 = wall0.getWallAtStart();
      assertNotNull(wall3);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall3.getYEnd(), 0.01F);
      assertEquals((-1827.5004F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall3.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-3655.0F), wall3.getXStart(), 0.01F);
      assertEquals((-1145.6F), wall3.getThickness(), 0.01F);
      assertEquals((-3655.0F), wall3.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall3.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(5168.9497F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      float[][] floatArray0 = wall3.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(785.748F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(785.748F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-392.77402F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall3.getYEnd(), 0.01F);
      assertEquals((-1827.5004F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall3.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals((-3655.0F), wall3.getXStart(), 0.01F);
      assertEquals((-1145.6F), wall3.getThickness(), 0.01F);
      assertEquals((-3655.0F), wall3.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall3.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall3.getYArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(5168.9497F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall3);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = wall1.containsWallEndAt((-4065.436F), (-7.6923077E-4F), 1.0F);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3655.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1200.4634F), wall1.getHeight(), 0.01F);
      assertEquals((-1827.5004F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1145.6F), wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getYEnd(), 0.01F);
      assertEquals(5168.9497F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1827.5004F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(5168.9497F, wall1.getLength(), 0.01F);
      assertEquals((-7.6923077E-4F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-3655.0F), wall1.getXStart(), 0.01F);
      assertNotSame(wall1, wall2);
      assertSame(wall1, wall3);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F, 2221.0F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2221.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2221.0F, wall1.getHeight(), 0.01F);
      assertEquals(2221.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2221.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getThickness(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(2221.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(2221.0F, wall1.getHeight(), 0.01F);
      assertEquals(2221.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2221.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2221.0F, wall1.getThickness(), 0.01F);
      assertEquals(2221.0F, wall1.getYStart(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2221.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2221.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(2221.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(2221.0F, wall0.getYEnd(), 0.01F);
      assertEquals(2221.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2221.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      int int0 = Integer.min(94, 1501);
      assertEquals(94, int0);
      
      wall0.setLeftSideColor(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      
      Wall wall1 = new Wall(0.1F, (-1.0F), 0.1F, (-1.0F), 0.1F, (-1.0F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      
      float float0 = Float.max((-1.0F), 860.1858F);
      assertEquals(860.1858F, float0, 0.01F);
      
      Float float1 = new Float(2712.2695F);
      assertEquals(2712.2695F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall0.setArcExtent(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.20195767F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(2232.7407F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2712.2695F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.7980423F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall1);
      
      Wall wall2 = new Wall(837.991F, 2838.3057F, 860.1858F, 837.991F, 2838.3057F, (-1.0F));
      assertNotNull(wall2);
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(2838.3057F, wall2.getYStart(), 0.01F);
      assertEquals(837.991F, wall2.getYEnd(), 0.01F);
      assertEquals(2838.3057F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2000.4377F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(1838.1483F, wall2.getYArcCircleCenter(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-1.0F), wall2.getHeight(), 0.01F);
      assertEquals(849.0884F, wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(837.991F, wall2.getXStart(), 0.01F);
      assertEquals(2000.4377F, wall2.getLength(), 0.01F);
      assertEquals(860.1858F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      
      Wall wall3 = wall1.clone();
      assertNotNull(wall3);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertEquals((-1.0F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-1.0F), wall1.getYStart(), 0.01F);
      assertEquals((-1.0F), wall3.getYStart(), 0.01F);
      assertEquals((-1.0F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertNull(wall3.getLeftSideColor());
      assertFalse(wall3.isTrapezoidal());
      assertEquals(0.0F, wall3.getLength(), 0.01F);
      assertEquals(0.1F, wall3.getXEnd(), 0.01F);
      assertEquals(0.0F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1.0F), wall3.getYEnd(), 0.01F);
      assertEquals(0.1F, wall3.getXStart(), 0.01F);
      assertEquals((-1.0F), wall3.getHeight(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.20195767F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(2232.7407F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2712.2695F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.7980423F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNotSame(wall0, wall3);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(122, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.65F), (-1189.0514F), 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(785.75F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.65F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.75F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77502F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Integer integer0 = new Integer(0);
      assertEquals(0, (int)integer0);
      assertNotNull(integer0);
      
      Float float0 = new Float(2171.7);
      assertEquals(2171.7F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.max((-497.4F), 0);
      assertEquals(0.0F, float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(938533.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-179.94464F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.65F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.75F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77502F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      Wall wall1 = new Wall(0, (-2059.7F), (-1189.0514F), (-2059.7F), (-2059.7F));
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2059.7F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-2059.7F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall1.getXEnd(), 0.01F);
      assertEquals(1189.0514F, wall1.getLength(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-594.5257F), wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2059.7F), wall1.getYStart(), 0.01F);
      assertEquals(1189.0514F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2059.7F), wall1.getThickness(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotNull(wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(938533.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-179.94464F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.65F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.75F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77502F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(938533.4F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(2171.7F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-179.94464F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.75F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.77502F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-785.65F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      
      boolean boolean0 = wall2.containsWallEndAt(1938.1309F, (-154.86F), 677.0F);
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(938533.4F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals((-1189.0514F), wall0.getThickness(), 0.01F);
      assertEquals(2171.7F, wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-179.94464F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals((-785.65F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(785.75F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-392.77502F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(938533.4F, wall2.getLength(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getHeight(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(2171.7F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-179.94464F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals((-1189.0514F), wall2.getThickness(), 0.01F);
      assertEquals(0.1F, wall2.getXEnd(), 0.01F);
      assertEquals(0.1F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(785.75F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-392.77502F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals((-785.65F), wall2.getYEnd(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Wall wall0 = new Wall(1222.5314F, 3433.042F, (-785.648F), (-785.648F), 0.1F, 3433.042F);
      assertNotNull(wall0);
      assertEquals(218.44168F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(4672.2725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertEquals(1222.5314F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4672.2725F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Float float0 = new Float((-785.648F));
      assertEquals((-785.648F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Wall wall1 = new Wall(1222.5314F, (-1172.802F), (-3200.4658F), 1.0F, 0.1F);
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-3200.4658F), wall1.getXEnd(), 0.01F);
      assertEquals((-585.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1172.802F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4576.1025F, wall1.getLength(), 0.01F);
      assertEquals(4576.1025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1222.5314F, wall1.getXStart(), 0.01F);
      assertEquals((-988.9672F), wall1.getXArcCircleCenter(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(218.44168F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(4672.2725F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertEquals(1222.5314F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4672.2725F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3200.4658F), wall1.getXEnd(), 0.01F);
      assertEquals((-585.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1172.802F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4576.1025F, wall1.getLength(), 0.01F);
      assertEquals(4576.1025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1222.5314F, wall1.getXStart(), 0.01F);
      assertEquals((-988.9672F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall0.setXStart((-1.0F));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4291.039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals((-393.324F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4291.039F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      
      wall0.setWallAtStart(wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4291.039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals((-393.324F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4291.039F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3200.4658F), wall1.getXEnd(), 0.01F);
      assertEquals((-585.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1172.802F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4576.1025F, wall1.getLength(), 0.01F);
      assertEquals(4576.1025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1222.5314F, wall1.getXStart(), 0.01F);
      assertEquals((-988.9672F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      wall1.setWallAtStart(wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(4291.039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals((-393.324F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4291.039F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3200.4658F), wall1.getXEnd(), 0.01F);
      assertEquals((-585.901F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertEquals((-1172.802F), wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(4576.1025F, wall1.getLength(), 0.01F);
      assertEquals(4576.1025F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(1222.5314F, wall1.getXStart(), 0.01F);
      assertEquals((-988.9672F), wall1.getXArcCircleCenter(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(4291.039F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1323.697F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3433.042F, wall0.getHeight(), 0.01F);
      assertEquals((-393.324F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4291.039F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-785.648F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-785.648F), wall0.getXEnd(), 0.01F);
      assertEquals(3433.042F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getLeftSideColor());
      assertNotSame(wall0, wall1);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 0.0F, 0.0F, 1.0F);
      assertNotNull(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Integer integer0 = new Integer((-16));
      assertEquals((-16), (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      boolean boolean0 = wall0.isTrapezoidal();
      assertFalse(boolean0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setYEnd(0.0F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setLeftSideTexture((HomeTexture) null);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.4142135F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.4142135F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setYEnd((-2837.3057F));
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Integer integer1 = new Integer((-16));
      assertEquals((-16), (int)integer1);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      wall0.setLeftSideColor(integer0);
      assertTrue(integer0.equals((Object)integer1));
      assertNull(wall0.getRightSideColor());
      assertEquals(0.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2838.306F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(2838.306F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      wall0.setXEnd((-519.3F));
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-259.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-519.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2885.6006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.6006F, wall0.getLength(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      Wall wall1 = wall0.getWallAtEnd();
      assertNotNull(wall1);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-259.15F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-519.3F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals((-1418.1528F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals((-16), (int)wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(2885.6006F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2885.6006F, wall0.getLength(), 0.01F);
      assertEquals((-2837.3057F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2837.3057F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertEquals(2885.6006F, wall1.getLength(), 0.01F);
      assertEquals(1.0F, wall1.getXStart(), 0.01F);
      assertEquals((-519.3F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1418.1528F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getRightSideColor());
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-16), (int)wall1.getLeftSideColor());
      assertEquals((-259.15F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall1.getYStart(), 0.01F);
      assertEquals(2885.6006F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Wall wall0 = new Wall((-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F), (-503.8764F));
      assertNotNull(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-503.8764F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-503.8764F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-503.8764F), wall0.getThickness(), 0.01F);
      assertEquals((-503.8764F), wall0.getXStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-503.8764F), wall0.getYStart(), 0.01F);
      assertEquals((-503.8764F), wall0.getYEnd(), 0.01F);
      assertEquals((-503.8764F), wall0.getXEnd(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Wall wall0 = new Wall(3440.5269F, 3440.5269F, 3440.5269F, 3440.5269F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getHeight(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Float float0 = new Float((-771.0F));
      assertEquals((-771.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertEquals((-771.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotNull(wall1);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertEquals((-771.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3440.5269F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-771.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3440.5269F, wall1.getXEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Float float1 = new Float(3.141592653589793);
      assertEquals(3.1415927F, (float)float1, 0.01F);
      assertNotNull(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      wall1.setHeightAtEnd(float1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertEquals((-771.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3.1415927F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3440.5269F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall1.getXStart(), 0.01F);
      assertEquals((-771.0F), wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3440.5269F, wall1.getXEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertTrue(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertEquals((-771.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3.1415927F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3440.5269F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall1.getXStart(), 0.01F);
      assertEquals((-771.0F), wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3440.5269F, wall1.getXEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      float float2 = wall1.getYStart();
      assertEquals(3440.5269F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3440.5269F, wall0.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3440.5269F, wall0.getXEnd(), 0.01F);
      assertEquals((-771.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall0.getYStart(), 0.01F);
      assertEquals(3440.5269F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(3.1415927F, wall1.getHeightAtEnd(), 0.01F);
      assertEquals(1.0F, wall1.getThickness(), 0.01F);
      assertEquals(3440.5269F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3440.5269F, wall1.getXStart(), 0.01F);
      assertEquals((-771.0F), wall1.getHeight(), 0.01F);
      assertTrue(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3440.5269F, wall1.getXEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getYEnd(), 0.01F);
      assertEquals(3440.5269F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(3440.5269F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall(0.1F, 1.0F, (-2424.902F), (-1.0F), 1918.799F, 1918.799F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(1389.07F, (-1402.0F), (-1173.319F), (-1240.179F), (-1173.319F));
      wall1.setWallAtEnd(wall0);
      wall1.setRightSideShininess(1883.7F);
      wall0.setXStart((-4347.4985F));
      wall1.containsPoint(0.1F, (-1.0F), 0.01F);
      Wall wall3 = wall0.getWallAtEnd();
      wall3.getLeftSideColor();
      wall1.getArcExtent();
      wall3.getLeftSideTexture();
      wall1.setRightSideShininess((-4347.4985F));
      float float0 = wall3.getLength();
      assertEquals(2425.003F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Wall wall0 = new Wall(3.6680827F, 3.6680827F, 0.0F, 0.0F, 3.6680827F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.setXStart(1.0F);
      wall1.setXStart((-180.62689F));
      wall1.isTrapezoidal();
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      wall1.getPoints();
      assertEquals((-90.313446F), wall1.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 0.68763864F);
      wall0.getRightSideTexture();
      Level level0 = new Level("", 0.68763864F, 0.68763864F, 0.68763864F);
      boolean boolean0 = wall0.isAtLevel(level0);
      assertEquals(0.68763864F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Wall wall0 = new Wall((-436.78F), 1512.43F, 1512.43F, (-896.0F), (-4858.9F), (-4858.9F));
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      Wall wall1 = wall0.clone();
      wall1.getPoints();
      wall1.getPattern();
      assertEquals(1.5916508E19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4858.9F), wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-2493.6335F), 0.0F, 0.0F);
      wall0.setLeftSideShininess(0.0F);
      wall0.setXEnd(0.0F);
      Float float0 = new Float((double) 0.0F);
      Float.max(669.935F, 0.0F);
      Float.max(669.935F, 3604.54F);
      wall0.containsWallEndAt(2554.0F, (-2493.6335F), 2712.2695F);
      Float.max(1.0F, 0.0F);
      Wall wall1 = new Wall(761.3499F, (-992.3735F), 0.0F, 256.78482F, 815.0F);
      wall1.setLeftSideShininess(2740.0F);
      wall1.getHeight();
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      
      float float1 = wall0.getYEnd();
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-1504.81F), (-1504.81F), 0.0F);
      wall0.getLevel();
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(2128.1228F, wall0.getLength(), 0.01F);
      assertEquals((-752.405F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-752.405F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Wall wall0 = new Wall(418.0116F, 418.0116F, 418.0116F, 2361.3535F, 2361.3535F, 0.0F);
      wall0.setLeftSideShininess(186.39322F);
      wall0.setXEnd(2.0F);
      Float float0 = new Float(521.36);
      Float.max((-1.0F), 669.935F);
      Float.max(0.1F, 0.0F);
      Integer integer0 = new Integer(1);
      wall0.setLeftSideColor(integer0);
      wall0.containsWallEndAt(1.0F, 0.0F, (-1.0F));
      Float.max(0.0F, 3352.574F);
      wall0.setHeight(float0);
      wall0.getLeftSideColor();
      wall0.getLeftSideShininess();
      wall0.isTrapezoidal();
      float float1 = wall0.getYArcCircleCenter();
      assertEquals(210.0058F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1389.6826F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Wall wall0 = new Wall(22.713877F, 22.713877F, 22.713877F, 22.713877F, 22.713877F);
      wall0.getWallAtStart();
      wall0.setLevel((Level) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.setWallAtEnd((Wall) null);
      wall0.setWallAtStart((Wall) null);
      wall0.getPoints();
      assertEquals(22.713877F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setXEnd(0.1F);
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getPoints();
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Wall wall0 = new Wall(3.7F, 3.7F, 3.7F, 3.7F, 3.7F);
      Integer integer0 = new Integer(0);
      wall0.setLeftSideColor(integer0);
      wall0.getRightSideColor();
      assertEquals(3.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Wall wall0 = new Wall(2221.0F, 2221.0F, 2221.0F, 2221.0F, 2.7442775F);
      wall0.setXStart(2221.0F);
      assertEquals(2.7442775F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-785.648F), (-1173.319F), 0.1F);
      wall0.getArcExtent();
      wall0.getXArcCircleCenter();
      wall0.getRightSideShininess();
      Wall wall1 = new Wall((-2368.0918F), 0.0F, 0.0F, 0.1F, (-423.8133F));
      wall1.getXArcCircleCenter();
      wall1.getRightSideShininess();
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.setXStart((-1163.0F));
      assertEquals(1403.6387F, wall0.getLength(), 0.01F);
      
      wall1.containsPoint((-1163.0F), 0.0F, 302.51297F);
      Wall wall2 = wall1.getWallAtEnd();
      wall2.move(0.1F, (-1859.3329F));
      wall1.getLeftSideColor();
      float float0 = wall1.getLength();
      assertEquals(2368.0918F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Wall wall0 = new Wall(2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F, 2206.1853F);
      boolean boolean0 = wall0.intersectsRectangle((-536.2838F), 1487.7472F, 2206.1853F, 2206.1853F);
      assertTrue(boolean0);
      
      float float0 = wall0.getStartPointToEndPointDistance();
      assertEquals(0.0F, float0, 0.01F);
      assertEquals(2206.1853F, wall0.getThickness(), 0.01F);
  }
}
