/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 09:12:11 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.MathContext;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.setWidth(2);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setY((-3706.451F));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.setWidth(2);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.setAngle(0.0F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.setElevation(755.234F);
      homeFurnitureGroup2.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal(1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$16", "", "\"SsWu=]1CQ@`@f", temporaryURLContent0, temporaryURLContent0, 0.3926991F, (-1), 493.38052F, 493.38052F, true, 0.3926991F, (-1), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$16", true, bigDecimal0, bigDecimal0);
      Sash[] sashArray1 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "Unknown resource ", "temp", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 493.38052F, (-1672.79F), (-34.0F), 1, true, (-34.0F), 1422.57F, sashArray1, (float[][]) null, "\"SsWu=]1CQ@`@f", true, false, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "\"SsWu=]1CQ@`@f");
      homeFurnitureGroup0.setWidth(1422.57F);
      homeFurnitureGroup0.clone();
      Float float0 = new Float(1219.289F);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getFileExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setHeight((-3706.451F));
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup1.getWidth();
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.move((-1.0F), (-3706.451F));
      homeFurnitureGroup0.setAngle((-1.0F));
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.intersectsRectangle((-3706.451F), 755.234F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, 493.38052F, sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup1.clone();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      Long long0 = Long.valueOf((long) (-34));
      Float float0 = Float.valueOf(493.38052F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$11", "", "-1/z[bvx}H#r", (String[]) null, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, (-2697.6F), 1.0F, true, 0.5F, 4515.0F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$11", true, true, false, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "NAME_VISIBLE");
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup1.setY(2);
      homeFurnitureGroup1.isDeformable();
      homeFurnitureGroup2.getDepth();
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 493.38052F, 493.38052F, 2, true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.setWidth(1100.6F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.intersectsRectangle((-3706.451F), 1100.6F, 493.38052F, 2);
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "8N", "8N", temporaryURLContent0, temporaryURLContent0, 493.38052F, (-1225.2318F), 970.8491F, (-1225.2318F), true, (-1), (-203.23F), sashArray0, (float[][]) null, "8N", true, bigDecimal0, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(0.0F);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup1.setDepth((-1672.79F));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("(>n[j`]);.4IR", temporaryURLContent0, 755.234F, 493.38052F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray1.length);
      assertEquals(4, sashArray0.length);
      assertNotNull(sashArray1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNotSame(sashArray1, sashArray0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(sashArray1.equals((Object)sashArray0));
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      homeFurnitureGroup0.setHeight(493.38052F);
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      String string0 = homeFurnitureGroup0.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      boolean boolean0 = homeFurnitureGroup0.isDeformable();
      assertEquals(1, linkedList0.size());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "vH}{:qBG4$%'x", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup1.setX((-3706.451F));
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup1.setDepth(493.38052F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-34));
      String[] stringArray0 = new String[2];
      bigDecimal0.intValueExact();
      stringArray0[0] = "Unknown resource ";
      stringArray0[1] = "Unknown resource ";
      Long.valueOf(2782L);
      Long.valueOf((-3796L));
      Long.valueOf((-3796L));
      Long long0 = Long.valueOf((-3796L));
      Float float0 = Float.valueOf((float) 2782L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 2782L, (-34), 2782L, 0.3926991F, true, (-3796L), 1.0F, sashArray0, (float[][]) null, "Unknown resource ", true, false, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.getFurniture();
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup0.getWidth();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), false, 493.38052F, (-1), sashArray0, (float[][]) null, "wpgZk,z", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[13] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknwn 'eso|rce ", "Unknwn 'eso|rce ", "Unknwn 'eso|rce ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
      homeFurnitureGroup0.setNameAngle(2680.0F);
      homeFurnitureGroup0.getHeight();
      Integer integer0 = new Integer((-1445));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, 493.38052F, sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getPoints();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getPlanIcon();
      Random.setNextRandom((-1));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(955.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(2680.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      homeFurnitureGroup0.setHeight((-580.0F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-580.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      Level level0 = new Level("wgZk,z", 0.0F, (-688.4483F), 955.0F);
      homeFurnitureGroup0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[13] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknwn 'eso|rce ", "Unknwn 'eso|rce ", "Unknwn 'eso|rce ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
      homeFurnitureGroup0.setNameAngle(493.38052F);
      homeFurnitureGroup0.getHeight();
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      bigDecimal0.toBigIntegerExact();
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation((-3706.451F));
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      homeFurnitureGroup0.setAngle(0.0F);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setElevation((-3706.451F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(493.38052F);
      CatalogTexture catalogTexture0 = new CatalogTexture("(>n[j`]);.4IR", temporaryURLContent0, 755.234F, 493.38052F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 493.38052F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getCategory();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.setNameAngle(2680.0F);
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.setElevation((-3706.451F));
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setY(755.234F);
      homeFurnitureGroup0.setY((-843.0179F));
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wpgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3683.8982F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown ruesource ", "Unknown ruesource ", "Unknown ruesource ", temporaryURLContent0, temporaryURLContent0, 488.1556F, 488.1556F, 488.1556F, (-1), true, 488.1556F, (-3683.898F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown ruesource ");
      homeFurnitureGroup0.setWidth((-1));
      homeFurnitureGroup0.clone();
      Float float0 = new Float((float) (-1));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation((-3706.451F));
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown ruesource ", "Unknown ruesource ", "Unknown ruesource ", temporaryURLContent0, temporaryURLContent0, 488.1556F, 488.1556F, 488.1556F, (-1), true, 488.1556F, (-3683.0496F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown ruesource ");
      homeFurnitureGroup0.setWidth((-1));
      homeFurnitureGroup0.clone();
      Float float0 = new Float((float) (-1));
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[13] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknwn 'eso|rce ", "Unknwn 'eso|rce ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 493.38052F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.setNameAngle(2680.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeFurnitureGroup0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeFurnitureGroup0.setAngle((-3706.451F));
      homeFurnitureGroup0.setHeight(755.234F);
      homeFurnitureGroup0.setWidth((-3706.451F));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      homeFurnitureGroup0.setAngle(0.0F);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setElevation((-3706.451F));
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-1), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3683.8982F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(2680.0F);
      homeFurnitureGroup0.setHeight((-580.0F));
      homeFurnitureGroup0.isTexturable();
      homeFurnitureGroup0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.removeLastOccurrence(homeFurnitureGroup1);
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.intersectsRectangle(0.0F, (-580.0F), (-3706.451F), 493.38052F);
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setDepth(2);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-3706.451F));
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setX(2);
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Jzd");
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, 493.38052F, sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-34));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-34), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      Integer integer0 = new Integer((-34));
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(755.234F);
      homeFurnitureGroup1.getStaircaseCutOutShape();
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unknown resource ");
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sash0;
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      sashArray0[1] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.setWidth(0.0F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setVisible(true);
      homeFurnitureGroup0.setDepth((-3706.451F));
      Random.setNextRandom(2);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = new BigDecimal(22);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, 22, true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      Float float1 = new Float(755.234F);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(3.4028235E38F);
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation(2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, 493.38052F, sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getModel();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("wgZk,z", "fO:-t6'", "fO:-t6'", temporaryURLContent0, temporaryURLContent0, 781.0F, (-2255.011F), 377.617F, 3.4028235E38F, true, (-2255.011F), 3.4028235E38F, sashArray0, (float[][]) null, "fO:-t6'", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.setWidth(781.0F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "h.8");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setX((-1.0F));
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation((-3706.451F));
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("(>n[j`]);.4IR", temporaryURLContent0, 755.234F, 493.38052F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(755.234F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.2517719F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      
      homeFurnitureGroup0.setElevation((-1.0F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.2517719F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertNull(content0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.2517719F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      
      homeFurnitureGroup0.setY(755.234F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1.2517719F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("><><", homeFurnitureGroup0.getName());
      
      homeFurnitureGroup0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float0 = homeFurnitureGroup1.getWidth();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(493.38052F, float0, 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      boolean boolean0 = homeFurnitureGroup0.isDoorOrWindow();
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(boolean0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-1), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getHeight();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown ruesource ", "Unknown ruesource ", "Unknown ruesource ", temporaryURLContent0, temporaryURLContent0, 488.1556F, 488.1556F, 488.1556F, (-1), true, 488.1556F, (-3683.0496F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wpgZk,z");
      homeFurnitureGroup0.setWidth(488.1556F);
      homeFurnitureGroup0.clone();
      Float float0 = new Float((float) (-1));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      bigDecimal0.shortValueExact();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, false, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(755.234F);
      homeFurnitureGroup1.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup1.isMovable();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Zq]M*)9]1qAM[Q2", "", "", temporaryURLContent0, temporaryURLContent0, 0.0F, (-1.0F), 0.0F, 0.0F, true, (-3706.451F), 0.0F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.FurnitureCategory", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown JeXXsource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.FurnitureCategory");
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.isTopRightPointAt(1.0F, 493.381F, (-76.038F));
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup2.clone();
      HomeFurnitureGroup homeFurnitureGroup4 = homeFurnitureGroup3.clone();
      homeFurnitureGroup4.setX(1.0F);
      homeFurnitureGroup2.getHeight();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.setWidth(1100.6F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      String string0 = "&Gh!<0746<\\u69";
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, string0);
      homeFurnitureGroup1.setAngle(493.38052F);
      homeFurnitureGroup1.setElevation(2);
      homeFurnitureGroup1.getStaircaseCutOutShape();
      homeFurnitureGroup1.setX(2);
      homeFurnitureGroup1.getFurniture();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(2);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-730.1F), 0.0F, 0.0F, 3995.13F, (-1.0F));
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("wgZk,z", (String) null, "Jzd", temporaryURLContent0, temporaryURLContent0, 0.0F, (-849.7F), (-21.260057F), 0.0F, false, (-730.1F), 0.0F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.CatalogDoorOrWindow", false, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "JTd< 3@-kR%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "BXEnQ#%5@[j&$!>XF");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unknown resource ", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(2680.0F);
      homeFurnitureGroup0.setHeight((-580.0F));
      homeFurnitureGroup0.setX(955.0F);
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown ruesource ", "Unknown ruesource ", "Unknown ruesource ", temporaryURLContent0, temporaryURLContent0, 488.1556F, 488.1556F, 488.1556F, (-1), true, 488.1556F, (-3683.0496F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown ruesource ");
      homeFurnitureGroup0.setWidth((-1));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      Float float0 = new Float((float) (-1));
      homeFurnitureGroup1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.setWidth(2);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-3706.451F));
      homeFurnitureGroup0.setY((-3706.451F));
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "vH}{:qBG4$%'x", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup1.getHeight();
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3683.8982F), sashArray0, (float[][]) null, "wpgZk,z", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-27));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-27), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      Integer integer0 = new Integer(2138813611);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.setWidth(1100.6F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.intersectsRectangle((-3706.451F), 1100.6F, 493.38052F, 2);
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setDepth(3.363059F);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      Float float1 = new Float(493.38052F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.getValueAddedTax();
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      homeFurnitureGroup2.setAngle(3.4028235E38F);
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup3.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-1.0F));
      homeFurnitureGroup0.setVisible(false);
      homeFurnitureGroup0.setDepth(4004.45F);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "+b");
      homeFurnitureGroup0.setWidth((-3706.451F));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setX(2);
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup0.setWidth(129.06F);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.getValueAddedTax();
      CatalogTexture catalogTexture0 = new CatalogTexture("(>n[j`]);.4IR", temporaryURLContent0, 755.234F, 493.38052F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.isResizable();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      Long long0 = Long.valueOf((long) (-34));
      Float float0 = Float.valueOf(493.38052F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$11", "", "-1/z[bvx}H#r", (String[]) null, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, (-2697.6F), 1.0F, true, 0.5F, 4515.0F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$11", false, true, false, (BigDecimal) null, (BigDecimal) null, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "NAME_VISIBLE");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "4'?g/XN4=04e:~C");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation(755.234F);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Unknown resource ");
      MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sash0;
      sashArray0[2] = sashArray0[0];
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><l>{");
      homeFurnitureGroup0.setWidth(1100.6F);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setVisible(true);
      homeFurnitureGroup0.setDepth(1100.6F);
      homeFurnitureGroup0.setWidth((-0.79F));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.setElevation(2);
      homeFurnitureGroup0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(493.38052F);
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(1628.8016F);
      homeFurnitureGroup0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-3706.451F));
      catalogDoorOrWindow0.getWallDistance();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle((-12.16483F));
      homeFurnitureGroup0.containsPoint(2, 493.38052F, 1695.2842F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "vH}{:qBG4$%'x", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      float float0 = new Float((-3706.451F));
      homeFurnitureGroup0.setDepth((-1));
      homeFurnitureGroup1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[5];
      BigDecimal bigDecimal0 = new BigDecimal((-14));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown ruesource ", "Unknown ruesource ", "Unknown ruesource ", temporaryURLContent0, temporaryURLContent0, 488.1556F, 488.1556F, 488.1556F, (-14), true, 488.1556F, (-3683.0496F), sashArray0, (float[][]) null, "G8#=mF$8Er%Pc!{a,\"", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown ruesource ");
      homeFurnitureGroup0.setWidth((-14));
      homeFurnitureGroup0.containsPoint(78.1F, (-14), (-14));
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      Float float0 = new Float((float) (-14));
      homeFurnitureGroup1.setDepth(1411.0F);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-27));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-27), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      Integer integer0 = new Integer(2138813611);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.addFirst(homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.setAngle(2);
      homeFurnitureGroup0.setElevation(0.0F);
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.setY(2);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal((-34));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-34), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-34.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-34.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-34.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-34.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-34.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-34.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals((-34.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setDepth((-34));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-34.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals((-34.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertEquals(955.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getCreator());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      float[][] floatArray0 = homeFurnitureGroup0.getModelRotation();
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, sashArray0.length);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(955.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(2680.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getPrice();
      assertNotNull(bigDecimal2);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((byte)2, bigDecimal2.byteValue());
      assertEquals((short)2, bigDecimal2.shortValue());
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      homeFurnitureGroup0.setElevation((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals((-3706.451F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals((-3706.451F), float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      
      boolean boolean0 = homeFurnitureGroup0.isBottomRightPointAt(418.80414F, 0.5F, (-580.0F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(boolean0);
      
      homeFurnitureGroup0.setAngle(0.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("Unknown resource ", temporaryURLContent0, (-1671.9037F), (-1671.9037F));
      assertNotNull(catalogTexture0);
      assertNull(catalogTexture0.getId());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertEquals("Unknown resource ", catalogTexture0.getName());
      assertEquals((-1671.9037F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-1671.9037F), catalogTexture0.getWidth(), 0.01F);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      homeFurnitureGroup0.setY((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = 493.38052F;
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      float float1 = 755.234F;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 493.38052F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(17, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float2 = new Float((-3706.451F));
      assertNotNull(float2);
      assertEquals((-3706.451F), (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      
      float float3 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(17, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3706.451F), float3, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotEquals(float3, float0, 0.01F);
      assertNotEquals(float3, float1, 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(17, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(17, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle((-12.16483F));
      assertEquals(1, linkedList0.size());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "vH}{:qBG4$%'x", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      
      homeFurnitureGroup0.setElevation(493.38052F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float0 = homeFurnitureGroup1.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, float0, 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setDepth((-1));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      homeFurnitureGroup1.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(3, (int)homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal2);
      assertEquals(1, linkedList0.size());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((short)6, bigDecimal2.shortValue());
      assertEquals((byte)6, bigDecimal2.byteValue());
      assertNotSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(2.0F);
      assertEquals(1, linkedList0.size());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      
      boolean boolean0 = homeFurnitureGroup0.containsPoint((-1.0F), (-3706.451F), (-3706.451F));
      assertEquals(1, linkedList0.size());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, 493.38052F, sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float[][] floatArray0 = homeFurnitureGroup1.getModelRotation();
      assertEquals(3, floatArray0.length);
      assertNotNull(floatArray0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sash0;
      sashArray0[2] = sashArray0[0];
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-3706.451F), float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      
      homeFurnitureGroup0.setWidth(0.0F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setVisible(true);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      
      homeFurnitureGroup0.setDepth(755.234F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unknown resource ", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      Sash[] sashArray0 = new Sash[0];
      MathContext mathContext0 = MathContext.DECIMAL128;
      assertNotNull(mathContext0);
      
      BigDecimal bigDecimal1 = new BigDecimal(1, mathContext0);
      assertNotNull(bigDecimal1);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 2460.4175F, 2460.4175F, 2901.0F, 2460.4175F, true, 2460.4175F, 2460.4175F, sashArray0, (float[][]) null, "h<", true, bigDecimal1, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("h<", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2901.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("h<", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2901.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2901.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2460.4175F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2460.4175F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2460.4175F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1230.2087F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1230.2087F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("h<", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2901.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2460.4175F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2901.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(2460.4175F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(2460.4175F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2460.4175F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2460.4175F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(1230.2087F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1230.2087F, homeDoorOrWindow0.getX(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2460.4175F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2460.4175F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2901.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1230.2087F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1230.2087F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      
      homeFurnitureGroup0.setWidth(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2460.4175F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2901.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1230.2087F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1230.2087F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "<h7EA%UHFw<Au");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals("<h7EA%UHFw<Au", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2901.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2460.4175F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setNameYOffset(136.4911F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2460.4175F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(136.4911F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2901.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1230.2087F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1230.2087F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      boolean boolean0 = homeFurnitureGroup1.isTopRightPointAt((-1610.9348F), (-1), 2460.4175F);
      assertEquals(1, linkedList0.size());
      assertEquals("<h7EA%UHFw<Au", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2901.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2460.4175F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(boolean0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals("wgZk,z", homeFurnitureGroup2.getName());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(136.4911F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(2460.4175F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(2460.4175F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(2460.4175F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(2901.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(2460.4175F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(136.4911F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2901.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1230.2087F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(1230.2087F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup1.setX((-1));
      assertEquals(1, linkedList0.size());
      assertEquals("<h7EA%UHFw<Au", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2901.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2460.4175F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float0 = homeFurnitureGroup1.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals("<h7EA%UHFw<Au", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(2901.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(1230.2087F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2460.4175F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2460.4175F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(2901.0F, float0, 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      Float float1 = new Float(493.38052F);
      assertNotNull(float1);
      assertEquals(493.38052F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      assertNotNull(homeFurnitureGroup0);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(493.38052F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getValueAddedTax();
      assertNotNull(bigDecimal2);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      assertEquals((byte)4, bigDecimal2.byteValue());
      assertEquals((short)4, bigDecimal2.shortValue());
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      homeFurnitureGroup0.setAngle(658.755F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(5.303733F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      
      homeFurnitureGroup0.setElevation((-1671.9037F));
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(5.303733F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertNull(content0);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(5.303733F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(3.0517578E-5F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(5.303733F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-1.0493025E-6F), homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1671.9037F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(377.61697F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-1671.9037F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1671.9037F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setY(0.5F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(5.303733F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1671.9037F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(5.303733F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unknown resource ");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sash0;
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      sashArray0[1] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 2, 493.38052F, 2, true, 2, (-3724.3071F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-3724.3071F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-3724.3071F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals((-3724.3071F), float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-3724.3071F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-3724.3071F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-3724.3071F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-3724.3071F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      
      homeFurnitureGroup0.setWidth(0.0F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      
      homeFurnitureGroup0.setVisible(true);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      
      homeFurnitureGroup0.setDepth((-3724.3071F));
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-3724.3071F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      
      float float1 = homeFurnitureGroup0.getDepth();
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("wgZk,z", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-3724.3071F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      assertEquals((-3724.3071F), float1, 0.01F);
      assertEquals(float1, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      sashArray0[2] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(boolean1);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Integer integer0 = new Integer(3);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(3, (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = new BigDecimal(22);
      assertNotNull(bigDecimal0);
      assertEquals((short)22, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 495.26813F, 495.26813F, 495.26813F, 22, true, 495.26813F, (-3706.451F), sashArray0, (float[][]) null, "Ng)", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)22, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ng)", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(495.26813F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)22, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ng)", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(495.26813F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(495.26813F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(495.26813F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(495.26813F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(247.63406F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(247.63406F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(22.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(495.26813F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(22.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)22, bigDecimal0.shortValue());
      assertEquals((byte)22, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(22.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Ng)", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(495.26813F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(495.26813F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(495.26813F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(495.26813F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(495.26813F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(247.63406F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(247.63406F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(22.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(495.26813F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(22.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(495.26813F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(247.63406F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(247.63406F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(495.26813F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(495.26813F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(495.26813F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(247.63406F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(247.63406F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(495.26813F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(495.26813F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(1, linkedList0.size());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(495.26813F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(247.63406F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(247.63406F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(495.26813F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(495.26813F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(495.26813F, float0, 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(495.26813F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(247.63406F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(247.63406F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(22.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(495.26813F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(495.26813F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((short)22, bigDecimal1.shortValue());
      assertEquals((byte)22, bigDecimal1.byteValue());
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      
      homeFurnitureGroup0.setWidth((-1));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setY(493.38052F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertEquals((-1), (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      
      homeFurnitureGroup1.setColor(integer1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals((-1), (int)homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(493.38052F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals((-1), (int)homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals((-1), (int)homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float0 = homeFurnitureGroup1.getDepth();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals((-1), (int)homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "vH}{:qBG4$%'x", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "vH}{:qBG4$%'x", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("vH}{:qBG4$%'x", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setX((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-3706.451F), homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-3706.451F), homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals((-3706.451F), homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(246.69026F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup2.setX((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-3706.451F), homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals((-3706.451F), homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(246.69026F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[0] = sashArray0[0];
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((byte)12, bigDecimal1.byteValue());
      assertEquals((short)12, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(2);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setElevation(0.0F);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setY(2);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      int int0 = Float.floatToIntBits(0.0F);
      assertEquals(0, int0);
      
      int int1 = Float.floatToIntBits(0.0F);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      homeFurnitureGroup0.setShininess((Float) 0.0F);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getShininess(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertEquals(0, (int)integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      
      boolean boolean1 = integer0.equals(integer1);
      assertFalse(boolean1);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setColor(integer1);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0, (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      
      homeFurnitureGroup0.setHeight(2680.0F);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0, (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(2680.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      Level level0 = homeFurnitureGroup0.getLevel();
      assertNull(level0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      homeFurnitureGroup0.setLevel((Level) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      homeFurnitureGroup0.setWidth((-1));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setX((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-3706.451F), homeFurnitureGroup1.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      
      boolean boolean0 = homeFurnitureGroup0.isDoorOrWindow();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(boolean0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown JeXXsource ", "Unknown JeXXsource ", "Unknown JeXXsource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.381F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(3, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.381F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getId());
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(3, sashArray0.length);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.381F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getId());
      assertEquals((-3706.451F), float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.381F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.381F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(3, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.381F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown JeXXsource ", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.381F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("Unknown JeXXsource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown JeXXsource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setWidth(2);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setY((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.381F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-3706.451F), homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setVisible(false);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.381F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-3706.451F), homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup1.setDepth((-1386.566F));
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.381F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-1386.566F), homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals((-3706.451F), homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.381F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("Unknown JeXXsource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-34));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-34), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-34.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-34.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-34.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-34.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-34.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-34), bigDecimal0.shortValue());
      assertEquals((byte) (-34), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-34.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-34.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-34.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup0.getFurniture();
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-34.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(list0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-34.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-34.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(list0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup2);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-34.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-34.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getShininess());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(246.69026F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup2.getX(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals((-34.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals((-34.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getColor());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(955.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(2680.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getPrice();
      assertNotNull(bigDecimal2);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(3.363059F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((byte)2, bigDecimal2.byteValue());
      assertEquals((short)2, bigDecimal2.shortValue());
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      homeFurnitureGroup0.setAngle((-2227.36F));
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(3.1706767F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, 493.38052F, 2, true, 0.0F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3706.451F), float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertEquals(float1, float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow1.getDescription());
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-3706.451F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("Unknown resource ", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow1.getName());
      assertEquals(493.38052F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "uI:c(c^[4b.l");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("uI:c(c^[4b.l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("uI:c(c^[4b.l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(781.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.8850219F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("uI:c(c^[4b.l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("wgZk,z", temporaryURLContent0, (-604.667F), 1.0F);
      assertNotNull(catalogTexture0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-604.667F), catalogTexture0.getWidth(), 0.01F);
      assertNull(catalogTexture0.getId());
      assertNull(catalogTexture0.getCreator());
      assertEquals("wgZk,z", catalogTexture0.getName());
      assertEquals(1.0F, catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      homeFurnitureGroup0.setY(0.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.8850219F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("uI:c(c^[4b.l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.8850219F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("uI:c(c^[4b.l", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setWidth((-1));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setY(493.38052F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Integer integer0 = new Integer((-1));
      assertNotNull(integer0);
      assertEquals((-1), (int)integer0);
      
      homeFurnitureGroup1.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), (int)homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertEquals(246.69026F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals((-1.0F), homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup2.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      float float0 = homeFurnitureGroup0.getDepth();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(493.38052F, float0, 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getPrice();
      assertNotNull(bigDecimal2);
      assertEquals(1, linkedList0.size());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      
      Content content0 = homeFurnitureGroup2.getPlanIcon();
      assertNull(content0);
      assertEquals(1, linkedList0.size());
      assertEquals(246.69026F, homeFurnitureGroup2.getY(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals((-1.0F), homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup2.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 493.38052F, 493.38052F, 493.38052F, (-1), true, 493.38052F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setWidth((-1));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setX((-3706.451F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-3706.451F), homeFurnitureGroup1.getX(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("Unknown resource ", homeFurnitureGroup0.getName());
      assertEquals(246.69026F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Unknown resource ";
      stringArray0[1] = "wgZk,z";
      stringArray0[2] = "";
      stringArray0[3] = "com.eteks.sweethome3d.model.HomeFurnitureGroup";
      stringArray0[4] = "Unknown resource ";
      stringArray0[5] = "";
      Long long0 = Long.valueOf((-2513L));
      assertNotNull(long0);
      assertEquals((-2513L), (long)long0);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomeFurnitureGroup", "wgZk,z", "", "Unknown resource ", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 493.38052F, (-3715.339F), (-3715.339F), 0.0F, true, 493.38052F, (-859.5891F), sashArray0, (float[][]) null, "42`", true, true, true, bigDecimal0, bigDecimal0, ";Z~8U!_4[ZX");
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("42`", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals((-859.5891F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-3715.339F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-2513L), (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(";Z~8U!_4[ZX", catalogDoorOrWindow1.getCurrency());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow1.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals((-3715.339F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((float)float0, (float)float1, 0.01F);
      
      FurnitureCategory furnitureCategory0 = catalogDoorOrWindow1.getCategory();
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertNull(furnitureCategory0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("42`", catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertEquals((-859.5891F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow1.getId());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals((-3715.339F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(493.38052F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(493.38052F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-2513L), (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(";Z~8U!_4[ZX", catalogDoorOrWindow1.getCurrency());
      assertEquals("", catalogDoorOrWindow1.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow1.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals((-3715.339F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertEquals((float)float0, (float)float1, 0.01F);
      
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals((byte)12, bigDecimal1.byteValue());
      assertEquals((short)12, bigDecimal1.shortValue());
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle((-12.16483F));
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertNull(string0);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      String string0 = "Unknown resource ";
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "Unknown resource ");
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[1] = sash0;
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      sashArray0[1] = sashArray0[2];
      float float0 = 3651.8955F;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("wgZk,z", " /p(o/N", "wgZk,z", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 493.38052F, 0.0F, 0.0F, true, 3651.8955F, 0.0F, sashArray0, (float[][]) null, "wgZk,z", false, (BigDecimal) null, (BigDecimal) null);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(" /p(o/N", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3651.8955F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(" /p(o/N", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3651.8955F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(" /p(o/N", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3651.8955F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3651.8955F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(" /p(o/N", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toString());
      assertNull(uRL1.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/Unknown resource", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(" /p(o/N", catalogDoorOrWindow0.getName());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3651.8955F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3651.8955F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(" /p(o/N", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("wgZk,z", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      boolean boolean0 = linkedList0.removeFirstOccurrence(sashArray0[1]);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "wgZk,z");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 955.0F, 493.38052F, 493.38052F, 493.38052F, true, 0.0F, 955.0F, sashArray0, (float[][]) null, "Jzd", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallThickness();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertNotEquals(float1, float0, 0.01F);
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(955.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(955.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(246.69026F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(477.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertEquals((-1), uRL1.getPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals(493.38052F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(955.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(955.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("Jzd", catalogDoorOrWindow0.getCreator());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(64.19847F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.366618F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      
      homeFurnitureGroup0.setModelMirrored(false);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(477.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.366618F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(955.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(246.69026F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[3] = sashArray0[2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = new Float(493.38052F);
      assertEquals(493.38052F, float1, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup0.setAngle(493.38052F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getValueAddedTax();
      assertNotNull(bigDecimal2);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)4, bigDecimal2.byteValue());
      assertEquals((short)4, bigDecimal2.shortValue());
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      
      CatalogTexture catalogTexture0 = new CatalogTexture("(>n[j`]);.4IR", temporaryURLContent0, 755.234F, 493.38052F);
      assertNotNull(catalogTexture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(493.38052F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(755.234F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("(>n[j`]);.4IR", catalogTexture0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertNotNull(homeTexture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(493.38052F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(755.234F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("(>n[j`]);.4IR", catalogTexture0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(493.38052F, homeTexture0.getHeight(), 0.01F);
      assertEquals("(>n[j`]);.4IR", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(755.234F, homeTexture0.getWidth(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      homeFurnitureGroup0.setTexture(homeTexture0);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(catalogTexture0.isModifiable());
      assertEquals(493.38052F, catalogTexture0.getHeight(), 0.01F);
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals(755.234F, catalogTexture0.getWidth(), 0.01F);
      assertEquals("(>n[j`]);.4IR", catalogTexture0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(493.38052F, homeTexture0.getHeight(), 0.01F);
      assertEquals("(>n[j`]);.4IR", homeTexture0.getName());
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals(755.234F, homeTexture0.getWidth(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2, (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      boolean boolean0 = homeFurnitureGroup0.isDeformable();
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2, (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.2920697F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.CatalogDoorOrWindow");
      assertNotNull(homeFurnitureGroup0);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      homeFurnitureGroup0.setWidth(2);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "Unknown resource ");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setAngle(0.0F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup1.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup1.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getY(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(2.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(Float.NaN, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup2.setElevation(755.234F);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getY(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(Float.NaN, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(755.234F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      
      String string0 = homeFurnitureGroup2.getStaircaseCutOutShape();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Unknown resource ", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup2.getY(), 0.01F);
      assertNull(homeFurnitureGroup2.getShininess());
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isModelMirrored());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(Float.NaN, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeFurnitureGroup2.getName());
      assertEquals(755.234F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals(493.38052F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wpgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = new BigDecimal(5015);
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short)5015, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "", "", (Content) null, temporaryURLContent0, 1152.72F, (-818.0F), (-721.3712F), 6087.099F, true, 492.56598F, (-721.3712F), sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short)5015, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-818.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(6087.099F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1152.72F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(492.56598F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short)5015, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-818.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(6087.099F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1152.72F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(492.56598F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-818.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-721.3712F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-721.3712F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-409.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(6087.099F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1152.72F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(492.56598F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(576.36F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6087.099F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getRef());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte) (-105), bigDecimal0.byteValue());
      assertEquals((short)5015, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-818.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(6087.099F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1152.72F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(492.56598F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-721.3712F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-818.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-721.3712F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-721.3712F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-409.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(6087.099F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1152.72F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(492.56598F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(576.36F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(6087.099F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$14");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-721.3711F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(6087.099F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(6087.099F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      
      homeFurnitureGroup0.setWidth(1.0F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-721.3711F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(6087.099F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(6087.099F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-721.3711F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(6087.099F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(6087.099F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-721.3711F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup1.getName());
      assertEquals(6087.099F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(6087.099F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float0 = homeFurnitureGroup1.getHeight();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-721.3711F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(6087.099F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(6087.099F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals((-721.3711F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", homeFurnitureGroup1.getName());
      assertEquals(6087.099F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(6087.099F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-721.3711F), float0, 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[17];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("wgZk,z", "wgZk,z", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 755.234F, 755.234F, 0.0F, 755.234F, true, (-1386.9629F), 0.0F, sashArray0, (float[][]) null, ":J1[", true, bigDecimal0, bigDecimal0);
      assertEquals(17, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(":J1[", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1386.9629F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(17, sashArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(":J1[", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1386.9629F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(17, sashArray0.length);
      assertEquals(17, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(":J1[", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1386.9629F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(17, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(":J1[", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1386.9629F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(755.234F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1386.9629F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("wgZk,z", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(17, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(755.234F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(755.234F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getName());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(":J1[", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1386.9629F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(755.234F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1386.9629F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(755.234F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("wgZk,z", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ":J1[");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(755.234F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(":J1[", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(377.617F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      homeFurnitureGroup0.setWidth((-2826.293F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(":J1[", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(377.617F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2826.293F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(":J1[", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(377.617F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2826.293F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((short)6, bigDecimal1.shortValue());
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      boolean boolean0 = homeFurnitureGroup0.intersectsRectangle(755.234F, 1100.6F, (-1386.9629F), 1100.6F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(":J1[", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(377.617F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2826.293F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "QYj~*F,EK2YWs");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("QYj~*F,EK2YWs", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(755.234F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setVisible(false);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("QYj~*F,EK2YWs", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(755.234F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setDepth(0.3926991F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(755.234F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(":J1[", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.3926991F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(377.617F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-2826.293F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(755.234F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      Content content0 = homeFurnitureGroup1.getPlanIcon();
      assertNull(content0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("QYj~*F,EK2YWs", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(755.234F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[3] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "com.eteks.sweethome3d.model.CatalogDoorOrWindow", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float((-3706.451F));
      assertNotNull(float0);
      assertEquals((-3706.451F), (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-3706.451F), float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", homeDoorOrWindow0.getDescription());
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogDoorOrWindow", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setAngle((-12.16483F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      
      homeFurnitureGroup0.setElevation(2);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.4015404F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[1] = sashArray0[0];
      sashArray0[2] = sashArray0[1];
      BigDecimal bigDecimal0 = new BigDecimal(122);
      assertNotNull(bigDecimal0);
      assertEquals((short)122, bigDecimal0.shortValue());
      assertEquals((byte)122, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("MOVABLE", "lNpt7:Q?o", "Unknown resource ", temporaryURLContent0, temporaryURLContent0, 122, 122, (-1781.088F), 0.0F, true, 755.234F, 552.311F, sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)122, bigDecimal0.shortValue());
      assertEquals((byte)122, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(122.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(122.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1781.088F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("MOVABLE", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("lNpt7:Q?o", catalogDoorOrWindow0.getName());
      assertEquals(552.311F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Float float0 = new Float(450.8738F);
      assertNotNull(float0);
      assertEquals(450.8738F, (float)float0, 0.01F);
      
      float float1 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)122, bigDecimal0.shortValue());
      assertEquals((byte)122, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(122.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(122.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1781.088F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("MOVABLE", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("lNpt7:Q?o", catalogDoorOrWindow0.getName());
      assertEquals(552.311F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(552.311F, float1, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)122, bigDecimal0.shortValue());
      assertEquals((byte)122, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(122.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(122.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1781.088F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("MOVABLE", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("lNpt7:Q?o", catalogDoorOrWindow0.getName());
      assertEquals(552.311F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(61.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(61.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1781.088F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("lNpt7:Q?o", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("MOVABLE", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(552.311F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(122.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(122.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNull(uRL1.toString());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)122, bigDecimal0.shortValue());
      assertEquals((byte)122, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(122.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(122.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1781.088F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("MOVABLE", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertEquals("lNpt7:Q?o", catalogDoorOrWindow0.getName());
      assertEquals(552.311F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(61.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(61.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1781.088F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("lNpt7:Q?o", homeDoorOrWindow0.getName());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("MOVABLE", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(552.311F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getDescription());
      assertEquals(122.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(122.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(122.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(61.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(61.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(122.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setNameAngle(1759.89F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(122.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(61.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.5981286F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(61.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(122.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      float float2 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(122.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(61.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.5981286F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(61.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(122.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte) (-98), bigDecimal1.byteValue());
      assertEquals((short)15006, bigDecimal1.shortValue());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(122.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(61.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.5981286F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(61.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(122.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      sashArray0[1] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Unknown resource ", "Unknown resource ", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 0.0F, 755.234F, 493.38052F, 2, true, 755.234F, (-3706.451F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      float float0 = catalogDoorOrWindow0.getWallDistance();
      assertEquals(4, sashArray0.length);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-3706.451F), float0, 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      Sash[] sashArray1 = catalogDoorOrWindow0.getSashes();
      assertEquals(4, sashArray0.length);
      assertEquals(4, sashArray1.length);
      assertNotNull(sashArray1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray1, sashArray0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray1.equals((Object)sashArray0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "><><");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      
      Sash[] sashArray2 = homeDoorOrWindow0.getSashes();
      assertEquals(4, sashArray2.length);
      assertEquals(4, sashArray0.length);
      assertNotNull(sashArray2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(sashArray2, sashArray1);
      assertNotSame(sashArray2, sashArray0);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray0, sashArray2);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(sashArray2.equals((Object)sashArray1));
      assertFalse(sashArray2.equals((Object)sashArray0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("Unknown resource ", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("Unknown resource ", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(493.38052F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("wgZk,z", homeDoorOrWindow1.getDescription());
      assertEquals(377.617F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(755.234F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(sashArray0.equals((Object)sashArray2));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(4, sashArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals((-1), uRL1.getPort());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNull(uRL1.getRef());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)2, bigDecimal0.shortValue());
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(755.234F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(755.234F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("Unknown resource ", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(493.38052F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(755.234F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(755.234F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(493.38052F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Unknown resource ", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(2.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-3706.451F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(377.617F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertNotSame(sashArray0, sashArray1);
      assertNotSame(sashArray0, sashArray2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      assertFalse(sashArray0.equals((Object)sashArray1));
      assertFalse(sashArray0.equals((Object)sashArray2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "ittLqR#&6l");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(755.234F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("ittLqR#&6l", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(493.38052F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(377.617F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(755.234F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("><><", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((byte)6, bigDecimal1.byteValue());
      assertEquals((short)6, bigDecimal1.shortValue());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      homeFurnitureGroup1.setAngle(0.4015404F);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.4015404F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(755.234F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("ittLqR#&6l", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setModelMirrored(true);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.4015404F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(755.234F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(377.617F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("ittLqR#&6l", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, "wgZk,z", uRLStreamHandler0);
      assertNotNull(uRL1);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("zcs|HE!-~!v$", "zcs|HE!-~!v$", "wgZk,z", temporaryURLContent0, temporaryURLContent0, 493.38052F, (-1), (-1), 493.38052F, false, (-361.73126F), (-1386.566F), sashArray0, (float[][]) null, "wgZk,z", true, bigDecimal0, bigDecimal0);
      assertEquals(0, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1386.566F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-361.73126F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1386.566F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-361.73126F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1386.566F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("zcs|HE!-~!v$", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-361.73126F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zcs|HE!-~!v$", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      linkedList0.addFirst(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL1.toString());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals(0, uRL1.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(493.38052F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1386.566F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(493.38052F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-361.73126F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("zcs|HE!-~!v$", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("wgZk,z", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1386.566F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("zcs|HE!-~!v$", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("wgZk,z", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(246.69026F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-361.73126F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(493.38052F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zcs|HE!-~!v$", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertFalse(uRL1.equals((Object)uRL0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zcs|HE!-~!v$");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals("zcs|HE!-~!v$", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      
      homeFurnitureGroup0.setWidth(1100.6F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals("zcs|HE!-~!v$", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1100.6F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "gROfWk)@ D`79|v8,L");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(Float.NaN, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(Float.NaN, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(493.38052F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("gROfWk)@ D`79|v8,L", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-1.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals("zcs|HE!-~!v$", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1100.6F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(493.38052F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertEquals(493.38052F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(1100.6F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertEquals("zcs|HE!-~!v$", homeFurnitureGroup2.getName());
      assertNull(homeFurnitureGroup2.getColor());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setX((-1.0F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(493.38052F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals("zcs|HE!-~!v$", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(493.38052F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(1100.6F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
  }
}
