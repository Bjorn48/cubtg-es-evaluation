/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 17:22:45 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.impl.SimpleArea;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleSector;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import java.awt.Point;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PositionSwitch_ESTest extends PositionSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1796, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(5, simpleCombatant0, positionSwitch0.player1);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-1), (String) null, characterClass0, simpleWeapon0, "file not found by ClassLoader: /images/fortbattleBackground.png");
      PositionSwitch positionSwitch2 = new PositionSwitch(5, simpleCombatant1, positionSwitch1.player2);
      // Undeclared exception!
      try { 
        positionSwitch2.compareTo(positionSwitch1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1796, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-1), (String) null, characterClass0, simpleWeapon0, "file not found by ClassLoader: /images/fortbattleBackground.png");
      PositionSwitch positionSwitch1 = new PositionSwitch(5, simpleCombatant1, positionSwitch0.player2);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertEquals(1, int0);
      assertEquals(5, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1796, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "");
      PositionSwitch positionSwitch0 = new PositionSwitch(0, simpleCombatant0, simpleCombatant1);
      positionSwitch0.hashCode();
      assertEquals(0, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PositionSwitch positionSwitch0 = null;
      try {
        positionSwitch0 = new PositionSwitch((-2532), (Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1796, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((int) positionSwitch0.health2, positionSwitch0.player1, positionSwitch0.player1);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertFalse(boolean0);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals(778, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "E&cjj26pz`+");
      PositionSwitch positionSwitch1 = new PositionSwitch((-1), simpleCombatant1, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertFalse(boolean0);
      assertEquals((-1), positionSwitch1.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertTrue(boolean0);
      assertEquals((-1), positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(1796, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 373, "A\"W~I&0)wGG2Y", characterClass0, simpleWeapon0, "file not found by ClassLoader: /images/fortbattleBackground.png");
      PositionSwitch positionSwitch0 = new PositionSwitch(2667, simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals((Object) null);
      assertEquals(2667, positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, false, false, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(1, "file not found by ClassLoader: /images/fortbattleBackground.png", 1, 1);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "file not found by ClassLoader: /images/fortbattleBackground.png");
      PositionSwitch positionSwitch0 = new PositionSwitch(0, simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(1, simpleCombatant0, simpleCombatant0);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals(1, int0);
      assertEquals(1, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Point point0 = new Point();
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, true, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 0, simpleArea0, true);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(23, "file not found by ClassLoader: /images/fortbattleBackground.png", 23, 23);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "file not found by ClassLoader: /images/fortbattleBackground.png");
      PositionSwitch positionSwitch0 = new PositionSwitch(0, simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(23, simpleCombatant0, simpleCombatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals(0, positionSwitch0.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 0, "", characterClass0, simpleWeapon0, "E&cjj26pz`+");
      PositionSwitch positionSwitch1 = new PositionSwitch((-1), simpleCombatant1, simpleCombatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals((-1), positionSwitch1.round);
      assertEquals(63, int0);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals((-1), positionSwitch1.round);
      assertEquals(0, int0);
      assertTrue(positionSwitch1.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals(positionSwitch0);
      assertEquals((-1), positionSwitch0.round);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      Object object0 = new Object();
      boolean boolean0 = positionSwitch0.equals(object0);
      assertEquals((-1), positionSwitch0.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.ATTACKER;
      Point point0 = new Point(0, 0);
      CharacterClass characterClass0 = CharacterClass.WORKER;
      SimpleSector simpleSector0 = new SimpleSector(0, true, true, 0, 0, false, 0, characterClass0);
      SimpleArea simpleArea0 = new SimpleArea(point0, simpleSector0);
      CombatantState combatantState0 = new CombatantState(simpleArea0, 778, simpleArea0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 0);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 0, "file not found by ClassLoader: /images/fortbattleBackground.png", characterClass0, simpleWeapon0, "6qO0[(4ib");
      PositionSwitch positionSwitch0 = new PositionSwitch((-1), simpleCombatant0, simpleCombatant0);
      positionSwitch0.hashCode();
      assertEquals((-1), positionSwitch0.round);
  }
}
