/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:19:57 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.Backbone;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.IBackboneProgressListener;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.StatisticsSolver;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Backbone_ESTest extends Backbone_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIterator0).primeImplicant();
      doReturn(971).when(modelIterator0).nVars();
      IVecInt iVecInt0 = backbone0.compute((ISolver) modelIterator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
      try { 
        backbone0.compute((ISolver) statisticsSolver0, (IVecInt) vecInt0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[9];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1).when(iSolver0).nVars();
      doReturn(intArray0).when(iSolver0).primeImplicant();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      int[] intArray1 = new int[2];
      intArray1[0] = (-29);
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[3] = (-1162);
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, (IVecInt) null, 43);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      Backbone backbone1 = Backbone.ibb();
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1, 7).when(iSolver0).nVars();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).primeImplicant();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray1 = new int[2];
      IVecInt iVecInt0 = backbone1.compute(iSolver0, intArray1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, iVecInt0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) minimal4InclusionModel0, iVecInt0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int int0 = backbone0.getNumberOfSatCalls();
      //  // Unstable assertion: assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Backbone.bb();
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[2] = 1;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1).when(iSolver0).nVars();
      doReturn(intArray0).when(iSolver0).primeImplicant();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      assertEquals(2, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-1264)).when(modelIterator0).nVars();
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) fullClauseSelectorSolver0, (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1264
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int[] intArray0 = new int[5];
      intArray0[2] = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) dimacsStringSolver0, intArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // bitIndex < 0: -2147483648
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1, 0).when(iSolver0).nVars();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).primeImplicant();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIterator0).primeImplicant();
      doReturn((-1289)).when(modelIterator0).nVars();
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) fullClauseSelectorSolver0, iVecInt0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // nbits < 0: -1289
         //
         verifyException("java.util.BitSet", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      int[] intArray0 = new int[2];
      VecInt vecInt0 = new VecInt();
      vecInt0.shrink((-853));
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIterator0).primeImplicant();
      doReturn(971).when(modelIterator0).nVars();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) modelIterator0, (IVecInt) vecInt0, (IVecInt) vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.sat4j.core.VecInt$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      try { 
        backbone0.compute((ISolver) statisticsSolver0, (IVecInt) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      ModelIterator modelIterator0 = new ModelIterator(statisticsSolver0);
      try { 
        backbone0.compute((ISolver) modelIterator0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // That solver only compute statistics
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Backbone.bb();
      Backbone backbone0 = Backbone.ibb();
      assertEquals(0, backbone0.getNumberOfSatCalls());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 4485;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(1, 1, 7).when(iSolver0).nVars();
      doReturn((Object) intArray0, (Object) intArray0).when(iSolver0).primeImplicant();
      doReturn((IConstr) null, (IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(true, false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn("").when(iSolver0).toString(anyString());
      int[] intArray1 = new int[2];
      intArray1[0] = 0;
      intArray0[3] = 0;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray1);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(iSolver0, iVecInt0);
      minimal4InclusionModel0.setDBSimplificationAllowed(false);
      minimal4InclusionModel0.setTimeout((-2119));
      minimal4InclusionModel0.toString("");
      Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray1, iVecInt0, 15);
      backbone0.compute((ISolver) minimal4InclusionModel0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ModelIterator[] modelIteratorArray0 = new ModelIterator[8];
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      modelIteratorArray0[0] = modelIterator0;
      modelIteratorArray0[1] = modelIterator0;
      modelIteratorArray0[2] = modelIterator0;
      modelIteratorArray0[3] = modelIterator0;
      modelIteratorArray0[4] = modelIterator0;
      modelIteratorArray0[5] = modelIterator0;
      modelIteratorArray0[6] = modelIterator0;
      modelIteratorArray0[7] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(false, modelIteratorArray0);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) manyCore0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      int[] intArray0 = new int[5];
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((int[]) null).when(modelIterator0).primeImplicant();
      doReturn(0).when(modelIterator0).nVars();
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) fullClauseSelectorSolver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(2383);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[4];
      intArray0[0] = 2383;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-1646.4));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIterator> basicLauncher0 = new BasicLauncher<ModelIterator>(aSolverFactory0);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, (SearchParams) null, randomWalkDecorator0, lubyRestarts0, basicLauncher0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2383
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver1).nVars();
      doReturn((int[]) null).when(iSolver1).primeImplicant();
      GateTranslator gateTranslator0 = new GateTranslator(iSolver1);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) gateTranslator0, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      ISolver iSolver1 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver1).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      GateTranslator gateTranslator0 = new GateTranslator(iSolver1);
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) gateTranslator0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0, (IVecInt) null, (IVecInt) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      Backbone backbone0 = Backbone.bb();
      // Undeclared exception!
      try { 
        backbone0.compute(iSolver0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Formula is UNSAT!
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(modelIterator0).nVars();
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) fullClauseSelectorSolver0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[1];
      intArray0[0] = 18;
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      // Undeclared exception!
      try { 
        Backbone.Backboner.removeVarNotPresentAndSatisfiedLits(intArray0, readOnlyVecInt0, 18);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIterator0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(intArray0).when(modelIterator0).primeImplicant();
      doReturn(14).when(modelIterator0).nVars();
      backbone0.compute((ISolver) modelIterator0, iVecInt0, iVecInt0);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Backbone backbone0 = Backbone.instance();
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null, intArray0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone$Backboner", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      // Undeclared exception!
      try { 
        backbone0.compute((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Backbone", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Backbone backbone0 = Backbone.instance((IBackboneProgressListener) null, false);
      assertEquals(0, backbone0.getNumberOfSatCalls());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Backbone backbone0 = Backbone.ibb();
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(false).when(iSolver0).removeConstr(any(org.sat4j.specs.IConstr.class));
      int[] intArray0 = new int[2];
      IVecInt iVecInt0 = backbone0.compute(iSolver0, intArray0);
      assertEquals(1, backbone0.getNumberOfSatCalls());
      
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(14).when(modelIterator0).nVars();
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      IVecInt iVecInt1 = backbone0.compute((ISolver) fullClauseSelectorSolver0, intArray0, iVecInt0);
      assertTrue(iVecInt1.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Backbone backbone0 = Backbone.bb();
      int int0 = backbone0.getNumberOfSatCalls();
      assertEquals(0, int0);
  }
}
