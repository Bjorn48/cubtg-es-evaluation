/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:38:32 GMT 2019
 */

package org.sat4j;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.io.Writer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.DecisionMode;
import org.sat4j.ExitCode;
import org.sat4j.ILauncherMode;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.GroupedCNFReader;
import org.sat4j.reader.Reader;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IProblem;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DecisionMode_ESTest extends DecisionMode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<SubModelIterator> manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, false, stringArray0);
      Reader reader0 = mUSLauncher0.createReader(manyCore0, "c ");
      decisionMode0.solve(manyCore0, reader0, mUSLauncher0, (PrintWriter) null, 2430L);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      ExitCode exitCode0 = decisionMode0.getCurrentExitCode();
      //  // Unstable assertion: assertEquals(ExitCode.OPTIMUM_FOUND, exitCode0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      GroupedCNFReader groupedCNFReader0 = new GroupedCNFReader(dimacsStringSolver0);
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      StringWriter stringWriter0 = new StringWriter(1362);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      // Undeclared exception!
      try { 
        decisionMode0.solve((IProblem) null, groupedCNFReader0, iLogAble0, printWriter0, 1362);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      SearchParams searchParams0 = new SearchParams((-1));
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(negativeLiteralSelectionStrategy0);
      ArminRestarts arminRestarts0 = new ArminRestarts();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, arminRestarts0, mUSLauncher0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, arminRestarts0);
      Reader reader0 = mUSLauncher0.createReader(solver1, "version ");
      decisionMode0.solve(solver1, reader0, mUSLauncher0, (PrintWriter) null, 2430L);
      Writer writer0 = mock(Writer.class, new ViolatedAssumptionAnswer());
      PrintWriter printWriter0 = new PrintWriter(writer0);
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(solver1, solver0, mUSLauncher0, printWriter0, reader0, 2147483647L, false);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      // Undeclared exception!
      try { 
        decisionMode0.displayResult(negationDecorator0, negationDecorator0, basicLauncher0, (PrintWriter) null, (Reader) null, 1258L, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DecisionMode decisionMode0 = (DecisionMode)ILauncherMode.DECISION;
      decisionMode0.onUnsatTermination();
      DecisionMode decisionMode1 = new DecisionMode();
      decisionMode1.getCurrentExitCode();
      // Undeclared exception!
      try { 
        ExitCode.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(subModelIterator0).isSatisfiable();
      NegationDecorator<SubModelIterator> negationDecorator0 = new NegationDecorator<SubModelIterator>(subModelIterator0);
      decisionMode0.solve(negationDecorator0, (Reader) null, basicLauncher0, (PrintWriter) null, 0L);
      assertEquals(ExitCode.UNSATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(1);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0, "backbone computation time: ");
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      StringWriter stringWriter0 = new StringWriter(0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(iSolver0, dimacsReader0, mUSLauncher0, printWriter0, 0);
      int[] intArray0 = new int[6];
      decisionMode0.onSolutionFound(intArray0);
      decisionMode0.displayResult(subModelIterator0, iSolver0, mUSLauncher0, printWriter0, dimacsReader0, 0L, true);
      assertEquals("c Found solution #1  (1392409281.32)s\nc starts\t\t: 1\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: NaN\nc non guided choices\t: 0\ns SATISFIABLE\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(1);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SubModelIterator>(subModelIterator0, false);
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0, "backbone computation time: ");
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      StringWriter stringWriter0 = new StringWriter(1082);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.solve(fullClauseSelectorSolver0, dimacsReader0, iLogAble0, printWriter0, 1);
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      decisionMode0.displayResult(lexicoDecorator0, iSolver0, iLogAble0, printWriter0, dimacsReader0, 1148L, true);
      assertEquals(ExitCode.SATISFIABLE, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      VecInt vecInt0 = new VecInt(1);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, vecInt0);
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0, "backbone computation time: ");
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      StringWriter stringWriter0 = new StringWriter(0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      decisionMode0.displayResult(subModelIterator0, iSolver0, mUSLauncher0, printWriter0, dimacsReader0, 0L, true);
      assertEquals("c starts\t\t: 0\nc conflicts\t\t: 0\nc decisions\t\t: 0\nc propagations\t\t: 0\nc inspects\t\t: 0\nc shortcuts\t\t: 0\nc learnt literals\t: 0\nc learnt binary clauses\t: 0\nc learnt ternary clauses\t: 0\nc learnt constraints\t: 0\nc ignored constraints\t: 0\nc root simplifications\t: 0\nc removed literals (reason simplification)\t: 0\nc reason swapping (by a shorter reason)\t: 0\nc Calls to reduceDB\t: 0\nc Number of update (reduction) of LBD\t: 0\nc Imported unit clauses\t: 0\nc speed (assignments/second)\t: 0.0\nc non guided choices\t: 0\ns UNKNOWN\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<SubModelIterator> basicLauncher0 = new BasicLauncher<SubModelIterator>(aSolverFactory0);
      decisionMode0.displayResult((ISolver) null, (IProblem) null, basicLauncher0, (PrintWriter) null, (Reader) null, 0L, true);
      assertEquals(0L, basicLauncher0.getBeginTime());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      ExitCode exitCode0 = ExitCode.UNKNOWN;
      decisionMode0.setExitCode(exitCode0);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      decisionMode0.setIncomplete(true);
      assertEquals(ExitCode.UNKNOWN, decisionMode0.getCurrentExitCode());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DecisionMode decisionMode0 = new DecisionMode();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        decisionMode0.onSolutionFound(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.DecisionMode", e);
      }
  }
}
