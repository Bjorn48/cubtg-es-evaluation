/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 12:53:26 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Policy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FullClauseSelectorSolver_ESTest extends FullClauseSelectorSolver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(maxSatDecorator0);
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(clausalCardinalitiesDecorator0, iVecInt0, checkMUSSolutionListener0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, true);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(147);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, iVecInt0);
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>(minimal4InclusionModel0, false);
      IConstr iConstr0 = fullClauseSelectorSolver0.addNonControlableClause(iVecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[8];
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1861));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-1861));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      VecInt vecInt0 = new VecInt();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(maxSatDecoratorArray0[1], checkMUSSolutionListener0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      UnitClauses unitClauses0 = (UnitClauses)fullClauseSelectorSolver0.addNonControlableClause(vecInt0);
      assertFalse(unitClauses0.simplify());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[8];
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1861));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-1861));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(maxSatDecoratorArray0[1]);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(maxSatDecorator0, iVecInt0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      fullClauseSelectorSolver0.addClause(iVecInt0);
      assertTrue(fullClauseSelectorSolver0.isSatisfiable());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FullClauseSelectorSolver<AbstractMinimalModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<AbstractMinimalModel>((AbstractMinimalModel) null, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      GateTranslator gateTranslator0 = new GateTranslator(fullClauseSelectorSolver0);
      NegationDecorator<GateTranslator> negationDecorator0 = new NegationDecorator<GateTranslator>(gateTranslator0);
      FullClauseSelectorSolver<NegationDecorator<GateTranslator>> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<NegationDecorator<GateTranslator>>(negationDecorator0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver1.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(lexicoDecorator0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(fullClauseSelectorSolver0, readOnlyVecInt0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<ModelIterator>(subModelIterator0, false);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver1.addControlableClause(iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      Policy policy0 = new Policy();
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, policy0);
      MinOneDecorator minOneDecorator1 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator1, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.FullClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Policy policy0 = new Policy();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, policy0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(clausalCardinalitiesDecorator0, 0L, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0, true);
      int[] intArray0 = new int[4];
      intArray0[1] = (-40);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addControlableClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.FullClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(1203.727217, 470.419268162, 470.419268162, (-1198));
      int[] intArray0 = new int[7];
      intArray0[0] = (-1198);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, eMARestarts0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(solver0, false);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, true);
      int[] intArray0 = fullClauseSelectorSolver0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      int[] intArray0 = new int[2];
      lexicoDecorator0.prevmodelwithinternalvars = intArray0;
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, true);
      int[] intArray1 = fullClauseSelectorSolver0.model();
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0}, intArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>((-1851));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, (-1851));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      ISolver iSolver0 = solver0.getSolvingEngine();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      ModelIterator modelIterator0 = new ModelIterator(maxSatDecorator0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIterator0, false);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(maxSatDecorator0);
      fullClauseSelectorSolver0.addControlableClause(iVecInt0);
      assertTrue(fullClauseSelectorSolver0.isSatisfiable());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Policy policy0 = new Policy();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      ClausalCardinalitiesDecorator<MinOneDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MinOneDecorator>(minOneDecorator0, policy0);
      ASolverFactory<SolutionCounter> aSolverFactory0 = (ASolverFactory<SolutionCounter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(clausalCardinalitiesDecorator0, 0L, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0, true);
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      fullClauseSelectorSolver0.addControlableClause(vecInt0);
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, true);
      IVecInt iVecInt0 = VecInt.EMPTY;
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      IConstr iConstr0 = fullClauseSelectorSolver0.addControlableClause(readOnlyVecInt0);
      assertNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FullClauseSelectorSolver<SubModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<SubModelIterator>((SubModelIterator) null, false);
      fullClauseSelectorSolver0.getConstraints();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, true);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addNonControlableClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<MaxSatDecorator>>((LexicoDecorator<MaxSatDecorator>) null, false);
      fullClauseSelectorSolver0.getAddedVars();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, false);
      boolean boolean0 = fullClauseSelectorSolver0.isSkipDuplicatedEntries();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1);
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(fullClauseSelectorSolver0, 1, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver1 = new FullClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0, false);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(fullClauseSelectorSolver1, iVecInt0);
      FullClauseSelectorSolver<Minimal4InclusionModel> fullClauseSelectorSolver2 = new FullClauseSelectorSolver<Minimal4InclusionModel>(minimal4InclusionModel0, false);
      fullClauseSelectorSolver2.addClause(iVecInt0);
      assertEquals(2, iVecInt0.size());
      assertEquals(2, dimacsStringSolver0.nVars());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      FullClauseSelectorSolver<MinOneDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MinOneDecorator>(minOneDecorator0, true);
      fullClauseSelectorSolver0.getConstrs();
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      fullClauseSelectorSolver0.getLastConstr();
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      LexicoDecorator<StatisticsSolver> lexicoDecorator0 = new LexicoDecorator<StatisticsSolver>(statisticsSolver0);
      FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<LexicoDecorator<StatisticsSolver>>(lexicoDecorator0, false);
      VecInt vecInt0 = new VecInt(1);
      // Undeclared exception!
      try { 
        fullClauseSelectorSolver0.addClause(vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(147);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsStringSolver0, iVecInt0);
      ASolverFactory<ModelIterator> aSolverFactory0 = (ASolverFactory<ModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4InclusionModel0, 147, checkMUSSolutionListener0);
      FullClauseSelectorSolver<ModelIterator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<ModelIterator>(modelIteratorToSATAdapter0, false);
      fullClauseSelectorSolver0.setLastConstr((IConstr) null);
      assertFalse(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
  }
}
