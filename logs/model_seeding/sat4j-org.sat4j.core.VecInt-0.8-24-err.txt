[MASTER] 10:34:22.179 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:39:06.923 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_33_1550569146802/org/sat4j/core/VecInt_33_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_33_1550569146802/org/sat4j/core/VecInt_33_tmp__ESTest_scaffolding.java]]
[MASTER] 10:39:06.931 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:06.931 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:06.959 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 30
[MASTER] 10:39:06.959 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_33_1550569146802/org/sat4j/core/VecInt_33_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:39:06 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_33_tmp__ESTest extends VecInt_33_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       VecInt vecInt0 = new VecInt();
22:       assertNotNull(vecInt0);
23:       assertEquals(0, vecInt0.size());
24:       assertTrue(vecInt0.isEmpty());
25:       
26:       int int0 = 0;
27:       VecInt vecInt1 = null;
28:       // Undeclared exception!
29:       try { 
30:         VecInt.access$100((VecInt) null);
31:         fail("Expecting exception: NullPointerException");
32:       
33:       } catch(NullPointerException e) {
34:          //
35:          // no message in exception (getMessage() returned null)
36:          //
37:          verifyException("org.sat4j.core.VecInt", e);
38:       }
39:   }
40: }
RegularFileObject[/tmp/EvoSuite_33_1550569146802/org/sat4j/core/VecInt_33_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:39:06 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_33_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_33_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_33_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 10:39:06.960 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

int int0 = 0;
VecInt vecInt1 = null;
VecInt.access$100((VecInt) null);

[MASTER] 10:39:12.682 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_51_1550569152473/org/sat4j/core/VecInt_51_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_51_1550569152473/org/sat4j/core/VecInt_51_tmp__ESTest_scaffolding.java]]
[MASTER] 10:39:12.682 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:12.682 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:12.683 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 118
[MASTER] 10:39:12.683 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$100(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 129
[MASTER] 10:39:12.683 [logback-2] ERROR JUnitAnalyzer - Diagnostic: /tmp/EvoSuite_51_1550569152473/org/sat4j/core/VecInt_51_tmp__ESTest.java uses unchecked or unsafe operations.: -1
[MASTER] 10:39:12.683 [logback-2] ERROR JUnitAnalyzer - Diagnostic: Recompile with -Xlint:unchecked for details.: -1
[MASTER] 10:39:12.684 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_51_1550569152473/org/sat4j/core/VecInt_51_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:39:12 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.shaded.org.mockito.Mockito.*;
11: import static org.evosuite.runtime.EvoAssertions.*;
12: import java.util.Comparator;
13: import org.evosuite.runtime.EvoRunner;
14: import org.evosuite.runtime.EvoRunnerParameters;
15: import org.evosuite.runtime.ViolatedAssumptionAnswer;
16: import org.junit.runner.RunWith;
17: import org.sat4j.core.VecInt;
18: import org.sat4j.specs.IVecInt;
19: 
20: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
21: public class VecInt_51_tmp__ESTest extends VecInt_51_tmp__ESTest_scaffolding {
22: 
23:   @Test(timeout = 4000)
24:   public void test0()  throws Throwable  {
25:       VecInt vecInt0 = new VecInt();
26:       assertNotNull(vecInt0);
27:       assertEquals(0, vecInt0.size());
28:       assertTrue(vecInt0.isEmpty());
29:       
30:       VecInt vecInt1 = new VecInt();
31:       assertNotNull(vecInt1);
32:       assertEquals(0, vecInt1.size());
33:       assertTrue(vecInt1.isEmpty());
34:       assertTrue(vecInt1.equals((Object)vecInt0));
35:       
36:       Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
37:       doReturn(1497, 2, 797, 0, 1497).when(comparator0).compare(anyInt() , anyInt());
38:       vecInt1.shrinkTo(5);
39:       assertEquals(0, vecInt1.last());
40:       assertEquals(5, vecInt1.size());
41:       assertFalse(vecInt1.isEmpty());
42:       assertNotSame(vecInt1, vecInt0);
43:       assertFalse(vecInt1.equals((Object)vecInt0));
44:       
45:       vecInt1.sort(comparator0);
46:       assertEquals(0, vecInt1.last());
47:       assertEquals(5, vecInt1.size());
48:       assertFalse(vecInt1.isEmpty());
49:       assertNotSame(vecInt1, vecInt0);
50:       assertFalse(vecInt1.equals((Object)vecInt0));
51:       
52:       vecInt1.copyTo((IVecInt) vecInt0);
53:       assertFalse(vecInt0.isEmpty());
54:       assertEquals(0, vecInt0.last());
55:       assertEquals(5, vecInt0.size());
56:       assertEquals(0, vecInt1.last());
57:       assertEquals(5, vecInt1.size());
58:       assertFalse(vecInt1.isEmpty());
59:       assertNotSame(vecInt0, vecInt1);
60:       assertNotSame(vecInt1, vecInt0);
61:       assertTrue(vecInt0.equals((Object)vecInt1));
62:       assertTrue(vecInt1.equals((Object)vecInt0));
63:       
64:       int[] intArray0 = new int[9];
65:       intArray0[0] = 5;
66:       intArray0[1] = 5;
67:       intArray0[2] = 5;
68:       intArray0[3] = 5;
69:       intArray0[4] = 5;
70:       intArray0[5] = 5;
71:       intArray0[6] = 5;
72:       intArray0[7] = 5;
73:       intArray0[8] = 5;
74:       vecInt1.sortUnique();
75:       assertEquals(1, vecInt1.size());
76:       assertEquals(0, vecInt1.last());
77:       assertFalse(vecInt1.isEmpty());
78:       assertNotSame(vecInt1, vecInt0);
79:       assertFalse(vecInt1.equals((Object)vecInt0));
80:       
81:       Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
82:       vecInt1.sort(comparator1);
83:       assertEquals(1, vecInt1.size());
84:       assertEquals(0, vecInt1.last());
85:       assertFalse(vecInt1.isEmpty());
86:       assertNotSame(vecInt1, vecInt0);
87:       assertFalse(vecInt1.equals((Object)vecInt0));
88:       
89:       vecInt1.unsafePush(1941);
90:       assertEquals(1941, vecInt1.last());
91:       assertEquals(2, vecInt1.size());
92:       assertFalse(vecInt1.isEmpty());
93:       assertNotSame(vecInt1, vecInt0);
94:       assertFalse(vecInt1.equals((Object)vecInt0));
95:       
96:       int int0 = vecInt0.last();
97:       assertEquals(0, int0);
98:       assertFalse(vecInt0.isEmpty());
99:       assertEquals(0, vecInt0.last());
100:       assertEquals(5, vecInt0.size());
101:       assertNotSame(vecInt0, vecInt1);
102:       assertFalse(vecInt0.equals((Object)vecInt1));
103:       
104:       vecInt0.clear();
105:       assertEquals(0, vecInt0.size());
106:       assertTrue(vecInt0.isEmpty());
107:       assertNotSame(vecInt0, vecInt1);
108:       assertFalse(vecInt0.equals((Object)vecInt1));
109:       
110:       VecInt vecInt2 = new VecInt(580, 580);
111:       assertNotNull(vecInt2);
112:       assertEquals(580, vecInt2.last());
113:       assertFalse(vecInt2.isEmpty());
114:       assertEquals(580, vecInt2.size());
115:       assertFalse(vecInt2.equals((Object)vecInt1));
116:       assertFalse(vecInt2.equals((Object)vecInt0));
117:       
118:       int int1 = VecInt.access$000(vecInt2);
119:       assertEquals(580, int1);
120:       assertEquals(580, vecInt2.last());
121:       assertFalse(vecInt2.isEmpty());
122:       assertEquals(580, vecInt2.size());
123:       assertNotSame(vecInt2, vecInt1);
124:       assertNotSame(vecInt2, vecInt0);
125:       assertFalse(vecInt2.equals((Object)vecInt1));
126:       assertFalse(vecInt2.equals((Object)vecInt0));
127:       assertFalse(int1 == int0);
128:       
129:       int[] intArray1 = VecInt.access$100(vecInt2);
130:       assertNotNull(intArray1);
131:       assertEquals(580, intArray1.length);
132:       assertEquals(580, vecInt2.last());
133:       assertFalse(vecInt2.isEmpty());
134:       assertEquals(580, vecInt2.size());
135:       assertNotSame(vecInt2, vecInt1);
136:       assertNotSame(vecInt2, vecInt0);
137:       assertNotSame(intArray1, intArray0);
138:       assertFalse(vecInt2.equals((Object)vecInt1));
139:       assertFalse(vecInt2.equals((Object)vecInt0));
140:       assertFalse(intArray1.equals((Object)intArray0));
141:       
142:       int int2 = 2401;
143:       int int3 = vecInt2.containsAt(int2);
144:       assertEquals((-1), int3);
145:       assertEquals(580, vecInt2.last());
146:       assertFalse(vecInt2.isEmpty());
147:       assertEquals(580, vecInt2.size());
148:       assertNotSame(vecInt2, vecInt1);
149:       assertNotSame(vecInt2, vecInt0);
150:       assertFalse(vecInt2.equals((Object)vecInt1));
151:       assertFalse(vecInt2.equals((Object)vecInt0));
152:       assertFalse(int2 == int0);
153:       assertFalse(int2 == int1);
154:       assertFalse(int3 == int0);
155:       assertFalse(int3 == int1);
156:       assertFalse(int3 == int2);
157:       
158:       int int4 = (-3897);
159:       // Undeclared exception!
160:       try { 
161:         vecInt1.moveTo(int1, int4);
162:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
163:       
164:       } catch(ArrayIndexOutOfBoundsException e) {
165:          //
166:          // -3897
167:          //
168:          verifyException("org.sat4j.core.VecInt", e);
169:       }
170:   }
171: }
RegularFileObject[/tmp/EvoSuite_51_1550569152473/org/sat4j/core/VecInt_51_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:39:12 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: import static org.evosuite.shaded.org.mockito.Mockito.*;
18: @EvoSuiteClassExclude
19: public class VecInt_51_tmp__ESTest_scaffolding {
20: 
21:   @org.junit.Rule 
22:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
23: 
24:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
25: 
26:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
27: 
28: 
29:   @BeforeClass 
30:   public static void initEvoSuiteFramework() { 
31:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
32:     org.evosuite.runtime.GuiSupport.initialize(); 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
34:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
35:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
36:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
37:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
38:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
39:     setSystemProperties();
40:     initializeClasses();
41:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
42:     try { initMocksToAvoidTimeoutsInTheTests(); } catch(ClassNotFoundException e) {} 
43:   } 
44: 
45:   @AfterClass 
46:   public static void clearEvoSuiteFramework(){ 
47:     Sandbox.resetDefaultSecurityManager(); 
48:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
49:   } 
50: 
51:   @Before 
52:   public void initTestCase(){ 
53:     threadStopper.storeCurrentThreads();
54:     threadStopper.startRecordingTime();
55:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
56:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
57:     setSystemProperties(); 
58:     org.evosuite.runtime.GuiSupport.setHeadless(); 
59:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
60:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
61:   } 
62: 
63:   @After 
64:   public void doneWithTestCase(){ 
65:     threadStopper.killAndJoinClientThreads();
66:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
67:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
68:     resetClasses(); 
69:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
70:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
71:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
72:   } 
73: 
74:   public static void setSystemProperties() {
75:  
76:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
77:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
78:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
79:   }
80: 
81:   private static void initializeClasses() {
82:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_51_tmp__ESTest_scaffolding.class.getClassLoader() ,
83:       "org.sat4j.core.ReadOnlyVecInt",
84:       "org.sat4j.specs.IteratorInt",
85:       "org.sat4j.core.VecInt$1",
86:       "org.sat4j.specs.IVecInt",
87:       "org.sat4j.core.EmptyVecInt",
88:       "org.sat4j.core.VecInt"
89:     );
90:   } 
91:   private static void initMocksToAvoidTimeoutsInTheTests() throws ClassNotFoundException { 
92:     mock(Class.forName("java.util.Comparator", false, VecInt_51_tmp__ESTest_scaffolding.class.getClassLoader()));
93:   }
94: 
95:   private static void resetClasses() {
96:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_51_tmp__ESTest_scaffolding.class.getClassLoader()); 
97: 
98:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
99:       "org.sat4j.core.EmptyVecInt",
100:       "org.sat4j.core.VecInt",
101:       "org.sat4j.core.VecInt$1",
102:       "org.sat4j.core.ReadOnlyVecInt"
103:     );
104:   }
105: }

[MASTER] 10:39:12.686 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt();
assertNotNull(vecInt0);
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());

VecInt vecInt1 = new VecInt();
assertNotNull(vecInt1);
assertEquals(0, vecInt1.size());
assertTrue(vecInt1.isEmpty());
assertTrue(vecInt1.equals((Object)vecInt0));

Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
doReturn(1497, 2, 797, 0, 1497).when(comparator0).compare(anyInt() , anyInt());
vecInt1.shrinkTo(5);
assertEquals(0, vecInt1.last());
assertEquals(5, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));

vecInt1.sort(comparator0);
assertEquals(0, vecInt1.last());
assertEquals(5, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));

vecInt1.copyTo((IVecInt) vecInt0);
assertFalse(vecInt0.isEmpty());
assertEquals(0, vecInt0.last());
assertEquals(5, vecInt0.size());
assertEquals(0, vecInt1.last());
assertEquals(5, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt0, vecInt1);
assertNotSame(vecInt1, vecInt0);
assertTrue(vecInt0.equals((Object)vecInt1));
assertTrue(vecInt1.equals((Object)vecInt0));

int[] intArray0 = new int[9];
intArray0[0] = 5;
intArray0[1] = 5;
intArray0[2] = 5;
intArray0[3] = 5;
intArray0[4] = 5;
intArray0[5] = 5;
intArray0[6] = 5;
intArray0[7] = 5;
intArray0[8] = 5;
vecInt1.sortUnique();
assertEquals(1, vecInt1.size());
assertEquals(0, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));

Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
vecInt1.sort(comparator1);
assertEquals(1, vecInt1.size());
assertEquals(0, vecInt1.last());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));

vecInt1.unsafePush(1941);
assertEquals(1941, vecInt1.last());
assertEquals(2, vecInt1.size());
assertFalse(vecInt1.isEmpty());
assertNotSame(vecInt1, vecInt0);
assertFalse(vecInt1.equals((Object)vecInt0));

int int0 = vecInt0.last();
assertEquals(0, int0);
assertFalse(vecInt0.isEmpty());
assertEquals(0, vecInt0.last());
assertEquals(5, vecInt0.size());
assertNotSame(vecInt0, vecInt1);
assertFalse(vecInt0.equals((Object)vecInt1));

vecInt0.clear();
assertEquals(0, vecInt0.size());
assertTrue(vecInt0.isEmpty());
assertNotSame(vecInt0, vecInt1);
assertFalse(vecInt0.equals((Object)vecInt1));

VecInt vecInt2 = new VecInt(580, 580);
assertNotNull(vecInt2);
assertEquals(580, vecInt2.last());
assertFalse(vecInt2.isEmpty());
assertEquals(580, vecInt2.size());
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));

int int1 = VecInt.access$000(vecInt2);
assertEquals(580, int1);
assertEquals(580, vecInt2.last());
assertFalse(vecInt2.isEmpty());
assertEquals(580, vecInt2.size());
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(int1 == int0);

int[] intArray1 = VecInt.access$100(vecInt2);
assertNotNull(intArray1);
assertEquals(580, intArray1.length);
assertEquals(580, vecInt2.last());
assertFalse(vecInt2.isEmpty());
assertEquals(580, vecInt2.size());
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertNotSame(intArray1, intArray0);
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(intArray1.equals((Object)intArray0));

int int2 = 2401;
int int3 = vecInt2.containsAt(int2);
assertEquals((-1), int3);
assertEquals(580, vecInt2.last());
assertFalse(vecInt2.isEmpty());
assertEquals(580, vecInt2.size());
assertNotSame(vecInt2, vecInt1);
assertNotSame(vecInt2, vecInt0);
assertFalse(vecInt2.equals((Object)vecInt1));
assertFalse(vecInt2.equals((Object)vecInt0));
assertFalse(int2 == int0);
assertFalse(int2 == int1);
assertFalse(int3 == int0);
assertFalse(int3 == int1);
assertFalse(int3 == int2);

int int4 = (-3897);
vecInt1.moveTo(int1, int4);

[MASTER] 10:39:31.745 [logback-2] ERROR JUnitAnalyzer - Compilation failed on compilation units: [RegularFileObject[/tmp/EvoSuite_123_1550569171676/org/sat4j/core/VecInt_123_tmp__ESTest.java], RegularFileObject[/tmp/EvoSuite_123_1550569171676/org/sat4j/core/VecInt_123_tmp__ESTest_scaffolding.java]]
[MASTER] 10:39:31.746 [logback-2] ERROR JUnitAnalyzer - Classpath: bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:31.753 [logback-2] ERROR JUnitAnalyzer - evosuiteCP: /home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/evosuite-master-1.0.7-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT.jar:/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment/bins/sat4j/org.ow2.sat4j.core-2.3.6-SNAPSHOT-tests.jar
[MASTER] 10:39:31.754 [logback-2] ERROR JUnitAnalyzer - Diagnostic: cannot find symbol
  symbol:   method access$000(org.sat4j.core.VecInt)
  location: class org.sat4j.core.VecInt: 24
[MASTER] 10:39:31.767 [logback-2] ERROR JUnitAnalyzer - RegularFileObject[/tmp/EvoSuite_123_1550569171676/org/sat4j/core/VecInt_123_tmp__ESTest.java]
1: /*
2:  * This file was automatically generated by EvoSuite
3:  * Tue Feb 19 09:39:31 GMT 2019
4:  */
5: 
6: package org.sat4j.core;
7: 
8: import org.junit.Test;
9: import static org.junit.Assert.*;
10: import static org.evosuite.runtime.EvoAssertions.*;
11: import org.evosuite.runtime.EvoRunner;
12: import org.evosuite.runtime.EvoRunnerParameters;
13: import org.junit.runner.RunWith;
14: import org.sat4j.core.VecInt;
15: 
16: @RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, useJEE = true) 
17: public class VecInt_123_tmp__ESTest extends VecInt_123_tmp__ESTest_scaffolding {
18: 
19:   @Test(timeout = 4000)
20:   public void test0()  throws Throwable  {
21:       VecInt vecInt0 = new VecInt(34, 1955);
22:       int int0 = 580;
23:       VecInt vecInt1 = new VecInt(580, 580);
24:       VecInt.access$000(vecInt1);
25:       int int1 = 817;
26:       // Undeclared exception!
27:       try { 
28:         vecInt0.growTo(int1, int0);
29:         fail("Expecting exception: ArrayIndexOutOfBoundsException");
30:       
31:       } catch(ArrayIndexOutOfBoundsException e) {
32:          //
33:          // 817
34:          //
35:          verifyException("org.sat4j.core.VecInt", e);
36:       }
37:   }
38: }
RegularFileObject[/tmp/EvoSuite_123_1550569171676/org/sat4j/core/VecInt_123_tmp__ESTest.java]
1: /**
2:  * Scaffolding file used to store all the setups needed to run 
3:  * tests automatically generated by EvoSuite
4:  * Tue Feb 19 09:39:31 GMT 2019
5:  */
6: 
7: package org.sat4j.core;
8: 
9: import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
10: import org.junit.BeforeClass;
11: import org.junit.Before;
12: import org.junit.After;
13: import org.junit.AfterClass;
14: import org.evosuite.runtime.sandbox.Sandbox;
15: import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;
16: 
17: @EvoSuiteClassExclude
18: public class VecInt_123_tmp__ESTest_scaffolding {
19: 
20:   @org.junit.Rule 
21:   public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();
22: 
23:   private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 
24: 
25:   private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);
26: 
27: 
28:   @BeforeClass 
29:   public static void initEvoSuiteFramework() { 
30:     org.evosuite.runtime.RuntimeSettings.className = "org.sat4j.core.VecInt"; 
31:     org.evosuite.runtime.GuiSupport.initialize(); 
32:     org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
33:     org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
34:     org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
35:     org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
36:     org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
37:     org.evosuite.runtime.classhandling.JDKClassResetter.init();
38:     setSystemProperties();
39:     initializeClasses();
40:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
41:   } 
42: 
43:   @AfterClass 
44:   public static void clearEvoSuiteFramework(){ 
45:     Sandbox.resetDefaultSecurityManager(); 
46:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
47:   } 
48: 
49:   @Before 
50:   public void initTestCase(){ 
51:     threadStopper.storeCurrentThreads();
52:     threadStopper.startRecordingTime();
53:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
54:     org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
55:     setSystemProperties(); 
56:     org.evosuite.runtime.GuiSupport.setHeadless(); 
57:     org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
58:     org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
59:   } 
60: 
61:   @After 
62:   public void doneWithTestCase(){ 
63:     threadStopper.killAndJoinClientThreads();
64:     org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
65:     org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
66:     resetClasses(); 
67:     org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
68:     org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
69:     org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
70:   } 
71: 
72:   public static void setSystemProperties() {
73:  
74:     java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
75:     java.lang.System.setProperty("user.dir", "/home/pderakhshanfar/common-uncommon-behaviour-testing-experiment"); 
76:     java.lang.System.setProperty("java.io.tmpdir", "/tmp"); 
77:   }
78: 
79:   private static void initializeClasses() {
80:     org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(VecInt_123_tmp__ESTest_scaffolding.class.getClassLoader() ,
81:       "org.sat4j.core.ReadOnlyVecInt",
82:       "org.sat4j.specs.IteratorInt",
83:       "org.sat4j.core.VecInt$1",
84:       "org.sat4j.specs.IVecInt",
85:       "org.sat4j.core.EmptyVecInt",
86:       "org.sat4j.core.VecInt"
87:     );
88:   } 
89: 
90:   private static void resetClasses() {
91:     org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(VecInt_123_tmp__ESTest_scaffolding.class.getClassLoader()); 
92: 
93:     org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
94:       "org.sat4j.core.EmptyVecInt",
95:       "org.sat4j.core.VecInt",
96:       "org.sat4j.core.VecInt$1",
97:       "org.sat4j.core.ReadOnlyVecInt"
98:     );
99:   }
100: }

[MASTER] 10:39:31.767 [logback-2] ERROR JUnitAnalyzer - Failed to compile test case:
VecInt vecInt0 = new VecInt(34, 1955);
int int0 = 580;
VecInt vecInt1 = new VecInt(580, 580);
VecInt.access$000(vecInt1);
int int1 = 817;
vecInt0.growTo(int1, int0);

[MASTER] 10:39:55.254 [logback-2] ERROR JUnitAnalyzer - Ran out of time while checking tests
