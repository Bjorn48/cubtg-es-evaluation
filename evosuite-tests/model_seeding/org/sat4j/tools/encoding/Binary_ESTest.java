/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 17:18:32 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.encoding.Binary;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Binary_ESTest extends Binary_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      Minimal4CardinalityModel[] minimal4CardinalityModelArray0 = new Minimal4CardinalityModel[1];
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(minimal4CardinalityModel0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(minimal4CardinalityModel0).nextFreeVarId(anyBoolean());
      minimal4CardinalityModelArray0[0] = minimal4CardinalityModel0;
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(minimal4CardinalityModelArray0);
      assertEquals(1, minimal4CardinalityModelArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(1, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      vecInt0.ensure(1);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      vecInt0.unsafePush(0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addExactly(manyCore0, vecInt0, 0);
      assertEquals(1, minimal4CardinalityModelArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(2, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(minimal4CardinalityModel0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0, 0, 0).when(minimal4CardinalityModel0).nextFreeVarId(anyBoolean());
      VecInt vecInt0 = new VecInt(1542, 1);
      assertNotNull(vecInt0);
      assertEquals(1542, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      binary0.addExactlyOne(minimal4CardinalityModel0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(minimal4CardinalityModel0).addClause(any(org.sat4j.specs.IVecInt.class));
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(minimal4CardinalityModel0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(manyCore0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = mock(Minimal4CardinalityModel.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(minimal4CardinalityModel0).nextFreeVarId(anyBoolean());
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, true);
      assertNotNull(fullClauseSelectorSolver0);
      assertTrue(fullClauseSelectorSolver0.isSkipDuplicatedEntries());
      assertFalse(fullClauseSelectorSolver0.isSatisfiable());
      
      VecInt vecInt0 = new VecInt(26, (-11));
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(26, vecInt0.size());
      assertEquals((-11), vecInt0.last());
      
      // Undeclared exception!
      try { 
        binary0.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(2, 2);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.ensure(2);
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.unsafePush(0);
      assertEquals(3, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      binary0.addExactly(manyCore0, vecInt0, (-3155));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      // Undeclared exception!
      try { 
        binary0.addExactly((ISolver) null, (IVecInt) null, 43);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      VecInt vecInt0 = new VecInt(48, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(48, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.ensure(2622);
      assertFalse(vecInt0.isEmpty());
      assertEquals(48, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(1736, 427, 0).when(iSolver0).nVars();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertFalse(iVecInt0.equals((Object)vecInt0));
      
      IConstr iConstr0 = binary0.addAtMostOne(dimacsStringSolver0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotNull(iConstr0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.last());
      assertEquals(0, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(2, 0);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      assertNotNull(iVecInt0);
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        binary0.addAtMostOne(dimacsStringSolver0, iVecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.ensure(2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.unsafePush(2);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      // Undeclared exception!
      binary0.addAtMost(manyCore0, vecInt0, 2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(2, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost((ISolver) null, vecInt0, 48);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      VecInt vecInt0 = new VecInt(2, 0);
      assertNotNull(vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      
      // Undeclared exception!
      try { 
        binary0.addAtMost((ISolver) null, vecInt0, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(2, 0);
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      IConstr iConstr0 = binary0.addAtMost(manyCore0, vecInt0, 2);
      assertEquals(0, stringArray0.length);
      assertNotNull(iConstr0);
      assertEquals(0, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Binary binary0 = new Binary();
      assertNotNull(binary0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(58, 0);
      assertNotNull(vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(58, vecInt0.size());
      
      IConstr iConstr0 = binary0.addAtMostOne(manyCore0, vecInt0);
      assertEquals(0, stringArray0.length);
      assertNotNull(iConstr0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(58, vecInt0.size());
      assertEquals(342, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Binary binary0 = new Binary();
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      VecInt vecInt0 = new VecInt(2, 2);
      vecInt0.ensure(2);
      vecInt0.unsafePush(0);
      IConstr iConstr0 = binary0.addExactlyOne(manyCore0, vecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Binary binary0 = new Binary();
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      VecInt vecInt0 = new VecInt(2, 2);
      // Undeclared exception!
      try { 
        binary0.addExactly(manyCore0, vecInt0, (-3155));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Binary", e);
      }
  }
}
