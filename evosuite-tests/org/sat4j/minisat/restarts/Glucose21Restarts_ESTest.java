/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:05:40 GMT 2019
 */

package org.sat4j.minisat.restarts;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.cnf.BinaryClauses;
import org.sat4j.minisat.constraints.cnf.UnitClauses;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.Constr;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Glucose21Restarts_ESTest extends Glucose21Restarts_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      int[] intArray0 = new int[9];
      VecInt vecInt0 = new VecInt(intArray0);
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(vecInt0);
      constr0.setActivity(3222.1984618007);
      // Undeclared exception!
      try { 
        glucose21Restarts0.newLearnedClause(constr0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.restarts.Glucose21Restarts", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      UnitClauses unitClauses0 = new UnitClauses(vecInt0);
      // Undeclared exception!
      try { 
        glucose21Restarts0.newLearnedClause(unitClauses0, 5000);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.reset();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      boolean boolean0 = glucose21Restarts0.shouldRestart();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onBackjumpToRootLevel();
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      String string0 = glucose21Restarts0.toString();
      assertEquals("Glucose 2.1 dynamic restart strategy", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      long long0 = glucose21Restarts0.nextRestartNumberOfConflict();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      SearchParams searchParams0 = new SearchParams((-943.35940312), 3973);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, glucose21Restarts0);
      SolverStats solverStats0 = solver0.getStats();
      glucose21Restarts0.init((SearchParams) null, solverStats0);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      BinaryClauses binaryClauses0 = new BinaryClauses(iLits0, 3973);
      glucose21Restarts0.newLearnedClause(binaryClauses0, 3506);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.newConflict();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      glucose21Restarts0.onRestart();
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
  }
}
