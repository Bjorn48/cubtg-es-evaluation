/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:44:56 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.specs.Lbool;
import org.sat4j.tools.SearchMinOneListener;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchMinOneListener_ESTest extends SearchMinOneListener_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E20, 1.0, (-183));
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      int[] intArray0 = new int[8];
      intArray0[1] = (-183);
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SearchMinOneListener", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener((SolutionFoundListener) null);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E20, 1.0, (-183));
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        searchMinOneListener0.solutionFound(intArray0, solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      Lbool lbool0 = Lbool.TRUE;
      // Undeclared exception!
      try { 
        searchMinOneListener0.end(lbool0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      Lbool lbool0 = Lbool.UNDEFINED;
      searchMinOneListener0.end(lbool0);
      assertEquals("U", lbool0.toString());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      SearchMinOneListener searchMinOneListener0 = new SearchMinOneListener(solutionFoundListener0);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams(1.0, (-1.0), (-183), (-183));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0, mUSLauncher0);
      searchMinOneListener0.init(solver0);
      int[] intArray0 = new int[0];
      searchMinOneListener0.solutionFound(intArray0, solver0);
      assertEquals(0, intArray0.length);
  }
}
