/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:13:04 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.core.CircularBuffer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CircularBuffer_ESTest extends CircularBuffer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(733);
      circularBuffer0.push(733);
      circularBuffer0.push(0);
      long long0 = circularBuffer0.average();
      assertEquals(366L, long0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1);
      circularBuffer0.push(0);
      circularBuffer0.push(241);
      assertEquals(241L, circularBuffer0.average());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(6);
      circularBuffer0.push(1);
      circularBuffer0.push((-94));
      circularBuffer0.push(1277);
      circularBuffer0.push(6);
      circularBuffer0.push(1);
      circularBuffer0.push((-2016));
      boolean boolean0 = circularBuffer0.isFull();
      assertEquals((-137L), circularBuffer0.average());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(0);
      // Undeclared exception!
      try { 
        circularBuffer0.push(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.core.CircularBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      CircularBuffer circularBuffer0 = null;
      try {
        circularBuffer0 = new CircularBuffer((-882));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.CircularBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(6);
      long long0 = circularBuffer0.average();
      assertEquals(0L, long0);
      assertFalse(circularBuffer0.isFull());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(6);
      circularBuffer0.push(1);
      circularBuffer0.push((-94));
      circularBuffer0.push(1277);
      circularBuffer0.push(6);
      circularBuffer0.push(1);
      circularBuffer0.push((-2016));
      long long0 = circularBuffer0.average();
      assertEquals((-137L), long0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(1);
      circularBuffer0.push(1);
      circularBuffer0.push(1);
      circularBuffer0.push(1);
      assertEquals(1L, circularBuffer0.average());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(6);
      circularBuffer0.clear();
      assertFalse(circularBuffer0.isFull());
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      CircularBuffer circularBuffer0 = new CircularBuffer(6);
      boolean boolean0 = circularBuffer0.isFull();
      assertFalse(boolean0);
  }
}
