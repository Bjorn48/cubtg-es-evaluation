/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 15:02:16 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSEvaluate_ESTest extends JSEvaluate_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(2113.2395F, 2113.2395F);
      JSTerm jSTerm1 = JSEvaluate.floor(1372.7F);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("/", jSTerm0, jSTerm1);
      assertEquals("[1.540262]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf((-2427.036F), 0.0F);
      JSTerm jSTerm1 = JSEvaluate.mult(1.4E-45F, 2661.9272F);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("*", jSTerm0, jSTerm1);
      assertEquals("[3.73E-42]", jSTerm1.toString());
      assertEquals("[0.0]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2);
      JSTerm jSTerm1 = JSEvaluate.mult((-2835.5579F), (-184.3846F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator("-", jSTerm0, jSTerm1);
      assertEquals("[-522831.2]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.maxOf((-864.0F), 1.0F);
      JSTerm jSTerm2 = JSEvaluate.applyOperator("+", jSTerm1, jSTerm0);
      assertEquals("[768.5]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(3.4028235E38F, 3.4028235E38F);
      JSTerm jSTerm1 = JSEvaluate.minOf((-528.4F), 2445.94F);
      JSEvaluate.applyOperator("member", jSTerm1, jSTerm0);
      assertEquals("[-528.4]", jSTerm1.toString());
      assertEquals("[1.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(992.27673F, 0.0F);
      assertEquals("[0.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal(2215.7122F, 915.6F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal((-1.0F), (-1780.1024F));
      assertEquals(0, jSTerm0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal(3.4028235E38F, 0.0F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(1151.9052F, 496.66733F, 0);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(1151.9052F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub((-3437.0F), (-3437.0F), 0);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals((-3437.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.not((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.minElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("}^aY", jSTerm0, jSTerm0);
      Object object0 = new Object();
      jSTerm1.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.minElement(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.member((JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater((-1084.7295F), (-1084.7295F));
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.maxElement(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary((String) null, jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater((-1084.7295F), (-1084.7295F));
      jSTerm0.add((Object) "foo");
      jSTerm0.add((Object) "foo");
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("foo", jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater((-1084.79F), (-1084.79F));
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperatorUnary("foo", jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("\"@;~w", (JSTerm) null, (JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("0QgdD6", jSTerm0, jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.applyOperator("Ic;a_H", jSTerm0, jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        JSEvaluate.OperantNum((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil((-29.282F));
      assertEquals("[-29.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(767.5F, 767.5F);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(83.12505F, (-500.438F));
      assertEquals("[83.12505]", jSTerm0.toString());
      
      Object object0 = new Object();
      jSTerm0.add(object0);
      float float0 = JSEvaluate.numericValue(jSTerm0);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        JSEvaluate.numericValue(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("}^iY", jSTerm0);
      assertEquals("[2.0]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("floor", jSTerm0);
      assertEquals("[1.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("not", jSTerm0);
      assertEquals("[767.5]", jSTerm0.toString());
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(743.3219F, 743.3219F);
      jSTerm0.makeVariable();
      JSEvaluate.applyOperatorUnary("nil", jSTerm0);
      assertEquals("[743.3219]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("max", jSTerm0, jSTerm0);
      assertEquals("[2.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("min", jSTerm0, jSTerm0);
      assertEquals("[767.5]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<", jSTerm0, jSTerm0);
      assertEquals("[t]", jSTerm1.toString());
      assertEquals("[767.5]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1.4E-45F, 1.4E-45F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator(">", jSTerm0, jSTerm0);
      assertEquals("[1.4E-45]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1.4E-45F, 1.4E-45F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("*", jSTerm0, jSTerm0);
      JSTerm jSTerm2 = JSEvaluate.applyOperator(">", jSTerm1, jSTerm0);
      assertEquals("[0.0]", jSTerm1.toString());
      assertEquals(0, jSTerm2.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal((-1.0F), (-1.0F));
      JSTerm jSTerm1 = JSEvaluate.floor((-1.0F));
      JSTerm jSTerm2 = JSEvaluate.applyOperator("notequal", jSTerm1, jSTerm0);
      assertEquals("[-1.0]", jSTerm1.toString());
      assertEquals("[t]", jSTerm0.toString());
      assertEquals("[]", jSTerm2.toString());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater(1372.7F, (-1084.7295F));
      JSEvaluate.applyOperator("UKOHp))", jSTerm0, jSTerm0);
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.addsub(1311.2839F, (-1371.0F), (-1584));
      JSTerm jSTerm1 = JSEvaluate.minOf((-1584), 3316.64F);
      jSTerm1.makeVariable();
      JSEvaluate.applyOperator("5t|AC8n(o", jSTerm0, jSTerm1);
      assertEquals("[-1584.0]", jSTerm1.toString());
      assertEquals("[2172975.2]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("ceil");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("floor");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("}^iY");
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = JSEvaluate.OperantNum("not");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((-1084.79F), (-82.12F));
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertEquals(0, jSTerm1.size());
      assertEquals("[89082.96]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greater((-1084.7295F), (-1084.7295F));
      JSTerm jSTerm1 = JSEvaluate.maxElement(jSTerm0);
      assertTrue(jSTerm1.equals((Object)jSTerm0));
      assertNotSame(jSTerm1, jSTerm0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.floor(2);
      JSTerm jSTerm1 = JSEvaluate.minElement(jSTerm0);
      assertEquals("[2.0]", jSTerm0.toString());
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(869.4457F, 869.4457F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator("c^f\")@! ", jSTerm0, jSTerm0);
      JSTerm jSTerm2 = JSEvaluate.minElement(jSTerm1);
      assertTrue(jSTerm2.equals((Object)jSTerm1));
      assertEquals("[1.0]", jSTerm0.toString());
      assertNotSame(jSTerm2, jSTerm1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(0.0F, 0.0F);
      JSEvaluate.member(jSTerm0, jSTerm0);
      assertEquals("[0.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, 767.5F);
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertEquals("[767.5]", jSTerm0.toString());
      assertEquals("[]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal(869.4457F, 869.4457F);
      JSTerm jSTerm1 = JSEvaluate.not(jSTerm0);
      assertEquals("[t]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.ceil(1609.1F);
      assertEquals("[1610.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(869.4457F, 869.4457F);
      JSTerm jSTerm1 = JSEvaluate.applyOperatorUnary("ceil", jSTerm0);
      assertEquals("[1.0]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.minOf(1.4E-45F, 1.4E-45F);
      jSTerm0.makeVariable();
      JSEvaluate.applyOperator("JSPredicateForm", jSTerm0, jSTerm0);
      assertEquals("[1.4E-45]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(767.5F, (-1.8225513F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("notequal", jSTerm0, jSTerm0);
      JSTerm jSTerm2 = JSEvaluate.member(jSTerm0, jSTerm1);
      assertEquals("[767.5]", jSTerm0.toString());
      assertTrue(jSTerm1.isEmpty());
      assertTrue(jSTerm2.equals((Object)jSTerm1));
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.notequal((-1147.52F), (-1.0F));
      assertEquals("[t]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.equal(0.0F, 123.656F);
      Object object0 = new Object();
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        JSEvaluate.member(jSTerm0, jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSEvaluate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((-4151.0F), (-4151.0F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("equal", jSTerm0, jSTerm0);
      assertEquals("[t]", jSTerm1.toString());
      assertEquals("[1.0]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.greaterequal((-2397.4194F), 2944.991F);
      assertFalse(jSTerm0.isConstant());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.maxOf(1004.266F, 3327.47F);
      JSTerm jSTerm1 = JSEvaluate.applyOperator(">=", jSTerm0, jSTerm0);
      assertEquals("[3327.47]", jSTerm0.toString());
      assertEquals("[t]", jSTerm1.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.mult((-1084.79F), (-82.12F));
      JSTerm jSTerm1 = JSEvaluate.applyOperator("<=", jSTerm0, jSTerm0);
      assertEquals("[89082.96]", jSTerm0.toString());
      assertEquals(0, jSTerm1.size());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div(605.338F, 0.0F);
      assertEquals("[]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = JSEvaluate.div((-1.0F), 1609.1F);
      jSTerm0.add((Object) jSTerm0);
      JSEvaluate.applyOperatorUnary("", jSTerm0);
      assertEquals("[-6.2146544E-4, (this Collection)]", jSTerm0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSEvaluate jSEvaluate0 = new JSEvaluate();
  }
}
