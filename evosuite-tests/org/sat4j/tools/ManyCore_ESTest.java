/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:33:12 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.Vec;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LexicoDecorator<DimacsStringSolver>[] lexicoDecoratorArray0 = (LexicoDecorator<DimacsStringSolver>[]) Array.newInstance(LexicoDecorator.class, 1);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(6);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertNotNull(dimacsStringSolver0);
      
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertNotNull(lexicoDecorator0);
      
      lexicoDecoratorArray0[0] = lexicoDecorator0;
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>(stringArray0, lexicoDecoratorArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, lexicoDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.realNumberOfVariables();
      assertEquals(0, int0);
      assertEquals(1, stringArray0.length);
      assertEquals(1, lexicoDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertNotNull(dimacsStringSolver0);
      
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 1);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(minOneDecorator0);
      
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertNotNull(groupClauseSelectorSolver0);
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(false, groupClauseSelectorSolverArray0);
      assertEquals(1, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar((-2439));
      assertEquals((-2439), int0);
      assertEquals(1, groupClauseSelectorSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[3];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(11);
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertNotNull(dimacsStringSolver0);
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      dimacsStringSolverArray0[4] = dimacsStringSolverArray0[2];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[4];
      dimacsStringSolverArray0[7] = dimacsStringSolver0;
      dimacsStringSolverArray0[8] = dimacsStringSolverArray0[4];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
      assertEquals(3, stringArray0.length);
      assertEquals(9, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.getTimeout();
      assertEquals(0, int0);
      assertEquals(3, stringArray0.length);
      assertEquals(9, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[8];
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(optToSatAdapter0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(optToSatAdapter0);
      
      optToSatAdapterArray0[0] = optToSatAdapter0;
      optToSatAdapterArray0[1] = optToSatAdapter0;
      optToSatAdapterArray0[2] = optToSatAdapter0;
      optToSatAdapterArray0[3] = optToSatAdapterArray0[1];
      optToSatAdapterArray0[4] = optToSatAdapterArray0[2];
      optToSatAdapterArray0[5] = optToSatAdapterArray0[0];
      optToSatAdapterArray0[6] = optToSatAdapterArray0[3];
      optToSatAdapterArray0[7] = optToSatAdapterArray0[2];
      ManyCore<OptToSatAdapter> manyCore1 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      assertEquals(8, optToSatAdapterArray0.length);
      assertNotNull(manyCore1);
      
      List<OptToSatAdapter> list0 = manyCore1.getSolvers();
      assertFalse(list0.isEmpty());
      assertEquals(8, list0.size());
      assertTrue(list0.contains(optToSatAdapter0));
      assertEquals(8, optToSatAdapterArray0.length);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String[] stringArray0 = new String[2];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertNotNull(dimacsOutputSolver0);
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[2];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertNotNull(minOneDecorator0);
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(stringArray0, minOneDecoratorArray0);
      assertEquals(2, stringArray0.length);
      assertEquals(2, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[6];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertNotNull(dimacsOutputSolver0);
      
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, checkMUSSolutionListener0);
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.removeConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can only remove a group of constraints!
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.realNumberOfVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[6];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver((PrintWriter) null);
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertNotNull(dimacsOutputSolver0);
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[3] = dimacsOutputSolverArray0[1];
      dimacsOutputSolverArray0[4] = dimacsOutputSolverArray0[0];
      dimacsOutputSolverArray0[5] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      assertEquals(6, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.printStat((PrintWriter) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[4];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      DimacsOutputSolver dimacsOutputSolver1 = new DimacsOutputSolver((PrintWriter) null);
      assertEquals(0, dimacsOutputSolver1.getTimeout());
      assertEquals(0, dimacsOutputSolver1.nConstraints());
      assertEquals(0, dimacsOutputSolver1.realNumberOfVariables());
      assertFalse(dimacsOutputSolver1.isVerbose());
      assertEquals("", dimacsOutputSolver1.getLogPrefix());
      assertEquals(0, dimacsOutputSolver1.newVar());
      assertFalse(dimacsOutputSolver1.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver1.nVars());
      assertFalse(dimacsOutputSolver1.isDBSimplificationAllowed());
      assertEquals(0L, dimacsOutputSolver1.getTimeoutMs());
      assertFalse(dimacsOutputSolver1.equals((Object)dimacsOutputSolver0));
      assertNotNull(dimacsOutputSolver1);
      
      dimacsOutputSolverArray0[1] = dimacsOutputSolver1;
      dimacsOutputSolverArray0[2] = dimacsOutputSolverArray0[1];
      dimacsOutputSolverArray0[3] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.newVar(3112);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.DimacsOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASolverFactory<AbstractMinimalModel> aSolverFactory0 = (ASolverFactory<AbstractMinimalModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<AbstractMinimalModel> manyCore0 = new ManyCore<AbstractMinimalModel>(aSolverFactory0, true, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.nVars();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[8];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(102);
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertNotNull(dimacsStringSolver0);
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[2] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[3] = dimacsStringSolverArray0[2];
      dimacsStringSolverArray0[4] = dimacsStringSolver0;
      dimacsStringSolverArray0[5] = dimacsStringSolver0;
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[7] = dimacsStringSolverArray0[4];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertEquals(8, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.isSolverKeptHot();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ASolverFactory<StatisticsSolver> aSolverFactory0 = (ASolverFactory<StatisticsSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<StatisticsSolver> manyCore0 = new ManyCore<StatisticsSolver>(aSolverFactory0, false, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.isDBSimplificationAllowed();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        manyCore0.findModel((IVecInt) vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertNotNull(dimacsStringSolver0);
      
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[8];
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      dimacsStringSolverArray0[4] = dimacsStringSolver0;
      dimacsStringSolverArray0[5] = dimacsStringSolver0;
      dimacsStringSolverArray0[6] = dimacsStringSolver0;
      dimacsStringSolverArray0[7] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertEquals(8, dimacsStringSolverArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(false, minOneDecoratorArray0);
      assertEquals(0, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[5];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nVars());
      assertNotNull(statisticsSolver0);
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ModelIteratorToSATAdapter>((ModelIteratorToSATAdapter[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String[] stringArray0 = new String[3];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[7];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertNotNull(statisticsSolver0);
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[0];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[4];
      ManyCore<GateTranslator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(manyCore0);
      
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[1];
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(solutionCounter0);
      
      solutionCounterArray0[0] = solutionCounter0;
      ManyCore<SolutionCounter> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 5);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(false, groupClauseSelectorSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<ManyCore<DimacsOutputSolver>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ManyCore<DimacsOutputSolver>>(false, stringArray0, (ManyCore<DimacsOutputSolver>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[5];
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[0];
      ManyCore<SubModelIterator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SubModelIterator>(false, stringArray0, subModelIteratorArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      
      ManyCore<ManyCore<DimacsStringSolver>> manyCore0 = new ManyCore<ManyCore<DimacsStringSolver>>((ASolverFactory<ManyCore<DimacsStringSolver>>) null, false, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      IConstr iConstr0 = manyCore0.addBlockingClause(vecInt0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, iConstr0.size());
      assertEquals(0, stringArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(manyCore0);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(solutionCounter0);
      
      LexicoDecorator<SolutionCounter> lexicoDecorator0 = new LexicoDecorator<SolutionCounter>(solutionCounter0);
      assertEquals(0, solutionCounter0.lowerBound());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(lexicoDecorator0);
      
      try { 
        lexicoDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      int[] intArray0 = new int[1];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, intArray0.length);
      assertNotNull(vecInt0);
      
      IConstr iConstr0 = manyCore0.addParity(vecInt0, true);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0, stringArray0.length);
      assertEquals(1, intArray0.length);
      assertNotNull(iConstr0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      assertEquals(0, minOneDecoratorArray0.length);
      assertNotNull(manyCore0);
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>(aSolverFactory0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(basicLauncher0);
      
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertNotNull(printWriter0);
      
      manyCore0.printStat(printWriter0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>> aSolverFactory0 = (ASolverFactory<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<Minimal4CardinalityModel>>(aSolverFactory0, false, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setKeepSolverHot(false);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.registerLiteral(165);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[2];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(minOneDecorator0);
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      ManyCore<MinOneDecorator> manyCore1 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertEquals(2, minOneDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.setLogPrefix("R: GJ");
      assertEquals(2, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      AbstractMinimalModel[] abstractMinimalModelArray0 = new AbstractMinimalModel[1];
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(manyCore0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(minimal4InclusionModel0);
      
      abstractMinimalModelArray0[0] = (AbstractMinimalModel) minimal4InclusionModel0;
      ManyCore<AbstractMinimalModel> manyCore1 = new ManyCore<AbstractMinimalModel>(false, abstractMinimalModelArray0);
      assertEquals(1, abstractMinimalModelArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.setVerbose(false);
      assertEquals(1, abstractMinimalModelArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[4];
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertNotNull(dimacsOutputSolver0);
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolverArray0[0];
      dimacsOutputSolverArray0[3] = dimacsOutputSolverArray0[2];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals(4, int0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.nextFreeVarId(true);
      assertEquals((-1), int0);
      assertEquals(0, minimal4InclusionModelArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String[] stringArray0 = new String[1];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[4];
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      assertEquals("", stringWriter0.toString());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertNotNull(dimacsOutputSolver0);
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[2] = dimacsOutputSolverArray0[0];
      dimacsOutputSolverArray0[3] = dimacsOutputSolverArray0[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(1, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[1];
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      assertNotNull(solutionFoundListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, solutionFoundListener0);
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertEquals(1, stringArray0.length);
      assertEquals(4, dimacsOutputSolverArray0.length);
      assertNotNull(modelIteratorToSATAdapter0);
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = null;
      try {
        manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(true, stringArray0, modelIteratorToSATAdapterArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertNotNull(dimacsOutputSolver0);
      
      String[] stringArray0 = new String[0];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[2];
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setDBSimplificationAllowed(true);
      assertEquals(0, stringArray0.length);
      assertEquals(2, dimacsOutputSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(stringArray0, modelIteratorToSATAdapterArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(true, true, 1955);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1955
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, true, 50);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[6];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertNotNull(dimacsOutputSolver0);
      
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, checkMUSSolutionListener0);
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[1];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      // Undeclared exception!
      try { 
        manyCore0.printInfos((PrintWriter) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.printInfos((PrintWriter) null, "[");
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(lexicoDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(lexicoDecorator0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(gateTranslator0);
      
      String[] stringArray0 = new String[0];
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[4];
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslator0;
      gateTranslatorArray0[2] = gateTranslator0;
      gateTranslatorArray0[3] = gateTranslator0;
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, gateTranslatorArray0.length);
      assertNotNull(manyCore1);
      
      String string0 = manyCore1.toString("");
      assertEquals("ManyCore solver with 4 solvers running in parallel\n>>>>>>>>>> Solver number 0 <<<<<<<<<<<<<<<<<<\nManyCore solver with 0 solvers running in parallel\n\n>>>>>>>>>> Solver number 1 <<<<<<<<<<<<<<<<<<\nManyCore solver with 0 solvers running in parallel\n\n>>>>>>>>>> Solver number 2 <<<<<<<<<<<<<<<<<<\nManyCore solver with 0 solvers running in parallel\n\n>>>>>>>>>> Solver number 3 <<<<<<<<<<<<<<<<<<\nManyCore solver with 0 solvers running in parallel\n", string0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, gateTranslatorArray0.length);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[6];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertNotNull(dimacsOutputSolver0);
      
      ASolverFactory<SingleSolutionDetector> aSolverFactory0 = (ASolverFactory<SingleSolutionDetector>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      assertNotNull(checkMUSSolutionListener0);
      
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(dimacsOutputSolver0, checkMUSSolutionListener0);
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0L, modelIteratorToSATAdapter0.numberOfModelsFoundSoFar());
      assertNotNull(modelIteratorToSATAdapter0);
      
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapterArray0[1];
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapterArray0[3];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setTimeoutOnConflicts(16);
      assertEquals(6, modelIteratorToSATAdapterArray0.length);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(lexicoDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(lexicoDecorator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(gateTranslator0);
      
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[2];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(gateTranslator0);
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertFalse(lexicoDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(minOneDecorator0);
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      ManyCore<MinOneDecorator> manyCore1 = new ManyCore<MinOneDecorator>(false, minOneDecoratorArray0);
      assertEquals(2, minOneDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.setTimeoutMs((-791L));
      assertEquals(2, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.setExpectedNumberOfClauses(165);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      String[] stringArray0 = new String[0];
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[4];
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      assertFalse(minOneDecorator0.isOptimal());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertEquals(0, groupClauseSelectorSolverArray0.length);
      assertNotNull(minOneDecorator0);
      
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[2] = minOneDecoratorArray0[0];
      minOneDecoratorArray0[3] = minOneDecoratorArray0[1];
      ManyCore<MinOneDecorator> manyCore1 = new ManyCore<MinOneDecorator>(false, stringArray0, minOneDecoratorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(4, minOneDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.reset();
      assertEquals(0, stringArray0.length);
      assertEquals(4, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(false, modelIteratorToSATAdapterArray0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(maxSatDecorator0);
      
      LexicoDecorator<MaxSatDecorator> lexicoDecorator0 = new LexicoDecorator<MaxSatDecorator>(maxSatDecorator0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(lexicoDecorator0);
      
      GateTranslator gateTranslator0 = new GateTranslator(lexicoDecorator0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertNotNull(gateTranslator0);
      
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[6];
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslator0;
      gateTranslatorArray0[2] = gateTranslator0;
      gateTranslatorArray0[3] = gateTranslator0;
      gateTranslatorArray0[4] = gateTranslator0;
      gateTranslatorArray0[5] = gateTranslator0;
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(gateTranslatorArray0);
      assertEquals(6, gateTranslatorArray0.length);
      assertNotNull(manyCore1);
      
      IConstr iConstr0 = manyCore1.discardCurrentModel();
      assertEquals(6, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(6, gateTranslatorArray0.length);
      assertNotNull(iConstr0);
      
      boolean boolean0 = gateTranslator0.removeConstr(iConstr0);
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertFalse(lexicoDecorator0.hasNoObjectiveFunction());
      assertTrue(lexicoDecorator0.nonOptimalMeansSatisfiable());
      assertEquals(0, lexicoDecorator0.numberOfCriteria());
      assertFalse(lexicoDecorator0.isOptimal());
      assertEquals(6, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertTrue(boolean0);
      assertEquals(0, modelIteratorToSATAdapterArray0.length);
      assertEquals(6, gateTranslatorArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[2];
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(solver0);
      
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertNotNull(minimal4CardinalityModel0);
      
      SolutionCounter solutionCounter0 = new SolutionCounter(minimal4CardinalityModel0);
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solutionCounter0.lowerBound());
      assertNotNull(solutionCounter0);
      
      solutionCounterArray0[0] = solutionCounter0;
      solutionCounterArray0[1] = solutionCounterArray0[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(false, solutionCounterArray0);
      assertEquals(2, solutionCounterArray0.length);
      assertNotNull(manyCore0);
      
      MockFile mockFile0 = new MockFile((String) null, "Can only remove a group of constraints!");
      assertNotNull(mockFile0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      assertNotNull(mockFileOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printStat((PrintWriter) mockPrintWriter0, " solvers running in parallel");
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canRead());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals("Can only remove a group of constraints!", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertEquals("Can only remove a group of constraints!", mockFile0.getName());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(2, solutionCounterArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertNotNull(dimacsOutputSolver0);
      
      String[] stringArray0 = new String[0];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[2];
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      dimacsOutputSolverArray0[1] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, dimacsOutputSolverArray0.length);
      assertNotNull(manyCore0);
      
      int int0 = manyCore0.newVar(4);
      assertEquals(0, int0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, dimacsOutputSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, false, stringArray0);
      assertEquals(0, stringArray0.length);
      assertNotNull(manyCore0);
      
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[2];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, stringArray0.length);
      assertNotNull(maxSatDecorator0);
      
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecoratorArray0[0];
      ManyCore<MaxSatDecorator> manyCore1 = new ManyCore<MaxSatDecorator>(false, stringArray0, maxSatDecoratorArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(2, maxSatDecoratorArray0.length);
      assertNotNull(manyCore1);
      
      manyCore1.expireTimeout();
      assertEquals(0, stringArray0.length);
      assertEquals(2, maxSatDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertNotNull(dimacsStringSolver0);
      
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 1);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(minOneDecorator0);
      
      GroupClauseSelectorSolver<MinOneDecorator> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<MinOneDecorator>(minOneDecorator0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertNotNull(groupClauseSelectorSolver0);
      
      groupClauseSelectorSolverArray0[0] = groupClauseSelectorSolver0;
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(false, groupClauseSelectorSolverArray0);
      assertEquals(1, groupClauseSelectorSolverArray0.length);
      assertNotNull(manyCore0);
      
      manyCore0.clearLearntClauses();
      assertEquals(1, groupClauseSelectorSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
      IConstr iConstr0 = manyCore0.addAtMost(vecInt0, 1583);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
      IConstr iConstr0 = manyCore0.addAtLeast(vecInt0, 0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[0];
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(false, optToSatAdapterArray0);
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[9];
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(manyCore0);
      maxSatDecoratorArray0[0] = maxSatDecorator0;
      maxSatDecoratorArray0[1] = maxSatDecorator0;
      maxSatDecoratorArray0[2] = maxSatDecoratorArray0[1];
      maxSatDecoratorArray0[3] = maxSatDecoratorArray0[1];
      maxSatDecoratorArray0[4] = maxSatDecoratorArray0[0];
      maxSatDecoratorArray0[5] = maxSatDecorator0;
      maxSatDecoratorArray0[6] = maxSatDecoratorArray0[3];
      maxSatDecoratorArray0[7] = maxSatDecoratorArray0[0];
      maxSatDecoratorArray0[8] = maxSatDecoratorArray0[0];
      ManyCore<MaxSatDecorator> manyCore1 = new ManyCore<MaxSatDecorator>(false, maxSatDecoratorArray0);
      Vec<IVecInt> vec0 = new Vec<IVecInt>(953);
      manyCore1.addAllClauses(vec0);
      assertTrue(vec0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String[] stringArray0 = new String[1];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[0];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[9];
      stringArray0[0] = " Timeout (";
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^w^`gK";
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(mockPrintWriter0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsOutputSolver0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, readOnlyVecInt0);
      ASolverFactory<SubModelIterator> aSolverFactory0 = (ASolverFactory<SubModelIterator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      ManyCore<SubModelIterator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SubModelIterator>(aSolverFactory0, false, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      String[] stringArray0 = new String[1];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Solver<MixedDataStructureSingleWL>[] solverArray0 = (Solver<MixedDataStructureSingleWL>[]) Array.newInstance(Solver.class, 3);
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>(0.0);
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      SearchParams searchParams0 = new SearchParams(14);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0, iLogAble0);
      solverArray0[0] = solver0;
      solverArray0[1] = solver0;
      solverArray0[2] = solverArray0[0];
      ManyCore<Solver<MixedDataStructureSingleWL>> manyCore0 = new ManyCore<Solver<MixedDataStructureSingleWL>>(true, solverArray0);
      boolean boolean0 = manyCore0.isDBSimplificationAllowed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.model();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.getStat();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
      List<LexicoDecorator<DimacsStringSolver>> list0 = manyCore0.getSolvers();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getSearchListener();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.getSolvingEngine();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not supported yet in ManyCore
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(false, solutionCounterArray0);
      // Undeclared exception!
      try { 
        manyCore0.isVerbose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(false, solutionCounterArray0);
      // Undeclared exception!
      try { 
        manyCore0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[0];
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(dimacsOutputSolverArray0);
      ASolverFactory<GateTranslator> aSolverFactory0 = (ASolverFactory<GateTranslator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(aSolverFactory0, false, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.setUnitClauseProvider(manyCore1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Does not make sense in the parallel context
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(aSolverFactory0, true, stringArray0);
      // Undeclared exception!
      try { 
        manyCore0.getTimeoutMs();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[3];
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(manyCore0, (-2111L), solutionFoundListener0);
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapterArray0[0];
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapterArray0[0];
      ManyCore<ModelIteratorToSATAdapter> manyCore1 = new ManyCore<ModelIteratorToSATAdapter>(modelIteratorToSATAdapterArray0);
      // Undeclared exception!
      try { 
        manyCore1.getTimeout();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<LexicoDecorator<DimacsStringSolver>> manyCore0 = new ManyCore<LexicoDecorator<DimacsStringSolver>>((ASolverFactory<LexicoDecorator<DimacsStringSolver>>) null, stringArray0);
      try { 
        manyCore0.findModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, stringArray0);
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[2];
      GateTranslator gateTranslator0 = new GateTranslator(manyCore0);
      gateTranslatorArray0[0] = gateTranslator0;
      gateTranslatorArray0[1] = gateTranslator0;
      ManyCore<GateTranslator> manyCore1 = new ManyCore<GateTranslator>(stringArray0, gateTranslatorArray0);
      // Undeclared exception!
      try { 
        manyCore1.model(173);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.nConstraints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      FullClauseSelectorSolver<DimacsStringSolver>[] fullClauseSelectorSolverArray0 = (FullClauseSelectorSolver<DimacsStringSolver>[]) Array.newInstance(FullClauseSelectorSolver.class, 3);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      FullClauseSelectorSolver<DimacsStringSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsStringSolver>(dimacsStringSolver0, true);
      fullClauseSelectorSolverArray0[0] = fullClauseSelectorSolver0;
      fullClauseSelectorSolverArray0[1] = fullClauseSelectorSolverArray0[0];
      fullClauseSelectorSolverArray0[2] = fullClauseSelectorSolver0;
      ManyCore<FullClauseSelectorSolver<DimacsStringSolver>> manyCore0 = new ManyCore<FullClauseSelectorSolver<DimacsStringSolver>>(fullClauseSelectorSolverArray0);
      boolean boolean0 = manyCore0.isSolverKeptHot();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      manyCore0.learnUnit(1907);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable((IVecInt) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      GroupClauseSelectorSolver<MinOneDecorator>[] groupClauseSelectorSolverArray0 = (GroupClauseSelectorSolver<MinOneDecorator>[]) Array.newInstance(GroupClauseSelectorSolver.class, 0);
      ManyCore<GroupClauseSelectorSolver<MinOneDecorator>> manyCore0 = new ManyCore<GroupClauseSelectorSolver<MinOneDecorator>>(true, groupClauseSelectorSolverArray0);
      // Undeclared exception!
      try { 
        manyCore0.getLogPrefix();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
