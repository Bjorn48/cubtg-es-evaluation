/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 22:17:00 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.BoxULSymbol;
import jahuwaldt.plot.PlotAxis;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.PlotXAxis;
import jahuwaldt.plot.SimplePlotXY;
import jahuwaldt.plot.SquareSymbol;
import jahuwaldt.plot.TabDSymbol;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.JToolBar;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplePlotXY_ESTest extends SimplePlotXY_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      NumberFormat numberFormat1 = NumberFormat.getNumberInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "PQR File 1", "*yaS@emN", "*yaS@emN", numberFormat0, numberFormat1);
      assertEquals("PQR File 1", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      double[] doubleArray1 = new double[8];
      Locale locale0 = Locale.CHINESE;
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance(locale0);
      SquareSymbol squareSymbol0 = new SquareSymbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "", "", (String) null, numberFormat0, numberFormat0, squareSymbol0);
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      String string0 = simplePlotXY0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, "Preview", "", "[5[zg,", numberFormat0, numberFormat0);
      String string0 = simplePlotXY0.getTitle();
      assertEquals("Preview", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      String[] stringArray0 = new String[3];
      ChoiceFormat choiceFormat0 = new ChoiceFormat(doubleArray0, stringArray0);
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, "Y3s`bT0`F", "=zl,^'Yk6?%55#;4/", "Y3s`bT0`F", choiceFormat0, numberFormat0);
      simplePlotXY0.getRuns();
      assertEquals("Y3s`bT0`F", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "Pn", "Pn", (String) null, (NumberFormat) null, (NumberFormat) null, tabDSymbol0);
      Object object0 = simplePlotXY0.clone();
      assertNotSame(object0, simplePlotXY0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY((double[]) null, (double[]) null, "620H)jQ/z} m?zf`c>", "620H)jQ/z} m?zf`c>", "620H)jQ/z} m?zf`c>", numberFormat0, numberFormat0, tabDSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      BoxULSymbol boxULSymbol0 = new BoxULSymbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "gan`ZY", "gan`ZY", "!T", (NumberFormat) null, (NumberFormat) null, boxULSymbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[16];
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, (double[]) null, "", "", "", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, "g", "g", "g", decimalFormat0, decimalFormat0);
      JToolBar jToolBar0 = new JToolBar();
      Rectangle rectangle0 = new Rectangle();
      // Undeclared exception!
      try { 
        simplePlotXY0.draw((Graphics) null, jToolBar0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      DecimalFormat decimalFormat0 = new DecimalFormat("3I_/72topti");
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, (String) null, "3I_/72topti", "3I_/72topti", decimalFormat0, decimalFormat0);
      JToolBar jToolBar0 = new JToolBar("3I_/72topti");
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        simplePlotXY0.draw((Graphics) null, jToolBar0, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double[] doubleArray1 = new double[3];
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "", "geo1 ", "geo1 ", numberFormat0, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotXAxis plotXAxis0 = new PlotXAxis();
      simplePlotXY0.setHorizontalAxis(plotXAxis0);
      assertEquals(1, PlotAxis.kTickMarksOnly);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, "", "", "U", numberFormat0, numberFormat0);
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertEquals("", simplePlotXY0.getTitle());
      assertEquals(2, plotAxis0.getGridStyle());
      assertEquals("", plotAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setTitle("Inconsistant array sizes.");
      assertEquals("Inconsistant array sizes.", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, "", "", "U", numberFormat0, numberFormat0);
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertEquals("", simplePlotXY0.getTitle());
      assertEquals("U", plotAxis0.getLabel());
      assertEquals(2, plotAxis0.getGridStyle());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      // Undeclared exception!
      try { 
        simplePlotXY0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance(locale0);
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, "", "", "U", numberFormat0, numberFormat0);
      String string0 = simplePlotXY0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setRuns((PlotRunList) null);
      assertNull(simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, (String) null, "/B9hB.", "og)%K3XFEHbes3!j,V#", (NumberFormat) null, (NumberFormat) null, (PlotSymbol) null);
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertEquals(1, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setVerticalAxis((PlotAxis) null);
      assertNull(simplePlotXY0.getTitle());
  }
}
