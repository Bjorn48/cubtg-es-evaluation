/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:57:39 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.lang.reflect.Array;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ISolver;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.GateTranslator;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ManyCore_ESTest extends ManyCore_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      assertNotNull(minimal4CardinalityModel0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4CardinalityModel0, (ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DqJ'e-1peN7p7Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DqJ'e-1peN7p7Z";
      ManyCore<Minimal4CardinalityModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[7];
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, 0).when(iSolver0).nVars();
      doReturn(intArray0).when(iSolver0).primeImplicant();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      assertNotNull(minimal4CardinalityModel0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DqJ'e-1peN7p7Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DqJ'e-1peN7p7Z";
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertEquals(4, stringArray0.length);
      
      int[] intArray1 = manyCore0.primeImplicant();
      assertNotNull(intArray1);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray1);
      assertEquals(7, intArray0.length);
      assertEquals(4, stringArray0.length);
      assertEquals(7, intArray1.length);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClausalCardinalitiesDecorator<MinOneDecorator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<MinOneDecorator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>>(false, clausalCardinalitiesDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[4];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.nVars());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ManyCore<FullClauseSelectorSolver<GateTranslator>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<FullClauseSelectorSolver<GateTranslator>>((FullClauseSelectorSolver<GateTranslator>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      assertNotNull(statisticsSolver0);
      assertEquals(0, statisticsSolver0.realNumberOfVariables());
      assertEquals(0, statisticsSolver0.nConstraints());
      assertEquals(0, statisticsSolver0.nVars());
      
      statisticsSolverArray0[0] = statisticsSolver0;
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String[] stringArray0 = new String[5];
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsOutputSolver0.isVerbose());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsOutputSolver>(stringArray0, dimacsOutputSolverArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ManyCore<ManyCore<AbstractMinimalModel>> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<ManyCore<AbstractMinimalModel>>(true, (ManyCore<AbstractMinimalModel>[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String[] stringArray0 = new String[3];
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, stringArray0, (DimacsStringSolver[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn((ISolver) null).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[1];
      ManyCore<MaxSatDecorator> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<MaxSatDecorator>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.createBlockingClauseForCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minOneDecoratorArray0.length);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Call the primeImplicant method first!!!");
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printInfos((PrintWriter) mockPrintWriter0);
      assertEquals(0, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      assertNotNull(minimal4CardinalityModel0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DqJ'e-1peN7p7Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DqJ'e-1peN7p7Z";
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(4, stringArray0.length);
      
      manyCore0.setKeepSolverHot(false);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      
      manyCore0.registerLiteral(3);
      assertEquals(0, minimal4InclusionModelArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolverArray0.length);
      
      manyCore0.setLogPrefix("hz09U");
      assertEquals(0, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClausalCardinalitiesDecorator<MinOneDecorator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<MinOneDecorator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>>(false, clausalCardinalitiesDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      
      int int0 = manyCore0.nextFreeVarId(false);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minOneDecoratorArray0.length);
      
      manyCore0.setDBSimplificationAllowed(false);
      assertEquals(0, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolverArray0.length);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("OXq");
      assertNotNull(mockFileOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0, false);
      assertNotNull(mockPrintWriter0);
      
      manyCore0.printInfos((PrintWriter) mockPrintWriter0, "");
      assertEquals(0, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[0];
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[7];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolver0;
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      dimacsStringSolverArray0[4] = dimacsStringSolverArray0[1];
      dimacsStringSolverArray0[5] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[6] = dimacsStringSolverArray0[3];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(false, stringArray0, dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      assertEquals(7, dimacsStringSolverArray0.length);
      
      String string0 = manyCore0.toString("!Lhk^V~Pp )].");
      assertNotNull(string0);
      assertEquals(0, stringArray0.length);
      assertEquals(7, dimacsStringSolverArray0.length);
      assertEquals("!Lhk^V~Pp )].ManyCore solver with 7 solvers running in parallel\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 0 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 1 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 2 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 3 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 4 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 5 <<<<<<<<<<<<<<<<<<\nDimacs output solver\n!Lhk^V~Pp )].>>>>>>>>>> Solver number 6 <<<<<<<<<<<<<<<<<<\nDimacs output solver", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      
      manyCore0.setTimeoutMs((-2687L));
      assertEquals(0, minimal4InclusionModelArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, 0).when(iSolver0).nVars();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      assertNotNull(minimal4CardinalityModel0);
      
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0, minimal4CardinalityModel0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DqJ'e-1peN7p7Z";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "DqJ'e-1peN7p7Z";
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(4, stringArray0.length);
      
      manyCore0.setTimeout(3217);
      assertEquals(4, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolverArray0.length);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("8~5X2KT B<");
      assertNotNull(mockPrintStream0);
      
      manyCore0.printStat((PrintStream) mockPrintStream0, "8~5X2KT B<");
      assertEquals(0, dimacsStringSolverArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClausalCardinalitiesDecorator<MinOneDecorator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<MinOneDecorator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>>(false, clausalCardinalitiesDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      
      int int0 = manyCore0.newVar((-4961));
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minOneDecoratorArray0.length);
      
      manyCore0.expireTimeout();
      assertEquals(0, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClausalCardinalitiesDecorator<MinOneDecorator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<MinOneDecorator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<MinOneDecorator>>(false, clausalCardinalitiesDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
      
      manyCore0.clearLearntClauses();
      assertEquals(0, clausalCardinalitiesDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[2];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(0);
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(true, dimacsStringSolverArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      String[] stringArray0 = new String[8];
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<SolutionCounter>(false, stringArray0, solutionCounterArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ManyCore<GateTranslator>[] manyCoreArray0 = (ManyCore<GateTranslator>[]) Array.newInstance(ManyCore.class, 0);
      ManyCore<ManyCore<GateTranslator>> manyCore0 = new ManyCore<ManyCore<GateTranslator>>(stringArray0, manyCoreArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, manyCoreArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.onFinishWithAnswer(false, true, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      ASolverFactory<DimacsStringSolver> aSolverFactory0 = (ASolverFactory<DimacsStringSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(dimacsStringSolver0).when(aSolverFactory0).createSolverByName(anyString());
      String[] stringArray0 = new String[7];
      stringArray0[0] = "The set of clauses in the MUS is SAT : ";
      ManyCore<DimacsStringSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<DimacsStringSolver>(aSolverFactory0, true, stringArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DimacsOutputSolver[] dimacsOutputSolverArray0 = new DimacsOutputSolver[1];
      ASolverFactory<ModelIteratorToSATAdapter> aSolverFactory0 = (ASolverFactory<ModelIteratorToSATAdapter>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<ModelIteratorToSATAdapter> basicLauncher0 = new BasicLauncher<ModelIteratorToSATAdapter>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      assertNotNull(printWriter0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver(printWriter0);
      assertNotNull(dimacsOutputSolver0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, dimacsOutputSolver0.nVars());
      assertEquals(0, dimacsOutputSolver0.newVar());
      assertFalse(dimacsOutputSolver0.isSolverKeptHot());
      assertFalse(dimacsOutputSolver0.isDBSimplificationAllowed());
      assertEquals(0L, dimacsOutputSolver0.getTimeoutMs());
      assertEquals(0, dimacsOutputSolver0.realNumberOfVariables());
      assertEquals(0, dimacsOutputSolver0.nConstraints());
      assertFalse(dimacsOutputSolver0.isVerbose());
      assertEquals(0, dimacsOutputSolver0.getTimeout());
      assertEquals("", dimacsOutputSolver0.getLogPrefix());
      
      dimacsOutputSolverArray0[0] = dimacsOutputSolver0;
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(false, dimacsOutputSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(1, dimacsOutputSolverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.isSatisfiable(true);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      assertNotNull(lightFactory0);
      
      Solver solver0 = (Solver)lightFactory0.defaultSolver();
      assertNotNull(solver0);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(solver0);
      assertNotNull(minimal4InclusionModel0);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "";
      SubModelIterator[] subModelIteratorArray0 = new SubModelIterator[8];
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = mock(MixedDataStructureDanielWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null, (ILits) null).when(mixedDataStructureDanielWL0).getVocabulary();
      SearchParams searchParams0 = new SearchParams((-1134.745), 2330);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1134.745), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2330, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, arminRestarts0);
      assertNotNull(solver1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver1.getOrder();
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      ASolverFactory<MinOneDecorator> aSolverFactory0 = (ASolverFactory<MinOneDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<MinOneDecorator> basicLauncher0 = new BasicLauncher<MinOneDecorator>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap1, miniSATRestarts0, basicLauncher0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-1134.745), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2330, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      boolean boolean0 = minimal4InclusionModel0.isSatisfiable();
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(boolean0);
      
      int[] intArray0 = minimal4InclusionModel0.model();
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nVars());
      assertEquals(0, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      
      ASolverFactory<Minimal4InclusionModel> aSolverFactory1 = (ASolverFactory<Minimal4InclusionModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      doReturn(minimal4InclusionModel0, (ISolver) null).when(aSolverFactory1).createSolverByName(anyString());
      ManyCore<Minimal4InclusionModel> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<Minimal4InclusionModel>(aSolverFactory1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<DimacsOutputSolver> aSolverFactory0 = (ASolverFactory<DimacsOutputSolver>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<DimacsOutputSolver> manyCore0 = new ManyCore<DimacsOutputSolver>(aSolverFactory0, true, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant((-6338));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[0];
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, dimacsStringSolverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.modelWithInternalVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[0];
      ASolverFactory<Minimal4CardinalityModel> aSolverFactory0 = (ASolverFactory<Minimal4CardinalityModel>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      ManyCore<Minimal4CardinalityModel> manyCore0 = new ManyCore<Minimal4CardinalityModel>(aSolverFactory0, stringArray0);
      assertNotNull(manyCore0);
      assertEquals(0, stringArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.primeImplicant();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[5];
      MinOneDecorator minOneDecorator0 = mock(MinOneDecorator.class, new ViolatedAssumptionAnswer());
      doReturn((Map) null).when(minOneDecorator0).getStat();
      minOneDecoratorArray0[0] = minOneDecorator0;
      minOneDecoratorArray0[1] = minOneDecorator0;
      minOneDecoratorArray0[2] = minOneDecorator0;
      minOneDecoratorArray0[3] = minOneDecorator0;
      minOneDecoratorArray0[4] = minOneDecorator0;
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(5, minOneDecoratorArray0.length);
      
      Map<String, Number> map0 = manyCore0.getStat();
      assertNull(map0);
      assertEquals(5, minOneDecoratorArray0.length);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      
      List<Minimal4InclusionModel> list0 = manyCore0.getSolvers();
      assertNotNull(list0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minimal4InclusionModelArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.nVars();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      assertNotNull(manyCore0);
      assertEquals(0, minOneDecoratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.isVerbose();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ModelIterator[] modelIteratorArray0 = new ModelIterator[1];
      ModelIterator modelIterator0 = mock(ModelIterator.class, new ViolatedAssumptionAnswer());
      modelIteratorArray0[0] = modelIterator0;
      ManyCore<ModelIterator> manyCore0 = new ManyCore<ModelIterator>(modelIteratorArray0);
      assertNotNull(manyCore0);
      assertEquals(1, modelIteratorArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.newVar();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SolutionCounter[] solutionCounterArray0 = new SolutionCounter[0];
      ManyCore<SolutionCounter> manyCore0 = new ManyCore<SolutionCounter>(true, solutionCounterArray0);
      assertNotNull(manyCore0);
      assertEquals(0, solutionCounterArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.getTimeout();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[7];
      StatisticsSolver[] statisticsSolverArray0 = new StatisticsSolver[6];
      ManyCore<StatisticsSolver> manyCore0 = null;
      try {
        manyCore0 = new ManyCore<StatisticsSolver>(stringArray0, statisticsSolverArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.realNumberOfVariables();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(minOneDecoratorArray0);
      try { 
        manyCore0.isSatisfiable();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MinOneDecorator[] minOneDecoratorArray0 = new MinOneDecorator[0];
      ManyCore<MinOneDecorator> manyCore0 = new ManyCore<MinOneDecorator>(true, minOneDecoratorArray0);
      SolutionCounter solutionCounter0 = new SolutionCounter(manyCore0);
      // Undeclared exception!
      try { 
        solutionCounter0.addConstr((Constr) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet in ManyCore: cannot add a specific constraint to each solver
         //
         verifyException("org.sat4j.tools.ManyCore", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ManyCore<MinOneDecorator>[] manyCoreArray0 = (ManyCore<MinOneDecorator>[]) Array.newInstance(ManyCore.class, 0);
      ManyCore<ManyCore<MinOneDecorator>> manyCore0 = new ManyCore<ManyCore<MinOneDecorator>>(false, manyCoreArray0);
      // Undeclared exception!
      try { 
        manyCore0.nConstraints();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LexicoDecorator<SingleSolutionDetector>[] lexicoDecoratorArray0 = (LexicoDecorator<SingleSolutionDetector>[]) Array.newInstance(LexicoDecorator.class, 0);
      ManyCore<LexicoDecorator<SingleSolutionDetector>> manyCore0 = new ManyCore<LexicoDecorator<SingleSolutionDetector>>(true, lexicoDecoratorArray0);
      // Undeclared exception!
      try { 
        manyCore0.isSolverKeptHot();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GateTranslator[] gateTranslatorArray0 = new GateTranslator[0];
      ManyCore<GateTranslator> manyCore0 = new ManyCore<GateTranslator>(true, gateTranslatorArray0);
      manyCore0.learnUnit((-364));
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Minimal4InclusionModel[] minimal4InclusionModelArray0 = new Minimal4InclusionModel[0];
      ManyCore<Minimal4InclusionModel> manyCore0 = new ManyCore<Minimal4InclusionModel>(minimal4InclusionModelArray0);
      // Undeclared exception!
      try { 
        manyCore0.discardCurrentModel();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
