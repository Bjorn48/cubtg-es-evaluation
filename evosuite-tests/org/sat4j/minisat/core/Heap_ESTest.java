/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 08:06:15 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.minisat.core.Heap;
import org.sat4j.minisat.orders.VariableComparator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Heap_ESTest extends Heap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      assertEquals(0, heap0.size());
      
      int int0 = heap0.size();
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        heap0.get(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2387.17224726);
      doubleArray0[1] = (-1137.99871737257);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1677.82);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3804.5);
      doubleArray0[6] = 1649.80658;
      VariableComparator variableComparator0 = mock(VariableComparator.class, new ViolatedAssumptionAnswer());
      Heap heap0 = new Heap(variableComparator0);
      heap0.empty();
      heap0.size();
      // Undeclared exception!
      try { 
        heap0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2387.17224726);
      doubleArray0[1] = (-1137.99871737257);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1677.82);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-3804.5);
      VariableComparator variableComparator0 = mock(VariableComparator.class, new ViolatedAssumptionAnswer());
      Heap heap0 = new Heap(variableComparator0);
      heap0.setBounds(3336);
      int int0 = 1466;
      heap0.insert(1466);
      // Undeclared exception!
      try { 
        heap0.increase((-432));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.getmin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 1;
      // Undeclared exception!
      try { 
        heap0.increase(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        heap0.percolateDown(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      boolean boolean0 = heap0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = (-4);
      // Undeclared exception!
      try { 
        heap0.increase((-4));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(2);
      assertEquals(0, heap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      boolean boolean0 = heap0.heapProperty();
      assertTrue(boolean0);
      
      heap0.ok((-2347));
      int int0 = (-110);
      int int1 = 0;
      // Undeclared exception!
      try { 
        heap0.insert(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateUp(15);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 813;
      heap0.setBounds(813);
      int int1 = (-432);
      // Undeclared exception!
      try { 
        heap0.insert((-432));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1888);
      boolean boolean0 = heap0.heapProperty(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.heapProperty((-4003));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.percolateDown(1);
      // Undeclared exception!
      try { 
        heap0.get((-1568));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1861);
      int int0 = 0;
      heap0.insert(0);
      Heap heap1 = new Heap((VariableComparator) null);
      heap1.empty();
      heap0.getmin();
      // Undeclared exception!
      try { 
        heap1.getmin();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      boolean boolean0 = heap0.ok(1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1861);
      heap0.insert(0);
      assertEquals(0, heap0.getmin());
      
      // Undeclared exception!
      try { 
        heap0.insert(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.heapProperty();
      heap0.empty();
      int int0 = (-110);
      // Undeclared exception!
      try { 
        heap0.increase((-2368));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 0;
      heap0.setBounds(0);
      // Undeclared exception!
      try { 
        heap0.insert(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 1;
      int int1 = 0;
      int int2 = (-1467);
      // Undeclared exception!
      try { 
        heap0.inHeap(1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = (-454);
      // Undeclared exception!
      try { 
        heap0.setBounds((-454));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.percolateDown((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.setBounds((-2659));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      // Undeclared exception!
      try { 
        heap0.insert(1861);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        heap0.inHeap(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      Heap heap1 = new Heap((VariableComparator) null);
      boolean boolean0 = heap1.ok((-1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1861);
      heap0.insert(0);
      assertEquals(0, heap0.getmin());
      
      boolean boolean0 = heap0.empty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VariableComparator variableComparator0 = mock(VariableComparator.class, new ViolatedAssumptionAnswer());
      Heap heap0 = new Heap(variableComparator0);
      int int0 = 1517;
      heap0.setBounds(1517);
      // Undeclared exception!
      try { 
        heap0.setBounds(3037);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Heap heap0 = new Heap((VariableComparator) null);
      heap0.setBounds(1861);
      heap0.insert(0);
      // Undeclared exception!
      try { 
        heap0.percolateUp(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      VariableComparator variableComparator0 = null;
      Heap heap0 = new Heap((VariableComparator) null);
      int int0 = 0;
      // Undeclared exception!
      try { 
        heap0.percolateDown(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Heap", e);
      }
  }
}
