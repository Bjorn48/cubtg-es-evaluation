/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:29:15 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.DataStructureFactory;
import org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.orders.NegativeLiteralSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.LubyRestarts;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class QuadraticPrimeImplicantStrategy_ESTest extends QuadraticPrimeImplicantStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      NegativeLiteralSelectionStrategy negativeLiteralSelectionStrategy0 = new NegativeLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(negativeLiteralSelectionStrategy0);
      EMARestarts eMARestarts0 = new EMARestarts();
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, varOrderHeap0, eMARestarts0);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 317
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute((Solver<? extends DataStructureFactory>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the compute method first!
         //
         verifyException("org.sat4j.minisat.core.QuadraticPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, lubyRestarts0);
      quadraticPrimeImplicantStrategy0.compute(solver0);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.getPrimeImplicantAsArrayWithHoles();
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PureOrder pureOrder0 = new PureOrder();
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, (RestartStrategy) null);
      solver0.setVerbose(true);
      int[] intArray0 = quadraticPrimeImplicantStrategy0.compute(solver0);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, lubyRestarts0);
      solver0.enqueue(32);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.compute(solver0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      QuadraticPrimeImplicantStrategy quadraticPrimeImplicantStrategy0 = new QuadraticPrimeImplicantStrategy();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, (SearchParams) null, pureOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        quadraticPrimeImplicantStrategy0.setAndPropagate(solver0, 32);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
