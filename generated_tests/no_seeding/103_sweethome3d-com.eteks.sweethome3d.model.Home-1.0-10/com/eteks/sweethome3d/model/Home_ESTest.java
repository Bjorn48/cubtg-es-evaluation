/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 00:37:58 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.ListIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Home home0 = new Home(2844.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(2844.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(2844.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<Label> collection0 = home1.getLabels();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(2844.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Camera> list0 = home1.getStoredCameras();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(2844.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2844.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(list1);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isModified();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[] floatArray0 = new float[3];
      floatArray0[0] = 2319.7205F;
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<HomePieceOfFurniture.SortableProperty> class1 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      home0.setFurnitureVisibleProperties(list1);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      boolean boolean0 = linkedList1.add(compass0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(1, linkedList1.size());
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList1.contains(compass0));
      assertTrue(boolean0);
      
      ListIterator<Compass> listIterator0 = linkedList1.listIterator();
      assertEquals(1, linkedList1.size());
      assertTrue(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(linkedList1.contains(compass0));
      assertNotNull(listIterator0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Selectable> list2 = home1.getSelectedItems();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = new Home(3700L);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertEquals(3700.0F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotNull(home2);
      
      home2.setSelectedItems(linkedList0);
      assertEquals(0, linkedList0.size());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertEquals(3700.0F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      home2.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertEquals(3700.0F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      home1.removeWallsListener((CollectionListener<Wall>) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      Camera camera0 = home1.getTopCamera();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      
      Level level0 = new Level("/Uz@Vr2aJ6P^", 3700L, (-825.6089F), 0.0F);
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("/Uz@Vr2aJ6P^", level0.getName());
      assertEquals((-825.6089F), level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      home0.setSelectedLevel(level0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, level0.getHeight(), 0.01F);
      assertEquals("/Uz@Vr2aJ6P^", level0.getName());
      assertEquals((-825.6089F), level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      Home home3 = null;
      try {
        home3 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      float float0 = (-3126.0F);
      Home home0 = new Home((-3126.0F));
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      boolean boolean0 = linkedList0.add(homePieceOfFurniture_SortableProperty0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(homePieceOfFurniture_SortableProperty0));
      assertTrue(boolean0);
      
      home0.setFurnitureVisibleProperties(linkedList0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(1, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(homePieceOfFurniture_SortableProperty0));
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addSelectionListener(selectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Object object0 = home0.getVisualProperty("T");
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(object0);
      
      Home.Property home_Property0 = Home.Property.CAMERA;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("T", propertyChangeListener0);
      assertEquals("T", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("T", propertyChangeListenerProxy0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("T", propertyChangeListenerProxy0.getPropertyName());
      
      propertyChangeListenerProxy0.propertyChange((PropertyChangeEvent) null);
      assertEquals("T", propertyChangeListenerProxy0.getPropertyName());
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("T", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener1 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Level level0 = null;
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList1 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list0, "T");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage(temporaryURLContent0, 0.0F, 0.0F, 0.0F, 0.7853982F, 90.40861F, 90.40861F, (-619.161F), false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(90.40861F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(90.40861F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals((-619.161F), backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertNotNull(backgroundImage0);
      
      home0.setBackgroundImage(backgroundImage0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(90.40861F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(90.40861F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals((-619.161F), backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(0.7853982F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("P^Fwa+J/P\"\"|gB", 3700L, 3700L);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("P^Fwa+J/P\"\"|gB", label0.getText());
      assertNotNull(label0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(label0));
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add(label0);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("P^Fwa+J/P\"\"|gB", label0.getText());
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(label0));
      assertTrue(boolean0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(label0));
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setStoredCameras(linkedList0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Label label2 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label2.getY(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label2.getText());
      assertEquals(3700.0F, label2.getX(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      
      label0.setAngle((-838.1117F));
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3.835137F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      
      home0.deleteLabel(label0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3.835137F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      boolean boolean0 = home0.isRecovered();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Home home0 = new Home(1.0F);
      assertEquals(1.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertEquals(1.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(3700L);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home1.getFurnitureVisibleProperties();
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list0);
      assertNotSame(home1, home0);
      
      home1.setFurnitureVisibleProperties(list0);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setRecovered(true);
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setName("esOiucm7zSo\"M)j x");
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSo\"M)j x", home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.setName("esOiucm7zSo\"M)j x");
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSo\"M)j x", home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSo\"M)j x", home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Room> class0 = Room.class;
      float[][] floatArray0 = new float[2][7];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray1[7] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, room0.getPointCount());
      assertEquals(3700.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(2, floatArray0.length);
      assertEquals(2, room0.getPointCount());
      assertEquals(3700.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(3700.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(3700.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      boolean boolean0 = linkedList0.add(room1);
      assertEquals(2, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, room0.getPointCount());
      assertEquals(3700.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(3700.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(3700.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(3700.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertFalse(linkedList0.contains(room0));
      assertTrue(linkedList0.contains(room1));
      assertTrue(boolean0);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(linkedList0.contains(room0));
      assertTrue(linkedList0.contains(room1));
      assertTrue(list0.contains(room1));
      assertFalse(list0.contains(room0));
      assertNotNull(list0);
      
      List<Room> list1 = Home.getRoomsSubList(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertFalse(linkedList0.contains(room0));
      assertTrue(linkedList0.contains(room1));
      assertTrue(list0.contains(room1));
      assertFalse(list0.contains(room0));
      assertFalse(list1.contains(room0));
      assertTrue(list1.contains(room1));
      assertNotNull(list1);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      HomePrint homePrint0 = home1.getPrint();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNull(homePrint0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedItems(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(compass0.isVisible());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(compass0);
      
      Class<Compass> class0 = Compass.class;
      Class<Room> class1 = Room.class;
      List<Room> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      Class<HomeFurnitureGroup> class2 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list2 = Home.getSubList((List<? extends Selectable>) list1, class2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list2);
      
      List<Compass> list3 = Home.getSubList((List<? extends Selectable>) list2, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertFalse(linkedList0.contains(compass0));
      assertFalse(list3.contains(compass0));
      assertNotNull(list3);
      
      Class<DimensionLine> class3 = DimensionLine.class;
      List<DimensionLine> list4 = Home.getSubList((List<? extends Selectable>) linkedList0, class3);
      assertEquals(0, linkedList0.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list4);
      
      List<Room> list5 = Home.getRoomsSubList(list4);
      assertEquals(0, linkedList0.size());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list5.isEmpty());
      assertEquals(0, list5.size());
      assertTrue(list5.equals((Object)list1));
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list5);
      assertNotSame(list5, list1);
      
      home0.setName("");
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setStoredCameras(linkedList0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals("'KpJq-q", label1.getText());
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Label label2 = new Label("r}.e<<7f/f<~=,eOV", (-838.1117F), 0.0F);
      assertEquals(0.0F, label2.getY(), 0.01F);
      assertEquals("r}.e<<7f/f<~=,eOV", label2.getText());
      assertEquals((-838.1117F), label2.getX(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      
      Label label3 = label1.clone();
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals("'KpJq-q", label1.getText());
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertEquals(0.0F, label3.getAngle(), 0.01F);
      assertEquals((-838.1117F), label3.getY(), 0.01F);
      assertEquals(3700.0F, label3.getX(), 0.01F);
      assertEquals("'KpJq-q", label3.getText());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label0.equals((Object)label2));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label3.equals((Object)label1));
      assertFalse(label3.equals((Object)label0));
      assertFalse(label3.equals((Object)label2));
      assertNotNull(label3);
      assertNotSame(label0, label3);
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      assertNotSame(label1, label2);
      assertNotSame(label1, label3);
      assertNotSame(label1, label0);
      assertNotSame(label3, label1);
      assertNotSame(label3, label0);
      assertNotSame(label3, label2);
      
      home0.setModified(false);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-1.0F), 0.0F, 3424.0F, (-838.1117F), 3700L);
      assertEquals(3424.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-419.05585F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-838.1117F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3526.054F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1711.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3526.054F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(3424.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-1.0F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-419.05585F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-838.1117F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3526.054F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1711.5F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(3526.054F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1);
      
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-2638L));
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals((-2638L), observerCamera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Camera camera1 = home0.getCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera1);
      assertSame(camera1, camera0);
      
      Label label0 = new Label("Atlantic/Stanley", (-2769.229F), (-2769.229F));
      assertEquals((-2769.229F), label0.getX(), 0.01F);
      assertEquals((-2769.229F), label0.getY(), 0.01F);
      assertEquals("Atlantic/Stanley", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals((-2769.229F), label0.getX(), 0.01F);
      assertEquals((-2769.229F), label0.getY(), 0.01F);
      assertEquals("Atlantic/Stanley", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Atlantic/Stanley", label1.getText());
      assertEquals((-2769.229F), label1.getX(), 0.01F);
      assertEquals((-2769.229F), label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Label label2 = new Label("C)", (-838.1117F), (-2769.229F));
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals((-838.1117F), label2.getX(), 0.01F);
      assertEquals((-2769.229F), label2.getY(), 0.01F);
      assertEquals("C)", label2.getText());
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotNull(label2);
      
      Label label3 = label1.clone();
      assertEquals((-2769.229F), label0.getX(), 0.01F);
      assertEquals((-2769.229F), label0.getY(), 0.01F);
      assertEquals("Atlantic/Stanley", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Atlantic/Stanley", label1.getText());
      assertEquals((-2769.229F), label1.getX(), 0.01F);
      assertEquals((-2769.229F), label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-2769.229F), label3.getY(), 0.01F);
      assertEquals((-2769.229F), label3.getX(), 0.01F);
      assertEquals(0.0F, label3.getAngle(), 0.01F);
      assertEquals("Atlantic/Stanley", label3.getText());
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label3.equals((Object)label0));
      assertFalse(label3.equals((Object)label2));
      assertFalse(label3.equals((Object)label1));
      assertNotNull(label3);
      assertNotSame(label0, label3);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label1, label2);
      assertNotSame(label1, label3);
      assertNotSame(label1, label0);
      assertNotSame(label3, label0);
      assertNotSame(label3, label2);
      assertNotSame(label3, label1);
      
      home0.setModified(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(1575.0894F, (-41.296177F), (-381.9F), 2055.99F, 1575.0894F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(596.59467F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-41.296177F), wall0.getYStart(), 0.01F);
      assertEquals(1575.0894F, wall0.getThickness(), 0.01F);
      assertEquals(1575.0894F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2868.5217F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-381.9F), wall0.getXEnd(), 0.01F);
      assertEquals(1007.3469F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2055.99F, wall0.getYEnd(), 0.01F);
      assertEquals(2868.5217F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.getWallAtStart();
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(596.59467F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-41.296177F), wall0.getYStart(), 0.01F);
      assertEquals(1575.0894F, wall0.getThickness(), 0.01F);
      assertEquals(1575.0894F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2868.5217F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-381.9F), wall0.getXEnd(), 0.01F);
      assertEquals(1007.3469F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2055.99F, wall0.getYEnd(), 0.01F);
      assertEquals(2868.5217F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall1);
      
      home0.addWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(596.59467F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-41.296177F), wall0.getYStart(), 0.01F);
      assertEquals(1575.0894F, wall0.getThickness(), 0.01F);
      assertEquals(1575.0894F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2868.5217F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-381.9F), wall0.getXEnd(), 0.01F);
      assertEquals(1007.3469F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2055.99F, wall0.getYEnd(), 0.01F);
      assertEquals(2868.5217F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      Float float0 = new Float((double) 3700L);
      assertNotNull(float0);
      assertEquals(3700.0F, (float)float0, 0.01F);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 0.0F, 3700L, 3700L, (-88.25F), 0.0F, 291.08F, true, true, true, float0, "com.eteks.sweethome3d.model.Home", "com.eteks.sweethome3d.model.Home");
      assertEquals(3700.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(0.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals((-88.25F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperHeight(), 0.01F);
      assertTrue(homePrint0.isFurniturePrinted());
      assertTrue(homePrint0.isPlanPrinted());
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getHeaderFormat());
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getFooterFormat());
      assertEquals(291.08F, homePrint0.getPaperRightMargin(), 0.01F);
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPlanScale(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals(0.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals((-88.25F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperHeight(), 0.01F);
      assertTrue(homePrint0.isFurniturePrinted());
      assertTrue(homePrint0.isPlanPrinted());
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getHeaderFormat());
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getFooterFormat());
      assertEquals(291.08F, homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(853.188F, 3700L, 3700L, 853.188F, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2276.594F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4026.0002F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.188F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2276.594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(853.188F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(4026.0002F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(3700L, 853.188F, 853.188F, 853.188F, 853.188F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(853.188F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2846.812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(853.188F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(853.188F, wall1.getThickness(), 0.01F);
      assertEquals(2276.594F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(853.188F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(853.188F, wall1.getXEnd(), 0.01F);
      assertEquals(2846.812F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      home0.addWall(wall1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(853.188F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(2846.812F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(853.188F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(853.188F, wall1.getThickness(), 0.01F);
      assertEquals(2276.594F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(853.188F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(853.188F, wall1.getXEnd(), 0.01F);
      assertEquals(2846.812F, wall1.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2276.594F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(4026.0002F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(853.188F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(2276.594F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(853.188F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(4026.0002F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home(list0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      home1.setFurnitureDescendingSorted(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      float[][] floatArray0 = new float[5][3];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (-197.264F);
      floatArray1[3] = 0.0F;
      floatArray1[4] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (-197.264F);
      floatArray2[5] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 3572.78F;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = 0.0F;
      floatArray3[4] = (-197.264F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      
      floatArray5[0] = 0.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 3572.78F;
      floatArray5[3] = (-197.264F);
      floatArray5[4] = (float) 3700L;
      floatArray5[5] = (float) 3700L;
      floatArray5[6] = (float) 3700L;
      floatArray5[7] = (float) 3700L;
      floatArray0[4] = floatArray5;
      Room room0 = new Room(floatArray0);
      assertEquals(5, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNotNull(room0);
      
      home1.deleteRoom(room0);
      assertEquals(5, floatArray0.length);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.setRecovered(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      List<Selectable> list1 = home1.getSelectedItems();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Level level0 = home0.getSelectedLevel();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(level0);
      
      home0.deleteLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = new Long(3700L);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_VISIBLE_PROPERTIES;
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = new Compass(3700L, 3700L, (-1231.2755F));
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      compass0.setX(3700L);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      
      Compass compass1 = compass0.clone();
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals((-1231.2755F), compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass1.equals((Object)compass0));
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      compass1.setDiameter((-1022.18F));
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals((-1022.18F), compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      boolean boolean0 = linkedList0.add(compass1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals((-1022.18F), compass1.getDiameter(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(linkedList0.contains(compass0));
      assertTrue(linkedList0.contains(compass1));
      assertTrue(boolean0);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(linkedList0.contains(compass1));
      assertNotNull(list0);
      
      List<Selectable> list1 = home0.getSelectedItems();
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.removeWallsListener((CollectionListener<Wall>) null);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getTopCamera();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Home home0 = new Home(3146.7925F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      
      home0.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      home1.setFurnitureDescendingSorted(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLevelsListener(collectionListener1);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.addWallsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Level> list0 = home1.getLevels();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.COLOR;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.COLOR, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      home1.setModified(false);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.COLOR, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Africa/Bangui");
      assertFalse(boolean0);
      
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Level level0 = home0.getSelectedLevel();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNull(level0);
      assertNotSame(home0, home1);
      
      home1.setSelectedLevel((Level) null);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<Wall> collection0 = home1.getWalls();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(100.0F, 0.0F, 100.0F, 100.0F, (-869.0F), (-869.0F));
      assertEquals(100.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-869.0F), wall0.getThickness(), 0.01F);
      assertEquals(100.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(100.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(100.0F, wall0.getLength(), 0.01F);
      assertEquals(50.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(100.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.0F), wall0.getHeight(), 0.01F);
      assertEquals(100.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      linkedList0.clear();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(wall0));
      
      boolean boolean0 = linkedList0.add(wall0);
      assertEquals(1, linkedList0.size());
      assertEquals(100.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-869.0F), wall0.getThickness(), 0.01F);
      assertEquals(100.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(100.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(100.0F, wall0.getLength(), 0.01F);
      assertEquals(50.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(100.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-869.0F), wall0.getHeight(), 0.01F);
      assertEquals(100.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertTrue(linkedList0.contains(wall0));
      assertTrue(boolean0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(wall0));
      assertNotNull(list0);
      
      home0.deleteRoom((Room) null);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Home home0 = new Home((-3126.0F));
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VISIBLE;
      boolean boolean0 = linkedList0.add(homePieceOfFurniture_SortableProperty0);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(homePieceOfFurniture_SortableProperty0));
      assertTrue(boolean0);
      
      home0.setFurnitureVisibleProperties(linkedList0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(homePieceOfFurniture_SortableProperty0));
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Room> collectionListener1 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener1);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      home0.setSelectedLevel((Level) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.deleteLevel((Level) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(2966.0F, (-3126.0F), 0.0F, 2966.0F, 186.211F);
      assertEquals(186.211F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3126.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(6775.6636F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(186.211F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3126.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(6775.6636F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(6775.6636F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2966.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(186.211F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2966.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-3126.0F), dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.addDimensionLine(dimensionLine1);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals((-3126.0F), home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(186.211F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-3126.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(6775.6636F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(6775.6636F, dimensionLine1.getLength(), 0.01F);
      assertEquals(2966.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(186.211F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2966.0F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-3126.0F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<Wall> collection0 = home1.getWalls();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedItems(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = linkedList0.retainAll(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(boolean0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(compass0);
      
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      home0.setFurnitureVisibleProperties(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      boolean boolean1 = linkedList0.add(compass0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(compass0));
      assertTrue(boolean1);
      
      ListIterator<Compass> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(listIterator0);
      
      Home home1 = home0.clone();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Selectable> list2 = home1.getSelectedItems();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(list2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.removeWallsListener((CollectionListener<Wall>) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertTrue(linkedList0.contains(compass0));
      assertNotSame(home0, home1);
      
      Collection<DimensionLine> collection0 = home1.getDimensionLines();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      
      Level level0 = new Level((String) null, (-825.6089F), 3700L, 3700L);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals((-825.6089F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      home1.setSelectedLevel(level0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals((-825.6089F), level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.setFurnitureVisibleProperties(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setVisualProperty("", "");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Level level0 = new Level("oN%Cp12z-B+1%U", 0.0F, 984.7346F, (-347.0F));
      assertEquals("oN%Cp12z-B+1%U", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(984.7346F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-347.0F), level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("oN%Cp12z-B+1%U", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals(984.7346F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-347.0F), level0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home(2966.7F);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera1 = home0.getCamera();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertNull(camera1.getName());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera1);
      assertSame(camera1, camera0);
      
      home0.setName("esOiucm7zSoVM)j/x");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list0 = home0.getLevels();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      DimensionLine dimensionLine0 = new DimensionLine(2966.7F, 2966.7F, (-773.85706F), (-773.85706F), 2966.7F);
      assertEquals((-773.85706F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5289.9463F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals((-773.85706F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5289.9463F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(5289.9463F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      boolean boolean0 = linkedList0.add(dimensionLine1);
      assertEquals(1, linkedList0.size());
      assertEquals((-773.85706F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5289.9463F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(5289.9463F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertTrue(linkedList0.contains(dimensionLine1));
      assertFalse(linkedList0.contains(dimensionLine0));
      assertTrue(boolean0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8:n6$7@|}@!3MBV*");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      List<Label> list1 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(dimensionLine1));
      assertFalse(linkedList0.contains(dimensionLine0));
      assertNotNull(list1);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(1, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(linkedList0.contains(dimensionLine1));
      assertFalse(linkedList0.contains(dimensionLine0));
      assertNotNull(list2);
      
      home0.setName("esOiucm7zSoVM)j/x");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeDoorOrWindow> linkedList1 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      home0.setName("P0>tg?`I.R");
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("P0>tg?`I.R", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("P0>tg?`I.R", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = home0.getName();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("P0>tg?`I.R", home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(string0);
      assertEquals("P0>tg?`I.R", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String string0 = "";
      float float0 = 0.0F;
      float float1 = 4.1666665F;
      float[][] floatArray0 = new float[0][7];
      Room room0 = null;
      try {
        room0 = new Room(floatArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Room points must containt at least two points
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home();
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      Home home2 = new Home((-117.01667F));
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-117.01667F), home2.getWallHeight(), 0.01F);
      assertNull(home2.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertNotNull(home2);
      
      // Undeclared exception!
      try { 
        home2.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(2, floatArray0.length);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("", 3700L, 3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("", label0.getText());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      float float0 = 2966.7F;
      Home home0 = new Home(2966.7F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      String string0 = "esOiucm7zSoVM)j/x";
      home0.setName("esOiucm7zSoVM)j/x");
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      float float1 = (-773.85706F);
      DimensionLine dimensionLine0 = new DimensionLine(2966.7F, 2966.7F, (-773.85706F), (-773.85706F), 2966.7F);
      assertEquals(2966.7F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(5289.9463F, dimensionLine0.getLength(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(2966.7F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-773.85706F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(5289.9463F, dimensionLine0.getLength(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getYStart(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-773.85706F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2966.7F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(5289.9463F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      List<Label> list1 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(dimensionLine0));
      assertNotNull(list1);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.HEIGHT;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("esOiucm7zSoVM)j/x");
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = home0.getFurnitureSortedProperty();
      assertFalse(home0.isRecovered());
      assertEquals(2966.7F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, home0.getFurnitureSortedProperty());
      assertEquals("esOiucm7zSoVM)j/x", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(HomePieceOfFurniture.SortableProperty.HEIGHT, homePieceOfFurniture_SortableProperty1);
      assertSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      
      String string1 = "E<eGYQ6#;2z";
      Class<DimensionLine> class0 = DimensionLine.class;
      boolean boolean0 = false;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = null;
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      
      float float0 = home0.getWallHeight();
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(false);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(list0.contains(homePieceOfFurniture_SortableProperty0));
      
      float float0 = home0.getWallHeight();
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label((String) null, 3700L, 0.0F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertNotNull(label0);
      
      home0.deleteLabel(label0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNull(label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(boolean0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      String string0 = home1.getName();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNull(string0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 3700L);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteWall(wall0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setSelectedItems(linkedList0);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedItems(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = linkedList0.retainAll(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(boolean0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(compass0);
      
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      home0.setFurnitureVisibleProperties(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      boolean boolean1 = linkedList0.add(compass0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(compass0));
      assertTrue(boolean1);
      
      ListIterator<Compass> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(listIterator0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, (-2504.153F), 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(6204.1533F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-2504.153F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      Wall wall0 = new Wall(0.0F, (-2504.153F), 3432.3323F, 4465.16F, (-2177.6125F), (-134.41972F));
      assertEquals(3432.3323F, wall0.getXEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getHeight(), 0.01F);
      assertEquals((-2177.6125F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2504.153F), wall0.getYStart(), 0.01F);
      assertEquals(4465.16F, wall0.getYEnd(), 0.01F);
      assertEquals(7768.67F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7768.67F, wall0.getLength(), 0.01F);
      assertEquals(980.50354F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1716.1661F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(3432.3323F, wall0.getXEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getHeight(), 0.01F);
      assertEquals((-2177.6125F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2504.153F), wall0.getYStart(), 0.01F);
      assertEquals(4465.16F, wall0.getYEnd(), 0.01F);
      assertEquals(7768.67F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7768.67F, wall0.getLength(), 0.01F);
      assertEquals(980.50354F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1716.1661F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1716.1661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3432.3323F, wall1.getXEnd(), 0.01F);
      assertEquals(4465.16F, wall1.getYEnd(), 0.01F);
      assertEquals((-2177.6125F), wall1.getThickness(), 0.01F);
      assertEquals((-2504.153F), wall1.getYStart(), 0.01F);
      assertEquals((-134.41972F), wall1.getHeight(), 0.01F);
      assertEquals(980.50354F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7768.67F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7768.67F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall1.getWallAtStart();
      assertEquals(3432.3323F, wall0.getXEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getHeight(), 0.01F);
      assertEquals((-2177.6125F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2504.153F), wall0.getYStart(), 0.01F);
      assertEquals(4465.16F, wall0.getYEnd(), 0.01F);
      assertEquals(7768.67F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7768.67F, wall0.getLength(), 0.01F);
      assertEquals(980.50354F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1716.1661F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(1716.1661F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3432.3323F, wall1.getXEnd(), 0.01F);
      assertEquals(4465.16F, wall1.getYEnd(), 0.01F);
      assertEquals((-2177.6125F), wall1.getThickness(), 0.01F);
      assertEquals((-2504.153F), wall1.getYStart(), 0.01F);
      assertEquals((-134.41972F), wall1.getHeight(), 0.01F);
      assertEquals(980.50354F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(7768.67F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(7768.67F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setStoredCameras(linkedList0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Wall wall0 = new Wall((-134.41972F), (-838.1117F), (-3339.1853F), (-838.1117F), (-3339.1853F), 1500.0F);
      assertEquals(1500.0F, wall0.getHeight(), 0.01F);
      assertEquals((-838.1117F), wall0.getYEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getXStart(), 0.01F);
      assertEquals((-1736.8025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3204.7656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.1117F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3339.1853F), wall0.getXEnd(), 0.01F);
      assertEquals((-838.1117F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3339.1853F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3204.7656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(1500.0F, wall0.getHeight(), 0.01F);
      assertEquals((-838.1117F), wall0.getYEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getXStart(), 0.01F);
      assertEquals((-1736.8025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3204.7656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.1117F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3339.1853F), wall0.getXEnd(), 0.01F);
      assertEquals((-838.1117F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3339.1853F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3204.7656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(3204.7656F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-838.1117F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-838.1117F), wall1.getYEnd(), 0.01F);
      assertEquals((-3339.1853F), wall1.getThickness(), 0.01F);
      assertEquals(1500.0F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3204.7656F, wall1.getLength(), 0.01F);
      assertEquals((-838.1117F), wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-3339.1853F), wall1.getXEnd(), 0.01F);
      assertEquals((-1736.8025F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-134.41972F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Wall wall2 = wall0.getWallAtStart();
      assertEquals(1500.0F, wall0.getHeight(), 0.01F);
      assertEquals((-838.1117F), wall0.getYEnd(), 0.01F);
      assertEquals((-134.41972F), wall0.getXStart(), 0.01F);
      assertEquals((-1736.8025F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3204.7656F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-838.1117F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3339.1853F), wall0.getXEnd(), 0.01F);
      assertEquals((-838.1117F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-3339.1853F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3204.7656F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertNotSame(wall0, wall1);
      
      Wall wall3 = new Wall(1435.1044F, (-925.0F), (-3339.1853F), 954.3703F, 0.0F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1435.1044F, wall3.getXStart(), 0.01F);
      assertEquals(954.3703F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-3339.1853F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(5130.8745F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(14.68515F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-925.0F), wall3.getYStart(), 0.01F);
      assertEquals(5130.8745F, wall3.getLength(), 0.01F);
      assertEquals((-952.04047F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      
      home0.deleteWall(wall3);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(1435.1044F, wall3.getXStart(), 0.01F);
      assertEquals(954.3703F, wall3.getYEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals((-3339.1853F), wall3.getXEnd(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals(5130.8745F, wall3.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall3.getHeightAtEnd());
      assertEquals(14.68515F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals((-925.0F), wall3.getYStart(), 0.01F);
      assertEquals(5130.8745F, wall3.getLength(), 0.01F);
      assertEquals((-952.04047F), wall3.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall3.getThickness(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      
      LinkedList<Room> linkedList1 = new LinkedList<Room>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Class<Room> class0 = Room.class;
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<HomeLight> class1 = HomeLight.class;
      List<HomeLight> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertEquals(0, linkedList1.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      home1.setName("'KpJq-q");
      assertEquals("'KpJq-q", home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home1, home0);
      assertNotSame(home0, home1);
      
      home0.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      Home home2 = new Home(0.0F);
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertNotNull(home2);
      
      Collection<Label> collection0 = home2.getLabels();
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(collection0.contains(label0));
      assertNotNull(collection0);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      LinkedList<Label> linkedList2 = new LinkedList<Label>(collection0);
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0, linkedList2.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(collection0.contains(label0));
      assertFalse(linkedList2.contains(label0));
      assertNotNull(linkedList2);
      
      home0.setSelectedItems(linkedList2);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(0, linkedList2.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(collection0.contains(label0));
      assertFalse(linkedList2.contains(label0));
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      String string0 = home0.getName();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertNull(string0);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home(3700L);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      String string0 = home1.getName();
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNull(string0);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Wall wall0 = new Wall(3343.51F, 3343.51F, 73.514F, (-1519.59F), (-100.0F), 33.366665F);
      assertEquals(5860.2573F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(911.96F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1708.512F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(33.366665F, wall0.getHeight(), 0.01F);
      assertEquals(3343.51F, wall0.getXStart(), 0.01F);
      assertEquals((-100.0F), wall0.getThickness(), 0.01F);
      assertEquals(3343.51F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(73.514F, wall0.getXEnd(), 0.01F);
      assertEquals(5860.2573F, wall0.getLength(), 0.01F);
      assertEquals((-1519.59F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(5860.2573F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(911.96F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1708.512F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(33.366665F, wall0.getHeight(), 0.01F);
      assertEquals(3343.51F, wall0.getXStart(), 0.01F);
      assertEquals((-100.0F), wall0.getThickness(), 0.01F);
      assertEquals(3343.51F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(73.514F, wall0.getXEnd(), 0.01F);
      assertEquals(5860.2573F, wall0.getLength(), 0.01F);
      assertEquals((-1519.59F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-100.0F), wall1.getThickness(), 0.01F);
      assertEquals(3343.51F, wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3343.51F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(911.96F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1708.512F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(5860.2573F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(33.366665F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(73.514F, wall1.getXEnd(), 0.01F);
      assertEquals((-1519.59F), wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5860.2573F, wall1.getLength(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Home home0 = new Home(3343.51F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3343.51F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float float0 = home0.getWallHeight();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3343.51F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3343.51F, float0, 0.01F);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3343.51F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 1000.0F, (-1003.0938F), (-2093.5F), 1000.0F, 3700L);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5629.2837F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2093.5F), wall0.getYEnd(), 0.01F);
      assertEquals((-546.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1000.0F, wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1003.0938F), wall0.getXEnd(), 0.01F);
      assertEquals(5629.2837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1348.4531F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(5629.2837F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals((-2093.5F), wall0.getYEnd(), 0.01F);
      assertEquals((-546.75F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1000.0F, wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals((-1003.0938F), wall0.getXEnd(), 0.01F);
      assertEquals(5629.2837F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1348.4531F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.PRINT;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Europe/Zurich", propertyChangeListener0);
      assertEquals("Europe/Zurich", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("Europe/Zurich", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[4][5];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = 4257.0F;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray1[7] = (float) 3700L;
      floatArray1[8] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = 4257.0F;
      floatArray2[3] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 4257.0F;
      floatArray3[1] = 4257.0F;
      floatArray3[2] = 511.473F;
      floatArray3[3] = 4257.0F;
      floatArray3[4] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = 80.0F;
      floatArray4[1] = 511.473F;
      floatArray0[3] = floatArray4;
      Room room0 = new Room(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(2168.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2384.2366F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNotNull(room0);
      
      // Undeclared exception!
      try { 
        home0.addRoom(room0, 1680);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1680, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.RECOVERED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("Mideast/Riyadh89", propertyChangeListener0);
      assertEquals("Mideast/Riyadh89", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals("Mideast/Riyadh89", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setVisualProperty("/+", "/+");
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Level> list0 = home0.getLevels();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(0.7853982F, 0.7853982F, 0.7853982F, 0.7853982F, 0.0F, 0.7853982F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.7853982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.7853982F, wall0.getHeight(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertEquals(0.7853982F, wall0.getYEnd(), 0.01F);
      assertEquals(0.7853982F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.7853982F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.7853982F);
      assertEquals(0.7853982F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      home0.addWall(wall1);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.7853982F, wall1.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall1, wall0);
      
      home0.deleteWall(wall0);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.7853982F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.7853982F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.7853982F, wall0.getHeight(), 0.01F);
      assertEquals(0.7853982F, wall0.getXEnd(), 0.01F);
      assertEquals(0.7853982F, wall0.getYEnd(), 0.01F);
      assertEquals(0.7853982F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.7853982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Compass compass0 = new Compass(3700L, 3700L, (-1231.2755F));
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertNotNull(compass0);
      
      compass0.setX(3700L);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      
      Compass compass1 = compass0.clone();
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-1231.2755F), compass1.getDiameter(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass1.equals((Object)compass0));
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      boolean boolean0 = compass1.intersectsRectangle((-1231.2755F), (-1022.18F), 49.2F, 49.2F);
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-1231.2755F), compass1.getDiameter(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(boolean0);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      compass1.setDiameter((-1022.18F));
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-1022.18F), compass1.getDiameter(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      boolean boolean1 = linkedList0.add(compass1);
      assertEquals(1, linkedList0.size());
      assertEquals(3700.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals((-1231.2755F), compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals((-1022.18F), compass1.getDiameter(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getY(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(compass1));
      assertFalse(linkedList0.contains(compass0));
      assertTrue(boolean1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      home0.setBasePlanLocked(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(3700L, (-100.57788F), 3.1415927F, (-54.616665F), (-334.06363F), (-334.06363F));
      assertEquals((-54.616665F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.06363F), wall0.getHeight(), 0.01F);
      assertEquals(3.1415927F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-100.57788F), wall0.getYStart(), 0.01F);
      assertEquals((-77.597275F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3697.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1851.5708F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3697.144F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.06363F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-54.616665F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.06363F), wall0.getHeight(), 0.01F);
      assertEquals(3.1415927F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-100.57788F), wall0.getYStart(), 0.01F);
      assertEquals((-77.597275F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3697.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1851.5708F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3697.144F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.06363F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-334.06363F), wall1.getHeight(), 0.01F);
      assertEquals(3.1415927F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(3697.144F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-54.616665F), wall1.getYEnd(), 0.01F);
      assertEquals((-334.06363F), wall1.getThickness(), 0.01F);
      assertEquals((-77.597275F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(1851.5708F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3697.144F, wall1.getLength(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-100.57788F), wall1.getYStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      home0.deleteWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-54.616665F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-334.06363F), wall0.getHeight(), 0.01F);
      assertEquals(3.1415927F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-100.57788F), wall0.getYStart(), 0.01F);
      assertEquals((-77.597275F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3697.144F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1851.5708F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3697.144F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-334.06363F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      DimensionLine dimensionLine0 = new DimensionLine((-100.57788F), 5.4977875F, 12.1167F, (-822.74896F), 0.0F);
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(12.1167F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-822.74896F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(12.1167F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-822.74896F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(12.1167F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-822.74896F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(5.4977875F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(12.1167F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-822.74896F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(12.1167F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-822.74896F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(5.4977875F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.removeSelectionListener((SelectionListener) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = dimensionLine1.getLevel();
      assertEquals(5.4977875F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(12.1167F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-822.74896F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(12.1167F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-822.74896F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-100.57788F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(5.4977875F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(835.8784F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNull(level0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.deleteLevel((Level) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertNotNull(list2);
      
      Home home1 = new Home();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      Level level0 = home0.getSelectedLevel();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNull(level0);
      assertNotSame(home0, home1);
      
      // Undeclared exception!
      try { 
        home1.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Label label0 = new Label("Asia/Omsk", (-322.223F), (-322.223F));
      assertEquals((-322.223F), label0.getX(), 0.01F);
      assertEquals((-322.223F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Omsk", label0.getText());
      assertNotNull(label0);
      
      boolean boolean0 = linkedList0.add(label0);
      assertEquals(1, linkedList0.size());
      assertEquals((-322.223F), label0.getX(), 0.01F);
      assertEquals((-322.223F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Omsk", label0.getText());
      assertTrue(linkedList0.contains(label0));
      assertTrue(boolean0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertTrue(linkedList0.contains(label0));
      assertNotNull(list0);
      
      List<Label> list1 = Home.getLabelsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(label0));
      assertTrue(list1.contains(label0));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedItems(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(compass0);
      
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals((-2504.153F), label0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list1);
      
      home0.setFurnitureVisibleProperties(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(linkedList0.contains(compass0));
      
      boolean boolean0 = linkedList0.add(compass0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(compass0));
      assertTrue(boolean0);
      
      ListIterator<Compass> listIterator0 = linkedList0.listIterator();
      assertEquals(1, linkedList0.size());
      assertFalse(listIterator0.hasPrevious());
      assertTrue(listIterator0.hasNext());
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(listIterator0);
      
      Home home1 = home0.clone();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      long long0 = home1.getVersion();
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertEquals(3700L, long0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-2504.153F);
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 242.6F;
      floatArray2[4] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (-2504.153F);
      floatArray3[1] = 242.6F;
      floatArray3[2] = (-2504.153F);
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = (float) 3700L;
      floatArray3[5] = (float) 3700L;
      floatArray3[6] = 1500.0F;
      floatArray0[2] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertEquals(3, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(597.92346F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(3, floatArray0.length);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(597.92346F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(597.92346F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      home1.addRoom(room1);
      assertEquals(3, floatArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(597.92346F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(3, room1.getPointCount());
      assertEquals(597.92346F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(home0.equals((Object)home1));
      assertFalse(room1.equals((Object)room0));
      assertFalse(home1.equals((Object)home0));
      assertTrue(linkedList0.contains(compass0));
      assertNotSame(room0, room1);
      assertNotSame(home0, home1);
      assertNotSame(room1, room0);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_DESCENDING_SORTED;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.model.Home$2", propertyChangeListener0);
      assertEquals("com.eteks.sweethome3d.model.Home$2", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.addPropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals("com.eteks.sweethome3d.model.Home$2", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      boolean boolean0 = home0.isEmpty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(boolean0);
      
      home0.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      Camera camera1 = home0.getCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera1);
      assertSame(camera1, camera0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      float float0 = (-3476.5F);
      Home home0 = new Home((-3476.5F));
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-3476.5F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-3476.5F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setSelectedItems(linkedList0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals((-3476.5F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      String string0 = "%K|j5]u&3^]N. XD k";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "@vRTc");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource @vRTc
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(false);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        Home.duplicate((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Room> list0 = home0.getRooms();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(boolean0);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Label) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Home home0 = new Home(7.5F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      home0.deselectItem(observerCamera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener1);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener2 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Room> class0 = Room.class;
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<HomeLight> class1 = HomeLight.class;
      List<HomeLight> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      
      home0.addLevelsListener(collectionListener2);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(7.5F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list0 = home0.getLevels();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      List<Camera> list1 = home0.getStoredCameras();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteWall(wall0);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      DimensionLine dimensionLine0 = new DimensionLine(1380.9F, 1380.9F, 1380.9F, 1.0995575F, 500.0F);
      assertEquals(1380.9F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(1379.8004F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1.0995575F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(500.0F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      dimensionLine0.setXEnd(394.09302F);
      assertEquals(1696.36F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(394.09302F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0995575F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(500.0F, dimensionLine0.getOffset(), 0.01F);
      
      boolean boolean1 = linkedList0.add(dimensionLine0);
      assertEquals(1, linkedList0.size());
      assertEquals(1696.36F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(394.09302F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1.0995575F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1380.9F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(500.0F, dimensionLine0.getOffset(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(dimensionLine0));
      assertTrue(boolean1);
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(dimensionLine0));
      assertTrue(list0.contains(dimensionLine0));
      assertNotNull(list0);
      
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      String string0 = home1.getName();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNull(string0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      float[][] floatArray0 = new float[2][0];
      float[] floatArray1 = new float[9];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (-2537.112F);
      floatArray1[2] = 500.0F;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = 500.0F;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = 394.09302F;
      floatArray1[7] = 394.09302F;
      floatArray1[8] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 394.09302F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(2, floatArray0.length);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2047.0465F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNotNull(room0);
      
      home1.addRoom(room0);
      assertEquals(2, floatArray0.length);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2047.0465F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Home.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)7;
      byteArray0[0] = (byte)7;
      byte byte1 = (byte) (-2);
      byteArray0[1] = (byte) (-2);
      byte byte2 = (byte) (-2);
      byteArray0[2] = (byte) (-2);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)7, (byte) (-2), (byte) (-2)}, byteArray0);
      assertFalse(boolean0);
      
      Home home0 = new Home((-608.0108F));
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals((-608.0108F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals((-608.0108F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(1846.63F, 1846.63F, 3700L, (-24.183332F), 1846.63F);
      assertEquals(2633.424F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-24.183332F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(2633.424F, dimensionLine0.getLength(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-24.183332F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(1846.63F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      home0.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", (-118.242775F), 2532.5596F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-118.242775F), label0.getX(), 0.01F);
      assertEquals(2532.5596F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-118.242775F), label0.getX(), 0.01F);
      assertEquals(2532.5596F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-118.242775F), label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(2532.5596F, label1.getY(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Label label2 = label0.clone();
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-118.242775F), label0.getX(), 0.01F);
      assertEquals(2532.5596F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label2.getText());
      assertEquals(2532.5596F, label2.getY(), 0.01F);
      assertEquals((-118.242775F), label2.getX(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertNotNull(label2);
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      assertNotSame(label2, label1);
      assertNotSame(label2, label0);
      
      label1.setAngle(761.70685F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-118.242775F), label0.getX(), 0.01F);
      assertEquals(2532.5596F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(1.4414259F, label1.getAngle(), 0.01F);
      assertEquals((-118.242775F), label1.getX(), 0.01F);
      assertEquals(2532.5596F, label1.getY(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label0.equals((Object)label2));
      assertFalse(label1.equals((Object)label0));
      assertFalse(label1.equals((Object)label2));
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      assertNotSame(label1, label0);
      assertNotSame(label1, label2);
      
      home0.deleteLabel(label0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-118.242775F), label0.getX(), 0.01F);
      assertEquals(2532.5596F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label0.equals((Object)label2));
      assertNotSame(label0, label1);
      assertNotSame(label0, label2);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      boolean boolean0 = home0.isEmpty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(boolean0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Home home0 = new Home(3146.7925F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      home1.setFurnitureDescendingSorted(false);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLevelsListener(collectionListener1);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.addWallsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Level> list0 = home1.getLevels();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.COLOR;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.COLOR, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Object object0 = home0.getVisualProperty("");
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Label label0 = new Label((String) null, 38.254166F, 870.0F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertNull(label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(38.254166F, label1.getX(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean0 = linkedList0.add(label1);
      assertEquals(1, linkedList0.size());
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertNull(label1.getText());
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(38.254166F, label1.getX(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(boolean0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Class<Label> class0 = Label.class;
      List<Label> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list2);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Class<HomeLight> class1 = HomeLight.class;
      List<HomeLight> list3 = Home.getSubList((List<? extends Selectable>) linkedList0, class1);
      assertEquals(1, linkedList0.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertNotNull(list3);
      
      List<Label> list4 = Home.getLabelsSubList(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list4.isEmpty());
      assertEquals(1, list4.size());
      assertTrue(list4.equals((Object)list0));
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertTrue(list4.contains(label1));
      assertFalse(list4.contains(label0));
      assertNotNull(list4);
      assertNotSame(list0, list4);
      assertNotSame(list4, list0);
      
      List<Room> list5 = Home.getRoomsSubList(list4);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(list4.isEmpty());
      assertEquals(1, list4.size());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertTrue(list0.equals((Object)list4));
      assertTrue(list4.equals((Object)list0));
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertTrue(list4.contains(label1));
      assertFalse(list4.contains(label0));
      assertNotNull(list5);
      assertNotSame(list0, list4);
      assertNotSame(list4, list0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 3700L, 3700L, 0.0F, (-4792.486F));
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5232.5903F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-4792.486F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.deselectItem(dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5232.5903F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-4792.486F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(boolean0);
      
      List<Wall> list2 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertNotSame(list2, list0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, 2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home(3146.7925F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(collection0);
      assertNotSame(home0, home1);
      
      home0.setBasePlanLocked(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotSame(home0, home1);
      
      home1.setFurnitureDescendingSorted(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Level> collectionListener1 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addLevelsListener(collectionListener1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home1.addWallsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener2 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.addFurnitureListener(collectionListener2);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = new Home(663.058F);
      assertTrue(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(663.058F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotNull(home2);
      
      home2.removeWallsListener((CollectionListener<Wall>) null);
      assertTrue(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(663.058F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      Collection<DimensionLine> collection1 = home0.getDimensionLines();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(collection1.equals((Object)collection0));
      assertNotNull(collection1);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(collection1, collection0);
      
      Camera camera0 = home1.getTopCamera();
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3146.7925F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertNotNull(camera0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      
      long long0 = home0.getVersion();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3146.7925F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, long0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Home home0 = new Home(35.23F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(35.23F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 0.0F, 2835.815F, 1513.2769F, 35.23F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1513.2769F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3214.32F, dimensionLine0.getLength(), 0.01F);
      assertEquals(2835.815F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(35.23F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1513.2769F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3214.32F, dimensionLine0.getLength(), 0.01F);
      assertEquals(2835.815F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(35.23F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(35.23F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2835.815F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(1513.2769F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3214.32F, dimensionLine1.getLength(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotNull(dimensionLine1);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(35.23F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(1513.2769F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3214.32F, dimensionLine0.getLength(), 0.01F);
      assertEquals(2835.815F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(35.23F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(35.23F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(2835.815F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(1513.2769F, dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3214.32F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.setName("STORED_CAMERAS");
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("STORED_CAMERAS", home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(35.23F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getFurnitureSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<HomePieceOfFurniture> list0 = home1.getFurniture();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list0);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = new Home(list0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertNotNull(home2);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.REVERSE_LANDSCAPE;
      float float0 = (-80.6174F);
      float float1 = 0.0F;
      float float2 = (-100.0F);
      float float3 = 0.0F;
      float float4 = 43.240276F;
      boolean boolean0 = true;
      boolean boolean1 = false;
      Float float5 = null;
      Level level0 = null;
      // Undeclared exception!
      try { 
        home1.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Camera) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setStoredCameras(linkedList0);
      assertEquals(1, linkedList0.size());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2319.7205F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray0[1] = floatArray2;
      List<Selectable> list0 = home0.getSelectedItems();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      List<Level> list1 = home0.getLevels();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      Home home1 = new Home(273.29F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(273.29F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      home1.removeFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(273.29F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      home1.setRecovered(false);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertEquals(273.29F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      
      List<HomeDoorOrWindow> list2 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(list2);
      assertNotSame(home0, home1);
      
      List<HomePieceOfFurniture> list3 = Home.getFurnitureSubList(list2);
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNotNull(list3);
      assertNotSame(home0, home1);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list3, "::<D,0`/f");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = new Compass(3700L, 1762.9761F, (-4696.7544F));
      assertEquals((-4696.7544F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1762.9761F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertNotNull(compass0);
      
      Compass compass1 = compass0.clone();
      assertEquals((-4696.7544F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1762.9761F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(1762.9761F, compass1.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals((-4696.7544F), compass1.getDiameter(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass1.equals((Object)compass0));
      assertNotNull(compass1);
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      compass1.setDiameter(1762.9761F);
      assertEquals((-4696.7544F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1762.9761F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(1762.9761F, compass1.getDiameter(), 0.01F);
      assertEquals(1762.9761F, compass1.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      home0.deselectItem(compass1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals((-4696.7544F), compass0.getDiameter(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(1762.9761F, compass0.getY(), 0.01F);
      assertEquals(3700.0F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass1.getTimeZone());
      assertEquals(1762.9761F, compass1.getDiameter(), 0.01F);
      assertEquals(1762.9761F, compass1.getY(), 0.01F);
      assertEquals(0.8982628F, compass1.getLatitude(), 0.01F);
      assertEquals(3700.0F, compass1.getX(), 0.01F);
      assertEquals(0.0F, compass1.getLongitude(), 0.01F);
      assertTrue(compass1.isVisible());
      assertEquals(0.0F, compass1.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(compass0.equals((Object)compass1));
      assertFalse(compass1.equals((Object)compass0));
      assertNotSame(compass0, compass1);
      assertNotSame(compass1, compass0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list0, "$--|c`A*0$RQ9wIN");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home(131.07825F);
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label(">PN@1>{~[ZbG[", 0.0F, 234.39496F);
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals(234.39496F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      home0.deleteLabel(label0);
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals(234.39496F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<Home> class0 = Home.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      LightSource[] lightSourceArray0 = new LightSource[7];
      Float float0 = new Float((double) 131.07825F);
      assertNotNull(float0);
      assertEquals(131.07825F, (float)float0, 0.01F);
      
      LightSource lightSource0 = new LightSource(131.07825F, (-944.4F), (-360.862F), (-1), float0);
      assertEquals((-360.862F), lightSource0.getZ(), 0.01F);
      assertEquals((-1), lightSource0.getColor());
      assertEquals(131.07825F, lightSource0.getX(), 0.01F);
      assertEquals(131.07825F, lightSource0.getDiameter(), 0.01F);
      assertEquals((-944.4F), lightSource0.getY(), 0.01F);
      assertNotNull(lightSource0);
      
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((-1093.642676704));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals((-1093.6427F), (float)float1, 0.01F);
      
      LightSource lightSource1 = new LightSource(0.0F, 131.07825F, 73.92705F, 2, float1);
      assertEquals(0.0F, lightSource1.getX(), 0.01F);
      assertEquals(131.07825F, lightSource1.getY(), 0.01F);
      assertEquals(73.92705F, lightSource1.getZ(), 0.01F);
      assertEquals((-1093.6427F), lightSource1.getDiameter(), 0.01F);
      assertEquals(2, lightSource1.getColor());
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertFalse(lightSource1.equals((Object)lightSource0));
      assertNotNull(lightSource1);
      
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3547.363F, 0.0F, 1462.8857F, (-662), float0);
      assertEquals(3547.363F, lightSource2.getX(), 0.01F);
      assertEquals(1462.8857F, lightSource2.getZ(), 0.01F);
      assertEquals(131.07825F, lightSource2.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource2.getY(), 0.01F);
      assertEquals((-662), lightSource2.getColor());
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(lightSource2.equals((Object)lightSource1));
      assertFalse(lightSource2.equals((Object)lightSource0));
      assertNotNull(lightSource2);
      
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(2, (-360.862F), 0.0F, (-662));
      assertEquals(2.0F, lightSource3.getX(), 0.01F);
      assertEquals((-662), lightSource3.getColor());
      assertEquals(0.0F, lightSource3.getZ(), 0.01F);
      assertEquals((-360.862F), lightSource3.getY(), 0.01F);
      assertNull(lightSource3.getDiameter());
      assertFalse(lightSource3.equals((Object)lightSource2));
      assertFalse(lightSource3.equals((Object)lightSource1));
      assertFalse(lightSource3.equals((Object)lightSource0));
      assertNotNull(lightSource3);
      
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(0.0F, 73.92705F, 0.0F, (-662), float0);
      assertEquals(0.0F, lightSource4.getX(), 0.01F);
      assertEquals(0.0F, lightSource4.getZ(), 0.01F);
      assertEquals((-662), lightSource4.getColor());
      assertEquals(131.07825F, lightSource4.getDiameter(), 0.01F);
      assertEquals(73.92705F, lightSource4.getY(), 0.01F);
      assertFalse(lightSource4.equals((Object)lightSource0));
      assertFalse(lightSource4.equals((Object)lightSource2));
      assertFalse(lightSource4.equals((Object)lightSource1));
      assertFalse(lightSource4.equals((Object)lightSource3));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(lightSource4);
      
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(73.92705F, (-1615.72F), 4542.132F, (-1), float1);
      assertEquals(73.92705F, lightSource5.getX(), 0.01F);
      assertEquals((-1615.72F), lightSource5.getY(), 0.01F);
      assertEquals((-1), lightSource5.getColor());
      assertEquals((-1093.6427F), lightSource5.getDiameter(), 0.01F);
      assertEquals(4542.132F, lightSource5.getZ(), 0.01F);
      assertFalse(lightSource5.equals((Object)lightSource4));
      assertFalse(lightSource5.equals((Object)lightSource1));
      assertFalse(lightSource5.equals((Object)lightSource3));
      assertFalse(lightSource5.equals((Object)lightSource2));
      assertFalse(lightSource5.equals((Object)lightSource0));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(lightSource5);
      
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(131.07825F, 4542.132F, 0.0F, 2339, float0);
      assertEquals(131.07825F, lightSource6.getX(), 0.01F);
      assertEquals(131.07825F, lightSource6.getDiameter(), 0.01F);
      assertEquals(0.0F, lightSource6.getZ(), 0.01F);
      assertEquals(2339, lightSource6.getColor());
      assertEquals(4542.132F, lightSource6.getY(), 0.01F);
      assertFalse(lightSource6.equals((Object)lightSource0));
      assertFalse(lightSource6.equals((Object)lightSource5));
      assertFalse(lightSource6.equals((Object)lightSource4));
      assertFalse(lightSource6.equals((Object)lightSource2));
      assertFalse(lightSource6.equals((Object)lightSource3));
      assertFalse(lightSource6.equals((Object)lightSource1));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertNotNull(lightSource6);
      
      lightSourceArray0[6] = lightSource6;
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 1462.8857F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 378.55795F;
      floatArray1[6] = (-360.862F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (-4068.0F);
      floatArray2[2] = 73.92705F;
      floatArray2[3] = (float) 2339;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 1462.8857F;
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = (float) (-662);
      floatArray3[6] = (-4068.0F);
      floatArray3[7] = (float) 3700L;
      floatArray3[8] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray4[0] = (-1615.72F);
      floatArray4[1] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray0[4] = floatArray5;
      BigInteger bigInteger0 = BigInteger.ONE;
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogLight catalogLight0 = new CatalogLight(">PN@1>{~[ZbG[", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 234.39496F, 378.55795F, (-360.862F), 0.0F, true, lightSourceArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(5, floatArray0.length);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-360.862F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(378.55795F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(234.39496F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(7, lightSourceArray0.length);
      assertEquals(5, floatArray0.length);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogLight0.isModifiable());
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getCreationDate());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertEquals((-360.862F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isResizable());
      assertNull(catalogLight0.getCurrency());
      assertEquals(378.55795F, catalogLight0.getDepth(), 0.01F);
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isMovable());
      assertEquals("", catalogLight0.getDescription());
      assertEquals("", catalogLight0.getCreator());
      assertEquals("", catalogLight0.getName());
      assertTrue(catalogLight0.isTexturable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.0F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(234.39496F, catalogLight0.getWidth(), 0.01F);
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertEquals(117.19748F, homeLight0.getX(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isNameVisible());
      assertFalse(homeLight0.isBackFaceShown());
      assertEquals(0.0F, homeLight0.getElevation(), 0.01F);
      assertEquals(234.39496F, homeLight0.getWidth(), 0.01F);
      assertEquals("", homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isResizable());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals("", homeLight0.getName());
      assertTrue(homeLight0.isMovable());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(378.55795F, homeLight0.getDepth(), 0.01F);
      assertEquals((-360.862F), homeLight0.getHeight(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(189.27898F, homeLight0.getY(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getColor());
      assertNotNull(homeLight0);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) homeLight0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setRecovered(false);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      home0.setName("Europe/Mariehamn");
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals("Europe/Mariehamn", home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(0.09153324F, 0.09153324F, 3700L, 3700L, 0.09153324F);
      assertEquals(5232.461F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1850.0458F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.09153324F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5232.461F, wall0.getLength(), 0.01F);
      assertEquals(0.09153324F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0458F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.09153324F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(5232.461F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1850.0458F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.09153324F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5232.461F, wall0.getLength(), 0.01F);
      assertEquals(0.09153324F, wall0.getThickness(), 0.01F);
      assertEquals(1850.0458F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.09153324F, wall0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.setFurnitureDescendingSorted(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, "#+fmN6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home0 = new Home(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(0, linkedList0.size());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Home home0 = new Home(1428.8F);
      assertFalse(home0.isModified());
      assertEquals(1428.8F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertFalse(home0.isModified());
      assertEquals(1428.8F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isRecovered();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$8");
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$8", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
      
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Home home0 = new Home(131.07825F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<Room> class0 = Room.class;
      List<Room> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<Selectable> list2 = Home.duplicate(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Label label0 = new Label((String) null, 36.455387F, 870.0F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(36.455387F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(36.455387F, label0.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(36.455387F, label1.getX(), 0.01F);
      assertNull(label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean0 = linkedList0.add(label1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(36.455387F, label0.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(36.455387F, label1.getX(), 0.01F);
      assertNull(label1.getText());
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(boolean0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Class<Label> class0 = Label.class;
      List<Label> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertFalse(list0.contains(label0));
      assertTrue(list0.contains(label1));
      assertNotNull(list2);
      
      boolean boolean1 = home0.isBasePlanLocked();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf("8sdmq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Home.Property.8sdmq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home();
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        home1.addRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Home home0 = new Home(131.07825F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Selectable> list1 = home0.getSelectedItems();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Compass compass0 = new Compass(2889.8972F, 2889.8972F, 131.07825F);
      assertEquals(131.07825F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(2889.8972F, compass0.getY(), 0.01F);
      assertEquals(2889.8972F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertNotNull(compass0);
      
      boolean boolean0 = linkedList1.add(compass0);
      assertEquals(1, linkedList1.size());
      assertEquals(131.07825F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(2889.8972F, compass0.getY(), 0.01F);
      assertEquals(2889.8972F, compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(linkedList1.contains(compass0));
      assertTrue(boolean0);
      
      LinkedList<Compass> linkedList2 = new LinkedList<Compass>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains(compass0));
      assertNotNull(linkedList2);
      
      ListIterator<Compass> listIterator0 = linkedList2.listIterator();
      assertEquals(0, linkedList2.size());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains(compass0));
      assertNotNull(listIterator0);
      assertNotSame(linkedList2, linkedList1);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertTrue(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertEquals(131.07825F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      long long0 = home0.getVersion();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(131.07825F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, long0);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = null;
      Home home0 = new Home(0.0F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Home");
      assertFalse(boolean0);
      
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Camera camera0 = new Camera(3700L, 0.0F, 3522.0896F, 3700L, 0.0F, 3700L);
      assertEquals(3700.0F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3522.0896F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(3700.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700.0F, camera0.getYaw(), 0.01F);
      assertNotNull(camera0);
      
      boolean boolean1 = linkedList0.add(camera0);
      assertEquals(1, linkedList0.size());
      assertEquals(3700.0F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3522.0896F, camera0.getZ(), 0.01F);
      assertEquals(0.0F, camera0.getPitch(), 0.01F);
      assertEquals(3700.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.0F, camera0.getY(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700.0F, camera0.getYaw(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertTrue(linkedList0.contains(camera0));
      assertTrue(boolean1);
      
      home0.setStoredCameras(linkedList0);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(camera0));
      
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Camera camera0 = home0.getTopCamera();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      home0.setCamera(camera0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, long0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      List<Compass> list0 = null;
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Camera) null);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setStoredCameras(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      // Undeclared exception!
      try { 
        home0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      label0.setAngle((-838.1117F));
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3.835137F, label0.getAngle(), 0.01F);
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label1);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      boolean boolean0 = home0.isRecovered();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.setRecovered(false);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      
      Home home0 = new Home();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label1.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals((-838.1117F), label1.getY(), 0.01F);
      assertEquals("'KpJq-q", label1.getText());
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Label label2 = label0.clone();
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700.0F, label2.getX(), 0.01F);
      assertEquals(0.0F, label2.getAngle(), 0.01F);
      assertEquals("'KpJq-q", label2.getText());
      assertEquals((-838.1117F), label2.getY(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label2.equals((Object)label0));
      assertFalse(label2.equals((Object)label1));
      assertNotNull(label2);
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      assertNotSame(label2, label0);
      assertNotSame(label2, label1);
      
      label0.setAngle((-838.1117F));
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(3.835137F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      
      home0.deleteLabel(label0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("'KpJq-q", label0.getText());
      assertEquals((-838.1117F), label0.getY(), 0.01F);
      assertEquals(3.835137F, label0.getAngle(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(label0.equals((Object)label2));
      assertFalse(label0.equals((Object)label1));
      assertNotSame(label0, label2);
      assertNotSame(label0, label1);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      boolean boolean0 = home0.isRecovered();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.addSelectionListener(selectionListener0);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home0 = new Home(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[9][0];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = (float) 3700L;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = (-1838.3267F);
      floatArray4[1] = (float) 3700L;
      floatArray4[2] = (float) 3700L;
      floatArray4[3] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = (float) 3700L;
      floatArray5[1] = (-1838.3267F);
      floatArray5[2] = (float) 3700L;
      floatArray5[3] = (float) 3700L;
      floatArray5[4] = (float) 3700L;
      floatArray5[5] = (-1838.3267F);
      floatArray5[6] = (-1838.3267F);
      floatArray5[7] = (-1838.3267F);
      floatArray5[8] = (float) 3700L;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[7];
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray4));
      
      floatArray6[0] = (float) 3700L;
      floatArray6[1] = (-1838.3267F);
      floatArray6[2] = 0.0F;
      floatArray6[3] = (float) 3700L;
      floatArray6[4] = (float) 3700L;
      floatArray6[5] = (-1838.3267F);
      floatArray6[6] = (-1838.3267F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[3];
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      
      floatArray7[0] = (float) 3700L;
      floatArray7[1] = (float) 3700L;
      floatArray7[2] = (float) 3700L;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray5));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray7));
      
      floatArray8[0] = (float) 3700L;
      floatArray8[1] = (float) 3700L;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[5];
      assertFalse(floatArray9.equals((Object)floatArray5));
      assertFalse(floatArray9.equals((Object)floatArray7));
      assertFalse(floatArray9.equals((Object)floatArray4));
      assertFalse(floatArray9.equals((Object)floatArray1));
      assertFalse(floatArray9.equals((Object)floatArray2));
      assertFalse(floatArray9.equals((Object)floatArray3));
      assertFalse(floatArray9.equals((Object)floatArray6));
      assertFalse(floatArray9.equals((Object)floatArray8));
      
      floatArray9[0] = 0.0F;
      floatArray9[1] = (-948.72F);
      floatArray9[2] = (-1838.3267F);
      floatArray9[3] = (float) 3700L;
      floatArray9[4] = (-1838.3267F);
      floatArray0[8] = floatArray9;
      Room room0 = new Room(floatArray0);
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isClockwise());
      assertEquals(9, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(930.8367F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(930.8367F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(9, floatArray0.length);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isClockwise());
      assertEquals(9, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(930.8367F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(930.8367F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(930.8367F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(9, room1.getPointCount());
      assertEquals(930.8367F, room1.getYCenter(), 0.01F);
      assertNull(room1.getName());
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      home0.addRoom(room1, 0);
      assertEquals(9, floatArray0.length);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isClockwise());
      assertEquals(9, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(930.8367F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(930.8367F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(930.8367F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(9, room1.getPointCount());
      assertEquals(930.8367F, room1.getYCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float float0 = 38.254166F;
      Label label0 = new Label((String) null, 38.254166F, 870.0F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertNull(label1.getText());
      assertEquals(38.254166F, label1.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotNull(label1);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      boolean boolean0 = linkedList0.add(label1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(870.0F, label0.getY(), 0.01F);
      assertNull(label0.getText());
      assertEquals(38.254166F, label0.getX(), 0.01F);
      assertNull(label1.getText());
      assertEquals(38.254166F, label1.getX(), 0.01F);
      assertEquals(870.0F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(boolean0);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      Class<Label> class0 = Label.class;
      List<Label> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(list0.contains(label1));
      assertFalse(list0.contains(label0));
      assertNotNull(list0);
      
      List<Selectable> list1 = Home.duplicate(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(list0.contains(label1));
      assertFalse(list0.contains(label0));
      assertNotNull(list1);
      
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list2 = Home.getLevelsSubList(list1);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(linkedList0.contains(label1));
      assertFalse(linkedList0.contains(label0));
      assertTrue(list0.contains(label1));
      assertFalse(list0.contains(label0));
      assertNotNull(list2);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf("8smq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Home.Property.8smq
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.addRoomsListener((CollectionListener<Room>) null);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setSelectedItems(linkedList0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Home home0 = new Home((-1969.1483F));
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1969.1483F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1969.1483F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1969.1483F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      List<Room> list1 = home1.getRooms();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1969.1483F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Selectable> list2 = Home.duplicate(list1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-1969.1483F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertNotNull(list2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      DimensionLine dimensionLine0 = null;
      // Undeclared exception!
      try { 
        home1.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setName((String) null);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list0 = Home.getWallsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      home0.setName((String) null);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Level> list0 = Home.getLevelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home();
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      HomePrint homePrint0 = home0.getPrint();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertNull(homePrint0);
      assertNotSame(home0, home1);
      
      home1.setPrint((HomePrint) null);
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotSame(home1, home0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Camera camera0 = home0.getTopCamera();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      boolean boolean0 = linkedList0.add(camera0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertTrue(linkedList0.contains(camera0));
      assertTrue(boolean0);
      
      Home home1 = new Home();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      
      home0.setStoredCameras(linkedList0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertTrue(linkedList0.contains(camera0));
      assertNotSame(home0, home1);
      
      Compass compass0 = home1.getCompass();
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(compass0);
      assertNotSame(home1, home0);
      
      Home home2 = home0.clone();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertNotNull(home2);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertFalse(home1.equals((Object)home0));
      assertNotNull(home1);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      // Undeclared exception!
      try { 
        home1.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.addSelectionListener((SelectionListener) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      Home home0 = new Home(list0);
      home0.setSelectedItems(list0);
      linkedList0.retainAll(list0);
      Compass compass0 = home0.getCompass();
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      home0.addLabel(label0);
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      home0.setFurnitureVisibleProperties(list1);
      linkedList0.add(compass0);
      assertTrue(compass0.isVisible());
      
      linkedList0.listIterator();
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 0.0F, 3700L, 3700L);
      home0.deleteDimensionLine(dimensionLine0);
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      Camera camera0 = home0.getTopCamera();
      Camera camera1 = camera0.clone();
      home0.setCamera(camera1);
      home0.isModified();
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
      
      home0.setCamera(camera1);
      assertTrue(list0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Home home0 = new Home();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty.values();
      Home home0 = new Home();
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      home0.setStoredCameras(linkedList0);
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.getCamera();
      Label label0 = new Label("'KpJq-q", 3700L, (-838.1117F));
      label0.clone();
      Label label1 = new Label("r}.e<<7f/f<~=,eOV", (-838.1117F), 0.0F);
      LinkedList<Label> linkedList1 = new LinkedList<Label>();
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      Class<HomePieceOfFurniture> class1 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      Class<HomePieceOfFurniture.SortableProperty> class2 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list2 = Home.getSubList((List<? extends Selectable>) list1, class2);
      home0.setFurnitureVisibleProperties(list2);
      LinkedList<Compass> linkedList2 = new LinkedList<Compass>();
      Compass compass0 = home0.getCompass();
      linkedList2.add(compass0);
      linkedList2.listIterator();
      Home home1 = home0.clone();
      home1.getSelectedItems();
      home0.getLevels();
      Home home2 = new Home(3700L);
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null, 2512);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      home0.addDimensionLine(dimensionLine0);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Home home0 = new Home();
      home0.deleteRoom((Room) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      
      home0.setBasePlanLocked(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Home home0 = new Home((-30.303226F));
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      Label label0 = new Label("", 3700L, (-30.303226F));
      home0.addLabel(label0);
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      home0.setFurnitureVisibleProperties(list0);
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      Compass compass0 = home0.getCompass();
      linkedList1.add(compass0);
      assertTrue(compass0.isVisible());
      
      linkedList1.listIterator();
      Home home1 = home0.clone();
      float float0 = home1.getWallHeight();
      assertEquals((-30.303226F), float0, 0.01F);
      assertFalse(home1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      home0.setFurnitureVisibleProperties(linkedList0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Home home0 = new Home();
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      
      home0.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      Home home0 = new Home(list0);
      home0.setSelectedItems(list0);
      home0.getCompass();
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      home0.addLabel(label0);
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.LANDSCAPE;
      Float float0 = new Float(2416.958F);
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, (-2504.153F), (-86.26833F), (-86.26833F), 3700L, 2416.958F, 0.0F, false, false, false, float0, "", ".Y'");
      home0.setPrint(homePrint0);
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      List<Level> list1 = Home.getLevelsSubList(linkedList0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Home home0 = null;
      try {
        home0 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Home home0 = new Home(0.0F);
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      home0.setModified(true);
      home0.setBasePlanLocked(true);
      home0.getTopCamera();
      boolean boolean0 = home0.isBasePlanLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Home home0 = new Home(131.07825F);
      home0.setModified(true);
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      Home home0 = new Home(list0);
      home0.setSelectedItems(list0);
      linkedList0.retainAll(list0);
      home0.getCompass();
      assertTrue(home0.isEmpty());
      
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      home0.addLabel(label0);
      Class<HomePieceOfFurniture.SortableProperty> class0 = HomePieceOfFurniture.SortableProperty.class;
      List<HomePieceOfFurniture.SortableProperty> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      home0.setFurnitureVisibleProperties(list1);
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      
      linkedList0.listIterator();
      Home home1 = home0.clone();
      home1.getSelectedItems();
      home1.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      home0.removeWallsListener((CollectionListener<Wall>) null);
      home1.getDimensionLines();
      home0.getTopCamera();
      Level level0 = new Level((String) null, (-825.6089F), 3700L, 3700L);
      home1.setSelectedLevel(level0);
      home1.setFurnitureVisibleProperties(list1);
      assertFalse(home1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Home home0 = new Home((-32.95111F));
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<Selectable> list0 = home0.getSelectedItems();
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (-32.95111F);
      floatArray1[1] = (-32.95111F);
      floatArray1[2] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      floatArray2[0] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (-32.95111F);
      floatArray3[2] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 0.0F;
      floatArray4[1] = (float) 3700L;
      floatArray0[3] = floatArray4;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home0.deleteRoom(room1);
      home0.addRoomsListener(collectionListener0);
      home0.clone();
      home0.addLevelsListener((CollectionListener<Level>) null);
      Home.getFurnitureSubList(list0);
      home0.setPrint((HomePrint) null);
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener1);
      assertEquals((-32.95111F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Home home0 = new Home((-32.95111F));
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      List<Selectable> list0 = home0.getSelectedItems();
      Camera camera0 = home0.getCamera();
      assertNotNull(camera0);
      
      float[][] floatArray0 = new float[4][1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray1;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home0.deleteRoom(room1);
      home0.addRoomsListener(collectionListener0);
      home0.clone();
      home0.addLevelsListener((CollectionListener<Level>) null);
      Home.getFurnitureSubList(list0);
      home0.setPrint((HomePrint) null);
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.getSelectedItems();
      home0.removeWallsListener(collectionListener1);
      home0.getVisualProperty("B   ");
      assertEquals((-32.95111F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      Home home0 = new Home(list0);
      home0.setSelectedItems(list0);
      linkedList0.retainAll(list0);
      home0.getCompass();
      Label label0 = new Label((String) null, 3700L, (-2504.153F));
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      CollectionListener<DimensionLine> collectionListener1 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener1);
      LinkedList<HomeFurnitureGroup> linkedList1 = new LinkedList<HomeFurnitureGroup>();
      Class<Room> class0 = Room.class;
      List<Room> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      Class<HomeLight> class1 = HomeLight.class;
      Home.getSubList((List<? extends Selectable>) linkedList1, class1);
      Home.getRoomsSubList(list0);
      CollectionListener<Level> collectionListener2 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener2);
      home0.setRecovered(true);
      Home.getFurnitureSubList(list1);
      boolean boolean0 = home0.isRecovered();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      
      float[][] floatArray0 = new float[7][4];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (float) 3700L;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = (float) 3700L;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = 500.0F;
      floatArray3[4] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 500.0F;
      floatArray5[1] = 1297.943F;
      floatArray5[2] = 500.0F;
      floatArray5[3] = 500.0F;
      floatArray5[4] = 500.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[8];
      floatArray6[0] = 1297.943F;
      floatArray6[1] = 500.0F;
      floatArray6[2] = (-6.38F);
      floatArray6[3] = 0.0F;
      floatArray6[4] = 1297.943F;
      floatArray6[5] = 500.0F;
      floatArray6[6] = 1.0995575F;
      floatArray6[7] = (float) 3700L;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (-6.38F);
      floatArray0[6] = floatArray7;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home0.addRoom(room1);
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 0.0F, 0.0F, 3700L);
      home0.isEmpty();
      home0.getBackgroundImage();
      assertFalse(home0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Home home0 = new Home();
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Home home0 = new Home();
      Level level0 = new Level((String) null, 3700L, 3700L, 3700L);
      home0.setSelectedLevel(level0);
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      home0.getPrint();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Home home0 = new Home();
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      Home.getLabelsSubList(list1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Home home0 = new Home(0.0F);
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      home0.setStoredCameras(linkedList0);
      long long0 = new Long(3700L);
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Home home0 = new Home(0.0F);
      float[][] floatArray0 = new float[6][6];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 2319.7205F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[0];
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      floatArray3[0] = 2319.7205F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 0.0F;
      floatArray4[1] = (float) 3700L;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = (float) 3700L;
      floatArray4[5] = 2702.866F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[1];
      floatArray5[0] = 2319.7205F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (float) 3700L;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 3700L;
      floatArray6[3] = (-390.308F);
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      Room room2 = room1.clone();
      home0.deleteRoom(room2);
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(5, list0.size());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }
}
