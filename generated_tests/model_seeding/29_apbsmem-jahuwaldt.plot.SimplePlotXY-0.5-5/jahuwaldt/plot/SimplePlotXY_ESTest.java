/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 13:03:20 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.PlotAxis;
import jahuwaldt.plot.PlotAxisScale;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotYAxis;
import jahuwaldt.plot.RTriangle4Symbol;
import jahuwaldt.plot.SimplePlotXY;
import jahuwaldt.plot.TabLSymbol;
import jahuwaldt.plot.Triangle2Symbol;
import jahuwaldt.plot.Triangle4Symbol;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Rectangle;
import java.text.NumberFormat;
import java.util.Locale;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JTextArea;
import javax.swing.JViewport;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplePlotXY_ESTest extends SimplePlotXY_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      double[] doubleArray0 = new double[0];
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      NumberFormat numberFormat1 = NumberFormat.getNumberInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "3'c4#>M3U]$M'9u\"", ">q(1>8_", "3'c4#>M3U]$M'9u\"", numberFormat1, numberFormat0, tabLSymbol0);
      assertEquals("3'c4#>M3U]$M'9u\"", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[1];
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "", "1 focus level", "1 focus level", (NumberFormat) null, (NumberFormat) null, rTriangle4Symbol0);
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxisScale plotAxisScale0 = mock(PlotAxisScale.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      PlotYAxis plotYAxis0 = new PlotYAxis("aClDW<wD#0AjZ>", plotAxisScale0, numberFormat0, 0);
      simplePlotXY0.setVerticalAxis(plotYAxis0);
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertEquals(1.7976931348623157E308, plotAxis0.getLowerBounds(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TabLSymbol tabLSymbol0 = new TabLSymbol();
      double[] doubleArray0 = new double[0];
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "3'c4#>M3U]$M'9u\"", ">q(1>8_", "3'c4#>M3U]$M'9u\"", numberFormat0, numberFormat0, tabLSymbol0);
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertEquals(2, plotAxis0.getGridStyle());
      assertEquals("3'c4#>M3U]$M'9u\"", simplePlotXY0.getTitle());
      assertEquals("3'c4#>M3U]$M'9u\"", plotAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, ")@\"Ay95P'", ")@\"Ay95P'", ")@\"Ay95P'", numberFormat0, numberFormat0);
      String string0 = simplePlotXY0.getTitle();
      assertEquals(")@\"Ay95P'", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setTitle("");
      String string0 = simplePlotXY0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setRuns((PlotRunList) null);
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertNull(plotRunList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "GfvN", "GfvN", "", numberFormat0, numberFormat0);
      simplePlotXY0.getRuns();
      assertEquals("GfvN", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Locale locale0 = Locale.UK;
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance(locale0);
      RTriangle4Symbol rTriangle4Symbol0 = new RTriangle4Symbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "pv\"dU|M|FUSoMbB,!)", "pv\"dU|M|FUSoMbB,!)", ")t01D?UH", numberFormat0, numberFormat0, rTriangle4Symbol0);
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertEquals(2, plotAxis0.getGridStyle());
      assertEquals("pv\"dU|M|FUSoMbB,!)", plotAxis0.getLabel());
      assertEquals("pv\"dU|M|FUSoMbB,!)", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      // Undeclared exception!
      try { 
        simplePlotXY0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NumberFormat numberFormat0 = NumberFormat.getNumberInstance();
      Triangle4Symbol triangle4Symbol0 = new Triangle4Symbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY((double[]) null, (double[]) null, "qtodv7^1Wfk,<Icxs", "qtodv7^1Wfk,<Icxs", "qtodv7^1Wfk,<Icxs", numberFormat0, numberFormat0, triangle4Symbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double[] doubleArray1 = new double[2];
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      Triangle2Symbol triangle2Symbol0 = new Triangle2Symbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "Inconsistant array sizes.", "http://mgrabe1.bio.pitt.edu/apbsmem/", "_+C)MP=D0/(Mce", numberFormat0, numberFormat0, triangle2Symbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, (String) null, (String) null, (String) null, (NumberFormat) null, (NumberFormat) null);
      Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
      doReturn((FontMetrics) null).when(graphics0).getFontMetrics();
      DebugGraphics debugGraphics0 = new DebugGraphics(graphics0);
      JInternalFrame jInternalFrame0 = new JInternalFrame("/jG*3rEPnF0XoXa", true, false);
      JInternalFrame.JDesktopIcon jInternalFrame_JDesktopIcon0 = jInternalFrame0.getDesktopIcon();
      JViewport jViewport0 = new JViewport();
      Rectangle rectangle0 = jViewport0.getViewRect();
      // Undeclared exception!
      try { 
        simplePlotXY0.draw(debugGraphics0, jInternalFrame_JDesktopIcon0, rectangle0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double[] doubleArray1 = new double[0];
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "jahuwaldt.plot.SimplePlotXY", "", "H", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxisScale plotAxisScale0 = mock(PlotAxisScale.class, new ViolatedAssumptionAnswer());
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      PlotYAxis plotYAxis0 = new PlotYAxis("aClDW<wD#0AjZ>", plotAxisScale0, numberFormat0, 0);
      simplePlotXY0.setHorizontalAxis(plotYAxis0);
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertEquals(0, PlotAxis.kNoGrid);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, (double[]) null, (String) null, (String) null, (String) null, (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, "1 focus leKvel", "", "", (NumberFormat) null, (NumberFormat) null);
      SimplePlotXY simplePlotXY1 = (SimplePlotXY)simplePlotXY0.clone();
      assertEquals("1 focus leKvel", simplePlotXY1.getTitle());
      assertNotSame(simplePlotXY1, simplePlotXY0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      String string0 = simplePlotXY0.getTitle();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          PlotRunList plotRunList0 = new PlotRunList();
          SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, "1 focus leKvel", "", "", (NumberFormat) null, (NumberFormat) null);
          JEditorPane jEditorPane0 = new JEditorPane();
          Rectangle rectangle0 = new Rectangle();
          Color color0 = jEditorPane0.getBackground();
          Font font0 = new Font("x[;9#:tje6Aa'g", 2470, 2516);
          FontMetrics fontMetrics0 = mock(FontMetrics.class, new ViolatedAssumptionAnswer());
          doReturn(25).when(fontMetrics0).getHeight();
          doReturn(5).when(fontMetrics0).getLeading();
          StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
          FontMetrics fontMetrics1 = styleContext0.getFontMetrics(font0);
          Graphics graphics0 = mock(Graphics.class, new ViolatedAssumptionAnswer());
          doReturn(color0, color0).when(graphics0).getColor();
          doReturn(font0, font0).when(graphics0).getFont();
          doReturn(fontMetrics0, fontMetrics1, fontMetrics1, fontMetrics1, fontMetrics1).when(graphics0).getFontMetrics();
          DebugGraphics debugGraphics0 = new DebugGraphics(graphics0);
          JTextArea jTextArea0 = new JTextArea(1894, 1894);
          // Undeclared exception!
          try { 
            simplePlotXY0.draw(debugGraphics0, jTextArea0, rectangle0);
            fail("Expecting exception: NullPointerException");
          
          } catch(NullPointerException e) {
             //
             // no message in exception (getMessage() returned null)
             //
             verifyException("jahuwaldt.plot.PlotYAxis", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
