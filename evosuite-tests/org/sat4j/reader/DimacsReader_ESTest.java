/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:26:29 GMT 2019
 */

package org.sat4j.reader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PrintWriter;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.LightFactory;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.reader.DimacsReader;
import org.sat4j.reader.EfficientScanner;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DimacsReader_ESTest extends DimacsReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsOutputSolver0, "KrwG_pd_TIxU");
      int[] intArray0 = new int[3];
      intArray0[0] = (-3671);
      BasicLauncher<DimacsStringSolver> basicLauncher0 = new BasicLauncher<DimacsStringSolver>((ASolverFactory<DimacsStringSolver>) null);
      PrintWriter printWriter0 = basicLauncher0.getLogWriter();
      dimacsReader0.decode(intArray0, printWriter0);
      assertArrayEquals(new int[] {(-3671), 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      int[] intArray0 = new int[1];
      intArray0[0] = (-2238);
      String string0 = dimacsReader0.decode(intArray0);
      assertEquals("-2238 0", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      dimacsReader0.expectedNbOfConstr = (-1262);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'q');
      dimacsReader0.scanner = efficientScanner0;
      try { 
        dimacsReader0.readConstrs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorwrong nbclauses parameter. Found 0, -1262 expected
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "~Mm");
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'q');
      dimacsReader0.scanner = efficientScanner0;
      dimacsReader0.skipComments();
      assertFalse(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0);
      dimacsReader0.flushConstraint();
      assertFalse(dimacsReader0.hasAMapping());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "#");
      ISolver iSolver0 = dimacsReader0.getSolver();
      assertNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        dimacsReader0.skipComments();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'x');
      dimacsReader0.scanner = efficientScanner0;
      try { 
        dimacsReader0.readProblemLine();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.readProblemLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.readConstrs();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'x');
      efficientScanner0.close();
      dimacsReader0.scanner = efficientScanner0;
      try { 
        dimacsReader0.readConstrs();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3439), 4);
      // Undeclared exception!
      try { 
        dimacsReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.handleLine();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      EfficientScanner efficientScanner0 = new EfficientScanner(pipedInputStream0);
      dimacsReader0.scanner = efficientScanner0;
      try { 
        dimacsReader0.handleLine();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      DimacsReader dimacsReader0 = new DimacsReader(iSolver0);
      try { 
        dimacsReader0.flushConstraint();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.flushConstraint();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      // Undeclared exception!
      try { 
        dimacsReader0.decode((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null, "~Mm");
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        dimacsReader0.decode(intArray0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'x');
      dimacsReader0.scanner = efficientScanner0;
      boolean boolean0 = dimacsReader0.handleLine();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      dimacsReader0.expectedNbOfConstr = 20;
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'x');
      dimacsReader0.scanner = efficientScanner0;
      try { 
        dimacsReader0.readConstrs();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorwrong nbclauses parameter. Found 0, 20 expected
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      EfficientScanner efficientScanner0 = new EfficientScanner(sequenceInputStream0, 'x');
      dimacsReader0.scanner = efficientScanner0;
      dimacsReader0.readConstrs();
      assertFalse(dimacsReader0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DimacsStringSolver[] dimacsStringSolverArray0 = new DimacsStringSolver[9];
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(560);
      dimacsStringSolverArray0[0] = dimacsStringSolver0;
      dimacsStringSolverArray0[1] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[2] = dimacsStringSolver0;
      dimacsStringSolverArray0[3] = dimacsStringSolver0;
      dimacsStringSolverArray0[4] = dimacsStringSolver0;
      dimacsStringSolverArray0[5] = dimacsStringSolver0;
      dimacsStringSolverArray0[6] = dimacsStringSolver0;
      dimacsStringSolverArray0[7] = dimacsStringSolverArray0[0];
      dimacsStringSolverArray0[8] = dimacsStringSolver0;
      ManyCore<DimacsStringSolver> manyCore0 = new ManyCore<DimacsStringSolver>(dimacsStringSolverArray0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(manyCore0, iVecInt0, solutionFoundListener0);
      DimacsReader dimacsReader0 = new DimacsReader(abstractMinimalModel0, "Ol");
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte)11;
      byteArray0[8] = (byte)11;
      byteArray0[5] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        dimacsReader0.parseInstance((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Parsing Errorproblem line expected (p cnf ...)
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      LexicoDecorator<DimacsStringSolver> lexicoDecorator0 = new LexicoDecorator<DimacsStringSolver>(dimacsStringSolver0);
      ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<LexicoDecorator<DimacsStringSolver>>(lexicoDecorator0);
      DimacsReader dimacsReader0 = new DimacsReader(clausalCardinalitiesDecorator0);
      ISolver iSolver0 = dimacsReader0.getSolver();
      assertNotNull(iSolver0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      DimacsReader dimacsReader0 = new DimacsReader(dimacsStringSolver0);
      try { 
        dimacsReader0.parseInstance((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.sat4j.reader.DimacsReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DimacsReader dimacsReader0 = new DimacsReader((ISolver) null);
      dimacsReader0.disableNumberOfConstraintCheck();
      assertFalse(dimacsReader0.isUsingMapping());
  }
}
