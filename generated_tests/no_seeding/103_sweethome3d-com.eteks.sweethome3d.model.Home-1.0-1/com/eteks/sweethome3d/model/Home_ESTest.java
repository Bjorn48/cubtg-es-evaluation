/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 14:06:39 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.Wall;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Home home0 = new Home();
      Wall wall0 = new Wall(1052.1F, (-300.7294F), (-345.347F), (-300.7294F), 3700L, 3700L);
      Wall wall1 = wall0.clone();
      home0.addWall(wall0);
      home0.deleteWall(wall1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Home home0 = new Home(2532.392F);
      float[][] floatArray0 = new float[3][0];
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0, 0);
      assertEquals(2532.392F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Home home0 = new Home();
      Label label0 = new Label((String) null, 3700L, 3700L);
      home0.deleteLabel(label0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(true);
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Home home0 = new Home(48.016666F);
      home0.setFurnitureDescendingSorted(true);
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Home home0 = new Home();
      home0.setBasePlanLocked(true);
      boolean boolean0 = home0.isBasePlanLocked();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Home home0 = new Home(0.0F);
      float float0 = home0.getWallHeight();
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      Home home0 = new Home(linkedList0);
      float float0 = home0.getWallHeight();
      assertEquals(250.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Home home0 = new Home(2.1166668F);
      Collection<Label> collection0 = home0.getLabels();
      home0.setVisualProperty((String) null, collection0);
      home0.getVisualProperty((String) null);
      assertEquals(2.1166668F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Home home0 = new Home();
      home0.setName("Q8PboZum1>2kO~)|p0");
      String string0 = home0.getName();
      assertNotNull(string0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      List<Level> list0 = Home.getLevelsSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Home home0 = new Home();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      List<DimensionLine> list1 = Home.getDimensionLinesSubList(list0);
      assertEquals(0, list1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Home home0 = new Home();
      Camera camera0 = new Camera(728.589F, 3769.5398F, 3700L, (-823.115F), 3769.5398F, 3769.5398F);
      home0.setCamera(camera0);
      Camera camera1 = home0.getCamera();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700.0F, camera1.getZ(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Home home0 = new Home((-797.0F));
      home0.setRecovered(true);
      home0.clone();
      assertTrue(home0.isRecovered());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Home home0 = new Home((-1729.45F));
      home0.setFurnitureDescendingSorted(true);
      home0.clone();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Home home0 = new Home(1721.7084F);
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      linkedList0.add((HomeDoorOrWindow) null);
      // Undeclared exception!
      try { 
        Home.duplicate(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }
}
