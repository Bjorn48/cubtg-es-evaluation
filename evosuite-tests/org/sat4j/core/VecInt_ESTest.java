/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:31:38 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VecInt_ESTest extends VecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      
      vecInt0.insertFirst((-626));
      vecInt0.clear();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, (-20), comparator0);
      VecInt vecInt1 = new VecInt(0);
      // Undeclared exception!
      try { 
        vecInt1.set(0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      int int1 = 0;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(0, 0, comparator0);
      EmptyVecInt emptyVecInt0 = (EmptyVecInt)VecInt.EMPTY;
      vecInt0.equals(emptyVecInt0);
      vecInt0.shrinkTo(0);
      int int2 = 5;
      vecInt0.push(2710);
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1157), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2216, 2216);
      vecInt0.isEmpty();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-34), (-34));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = 43;
      intArray0[2] = (-3153);
      intArray0[3] = 3651;
      int int0 = 2484;
      intArray0[4] = 2484;
      intArray0[5] = 1067;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.push(2327);
      VecInt vecInt1 = new VecInt();
      vecInt1.moveTo(intArray0);
      vecInt1.pop();
      // Undeclared exception!
      try { 
        vecInt1.clone();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      vecInt0.pop();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      VecInt vecInt0 = new VecInt(208);
      int[] intArray0 = new int[4];
      intArray0[0] = 208;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1780), (-1780), comparator0);
      intArray0[1] = 208;
      intArray0[2] = 208;
      vecInt0.sortUnique();
      vecInt0.unsafePush(1718);
      intArray0[3] = 208;
      int[] intArray1 = new int[4];
      intArray1[0] = 1083;
      intArray1[1] = 0;
      intArray1[2] = (-598);
      intArray1[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray1);
      vecInt1.ensure(0);
      IVecInt iVecInt0 = vecInt1.clone();
      iVecInt0.iterator();
      iVecInt0.iterator();
      vecInt1.copyTo(iVecInt0);
      vecInt0.copyTo(iVecInt0);
      vecInt0.moveTo(intArray0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator1);
      vecInt0.toArray();
      vecInt0.sort();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      vecInt0.toString();
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      VecInt vecInt1 = new VecInt();
      // Undeclared exception!
      try { 
        vecInt1.delete(1251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1251
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 1;
      intArray0[1] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.iterator();
      vecInt0.shrinkTo((-1107));
      IVecInt iVecInt0 = vecInt0.pop();
      vecInt0.moveTo2(iVecInt0);
      // Undeclared exception!
      try { 
        vecInt0.delete(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 2);
      vecInt0.insertFirst(0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(15, 0);
      vecInt0.sortUnique();
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4168, 4168);
      int[] intArray0 = new int[4];
      intArray0[0] = 1083;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt1.ensure(0);
      IVecInt iVecInt0 = vecInt1.clone();
      iVecInt0.iterator();
      vecInt0.shrink(0);
      iVecInt0.iterator();
      vecInt0.pushAll(iVecInt0);
      vecInt0.selectionSort((-2846), (-2846));
      vecInt1.shrink(1917);
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1284);
      vecInt0.iterator();
      int int0 = (-574);
      Comparator<Integer> comparator0 = null;
      // Undeclared exception!
      try { 
        vecInt0.sort((-574), 2194, (Comparator<Integer>) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -574
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(2);
      // Undeclared exception!
      try { 
        vecInt0.remove(2);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2703;
      intArray0[2] = (-2554);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.delete((-2554));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2554
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1993, 1993);
      vecInt0.shrink(0);
      vecInt0.growTo(0, 0);
      vecInt0.push(0);
      vecInt0.shrinkTo((-63));
      // Undeclared exception!
      try { 
        vecInt0.moveTo2((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, (-3758));
      assertEquals(50, vecInt0.size());
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(898, 1262, 1260, 898, 898).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(50, (-1), comparator1);
      assertEquals(50, vecInt0.size());
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sort(comparator0);
      assertEquals(50, vecInt0.size());
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(50, vecInt0.size());
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, iVecInt0.size());
      assertEquals((-3758), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int0 = vecInt0.delete(5);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(49, vecInt0.size());
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals((-3758), int0);
      
      IVecInt iVecInt1 = vecInt0.push((-1));
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(50, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(50, iVecInt1.size());
      assertEquals((-1), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      iVecInt0.insertFirst(0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, iVecInt1);
      assertEquals(50, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(51, iVecInt0.size());
      assertEquals((-3758), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)iVecInt1));
      
      vecInt0.sort(50, 0);
      iVecInt1.unsafeGet(0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(1251, 1251);
      VecInt vecInt2 = new VecInt();
      vecInt1.sortUnique();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1671;
      intArray0[2] = (-133);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.last();
      int[] intArray1 = new int[4];
      intArray1[0] = 1083;
      intArray1[1] = 0;
      intArray1[2] = (-598);
      intArray1[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray1);
      vecInt1.ensure(0);
      IVecInt iVecInt0 = vecInt1.clone();
      iVecInt0.iterator();
      iVecInt0.iterator();
      vecInt1.copyTo(iVecInt0);
      vecInt0.pushAll(iVecInt0);
      vecInt0.shrink(1083);
      vecInt1.isSubsetOf(vecInt0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4168, 4168);
      assertEquals(4168, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4168, vecInt0.last());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1083;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.shrink(0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(4168, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4168, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      vecInt0.pushAll(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4176, vecInt0.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      vecInt0.selectionSort((-2846), (-2846));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4176, vecInt0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      vecInt1.shrink(1917);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1913), vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(2);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.equals(iVecInt0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertTrue(boolean0);
      
      boolean boolean1 = iVecInt0.isEmpty();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset((-802));
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(iteratorInt0);
      
      vecInt0.shrinkTo((-802));
      assertEquals((-802), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertEquals((-802), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int0 = vecInt0.size();
      assertEquals((-802), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-802), int0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertEquals((-802), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(boolean0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      vecInt1.clear();
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      
      IVecInt iVecInt0 = vecInt1.push(2530);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt2);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(2530, vecInt1.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2530, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt2.pop();
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, vecInt2);
      assertEquals((-1), vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1), iVecInt1.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecInt1);
      
      IVecInt iVecInt2 = vecInt1.push(2530);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt2);
      assertNotSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, vecInt2);
      assertNotSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(2530, vecInt1.last());
      assertEquals(2530, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(2, iVecInt2.size());
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt2));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertNotNull(iVecInt2);
      
      VecInt vecInt3 = new VecInt();
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      assertFalse(vecInt3.equals((Object)iVecInt1));
      assertFalse(vecInt3.equals((Object)iVecInt2));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertNotNull(vecInt3);
      
      VecInt vecInt4 = new VecInt();
      assertTrue(vecInt4.isEmpty());
      assertEquals(0, vecInt4.size());
      assertFalse(vecInt4.equals((Object)iVecInt0));
      assertFalse(vecInt4.equals((Object)iVecInt1));
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertFalse(vecInt4.equals((Object)iVecInt2));
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(vecInt4.equals((Object)vecInt2));
      assertNotNull(vecInt4);
      
      int int1 = vecInt1.size();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt3);
      assertNotSame(vecInt1, vecInt4);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt2);
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals(2530, vecInt1.last());
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)vecInt3));
      assertFalse(vecInt1.equals((Object)vecInt4));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      
      int int2 = vecInt3.size();
      assertNotSame(vecInt3, iVecInt1);
      assertNotSame(vecInt3, iVecInt2);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, iVecInt0);
      assertNotSame(vecInt3, vecInt4);
      assertNotSame(vecInt3, vecInt0);
      assertNotSame(vecInt3, vecInt1);
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(vecInt3.equals((Object)vecInt4));
      assertFalse(vecInt3.equals((Object)iVecInt1));
      assertFalse(vecInt3.equals((Object)iVecInt2));
      assertFalse(vecInt3.equals((Object)vecInt2));
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertEquals(0, int2);
      
      int int3 = 573;
      // Undeclared exception!
      try { 
        vecInt2.set(573, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-93), 1, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = 15;
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(15);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int int1 = 1;
      IVecInt iVecInt0 = vecInt0.push((-3207));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-3207), vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals((-3207), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set(1, (-3207));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      IVecInt iVecInt0 = vecInt0.push(26);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(26, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(26, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertNotNull(iVecInt1);
      
      IVecInt iVecInt2 = vecInt0.push(10);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt2, iVecInt0);
      assertSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, iVecInt2.size());
      assertEquals(10, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertNotNull(iVecInt2);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertNotNull(iteratorInt0);
      
      vecInt0.copyTo(intArray0);
      assertArrayEquals(new int[] {10}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertEquals(1, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1813, 1800);
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1813, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 1813;
      intArray0[1] = 1800;
      intArray0[2] = (-2250);
      intArray0[3] = (-2250);
      intArray0[4] = 1800;
      intArray0[5] = (-2250);
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1813, 1800, (-2250), (-2250), 1800, (-2250)}, intArray0);
      assertEquals(6, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-2250), vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(6, intArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotSame(vecInt0, vecInt1);
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(iteratorInt0);
      
      VecInt vecInt2 = new VecInt();
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      
      int int0 = vecInt2.size();
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertEquals(0, int0);
      
      IVecInt iVecInt0 = vecInt2.push(0);
      assertNotSame(vecInt2, vecInt1);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, vecInt2);
      assertEquals(0, vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt2.subset(1800);
      assertNotSame(vecInt2, vecInt1);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(0, vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      vecInt2.shrink(2032);
      assertNotSame(vecInt2, vecInt1);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt0);
      assertEquals((-2031), vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, vecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1813, vecInt0.size());
      assertEquals(1800, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1813, iVecInt1.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt2));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      IVecInt iVecInt2 = vecInt1.push(1800);
      assertArrayEquals(new int[] {1813, 1800, (-2250), (-2250), 1800, (-2250)}, intArray0);
      assertNotSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, vecInt2);
      assertNotSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, vecInt1);
      assertSame(vecInt1, iVecInt2);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt2);
      assertEquals(1800, iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(7, iVecInt2.size());
      assertEquals(7, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1800, vecInt1.last());
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt2));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertNotNull(iVecInt2);
      assertEquals(6, intArray0.length);
      
      IVecInt iVecInt3 = vecInt0.pop();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, vecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, vecInt0);
      assertNotSame(iVecInt3, iVecInt0);
      assertNotSame(iVecInt3, vecInt1);
      assertNotSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, vecInt2);
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1812, vecInt0.size());
      assertFalse(iVecInt3.isEmpty());
      assertEquals(1812, iVecInt3.size());
      assertEquals(1800, iVecInt3.last());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt2));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt3.equals((Object)iVecInt2));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)vecInt1));
      assertFalse(iVecInt3.equals((Object)iVecInt1));
      assertFalse(iVecInt3.equals((Object)vecInt2));
      assertNotNull(iVecInt3);
      
      // Undeclared exception!
      try { 
        vecInt2.push(1813);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2031
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1671;
      intArray0[2] = (-133);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      int int0 = vecInt0.last();
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1083;
      intArray1[1] = 0;
      intArray1[2] = (-598);
      intArray1[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray1);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray1.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray1.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray1.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray1.length);
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray1.length);
      
      vecInt1.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray1.length);
      
      vecInt0.pushAll(iVecInt0);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(12, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      vecInt0.shrink(1083);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals((-1071), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 541
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      int int0 = (-1137);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1137), (-1137));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 15;
      VecInt vecInt0 = new VecInt(15, 0);
      assertEquals(15, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.shrink(0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.sort();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1083;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt1 = iVecInt0.push(1083);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, iVecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1083, iVecInt0.last());
      assertEquals(5, iVecInt0.size());
      assertEquals(5, iVecInt1.size());
      assertEquals(1083, iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecInt1);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        vecInt1.set((-598), 1083);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3815, 1251);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3815, vecInt0.size());
      assertEquals(1251, vecInt0.last());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.contains(1251);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3815, vecInt0.size());
      assertEquals(1251, vecInt0.last());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = (-2334);
      intArray0[3] = 201;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1, 0, (-2334), 201}, intArray0);
      assertEquals(201, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(201);
      assertArrayEquals(new int[] {1, 0, (-2334), 201}, intArray0);
      assertEquals(201, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iVecIntArray0);
      assertEquals(4, intArray0.length);
      assertEquals(0, iVecIntArray0.length);
      
      vecInt0.insertFirst((-2334));
      assertArrayEquals(new int[] {1, 0, (-2334), 201}, intArray0);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(836, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.growTo((-1), 529);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 2041;
      intArray0[0] = 2041;
      intArray0[1] = (-1780);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {2041, (-1780)}, intArray0);
      assertEquals((-1780), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(2, intArray0.length);
      
      vecInt0.shrinkTo(0);
      assertArrayEquals(new int[] {2041, (-1780)}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(2041);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2041
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      int int0 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, int0);
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      assertEquals(0, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt1.contains(744);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      vecInt0.sortUnique();
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.growTo(0, 1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.pushAll((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1813, 1800);
      assertEquals(1800, vecInt0.last());
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      String string0 = vecInt0.toString();
      assertEquals(1800, vecInt0.last());
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(string0);
      
      int int0 = vecInt0.containsAt(1807, 1800);
      assertEquals(1800, vecInt0.last());
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      vecInt0.sort(comparator0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1307);
      intArray0[3] = (-2260);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.sortUnique();
      assertArrayEquals(new int[] {(-2260), (-1307), 0, 1}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 3024;
      VecInt vecInt0 = new VecInt(3024, 3024);
      assertEquals(3024, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3024, vecInt0.last());
      assertNotNull(vecInt0);
      
      String string0 = vecInt0.toString();
      assertEquals(3024, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3024, vecInt0.last());
      assertNotNull(string0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(3024, 3024, comparator0);
      assertEquals(3024, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3024, vecInt0.last());
      
      int int1 = (-3932);
      int int2 = (-38);
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      // Undeclared exception!
      try { 
        vecInt1.unsafeGet(161);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 161
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, readOnlyVecInt0.size());
      assertTrue(readOnlyVecInt0.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(readOnlyVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt1.copyTo((IVecInt) readOnlyVecInt0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ReadOnlyVecInt cannot be cast to org.sat4j.core.VecInt
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1671;
      intArray0[2] = (-133);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int int0 = 1325;
      int int1 = 1250;
      VecInt vecInt0 = new VecInt(1325, 1250);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1325, vecInt0.size());
      assertEquals(1250, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      // Undeclared exception!
      try { 
        vecInt1.remove(1325);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      VecInt vecInt0 = new VecInt(764, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(764, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(765, vecInt0.size());
      assertEquals(1, vecInt0.last());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1804;
      VecInt vecInt0 = new VecInt(1804, 1800);
      assertEquals(1804, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1805, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), vecInt0.last());
      assertEquals(1805, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.last());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.push((-8));
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertEquals(1806, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-8), vecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-8), iVecInt1.last());
      assertEquals(1806, iVecInt1.size());
      assertNotNull(iVecInt1);
      
      VecInt vecInt1 = null;
      // Undeclared exception!
      try { 
        vecInt0.isSubsetOf((VecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      VecInt vecInt2 = new VecInt();
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      
      VecInt vecInt3 = new VecInt();
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertNotNull(vecInt3);
      
      VecInt vecInt4 = new VecInt();
      assertEquals(0, vecInt4.size());
      assertTrue(vecInt4.isEmpty());
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt1));
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertNotNull(vecInt4);
      
      VecInt vecInt5 = new VecInt();
      assertEquals(0, vecInt5.size());
      assertTrue(vecInt5.isEmpty());
      assertTrue(vecInt5.equals((Object)vecInt2));
      assertTrue(vecInt5.equals((Object)vecInt0));
      assertTrue(vecInt5.equals((Object)vecInt4));
      assertTrue(vecInt5.equals((Object)vecInt1));
      assertTrue(vecInt5.equals((Object)vecInt3));
      assertNotNull(vecInt5);
      
      VecInt vecInt6 = new VecInt();
      assertTrue(vecInt6.isEmpty());
      assertEquals(0, vecInt6.size());
      assertTrue(vecInt6.equals((Object)vecInt1));
      assertTrue(vecInt6.equals((Object)vecInt4));
      assertTrue(vecInt6.equals((Object)vecInt3));
      assertTrue(vecInt6.equals((Object)vecInt2));
      assertTrue(vecInt6.equals((Object)vecInt5));
      assertTrue(vecInt6.equals((Object)vecInt0));
      assertNotNull(vecInt6);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt6);
      assertNotSame(vecInt0, vecInt4);
      assertNotSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, vecInt5);
      assertNotSame(vecInt0, vecInt6);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt6, vecInt2);
      assertNotSame(vecInt6, vecInt4);
      assertNotSame(vecInt6, vecInt0);
      assertNotSame(vecInt6, vecInt1);
      assertNotSame(vecInt6, vecInt3);
      assertNotSame(vecInt6, vecInt5);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt6.isEmpty());
      assertEquals(0, vecInt6.size());
      assertTrue(vecInt0.equals((Object)vecInt6));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt0.equals((Object)vecInt4));
      assertTrue(vecInt0.equals((Object)vecInt2));
      assertTrue(vecInt0.equals((Object)vecInt3));
      assertTrue(vecInt0.equals((Object)vecInt5));
      assertTrue(vecInt6.equals((Object)vecInt1));
      assertTrue(vecInt6.equals((Object)vecInt4));
      assertTrue(vecInt6.equals((Object)vecInt3));
      assertTrue(vecInt6.equals((Object)vecInt2));
      assertTrue(vecInt6.equals((Object)vecInt5));
      assertTrue(vecInt6.equals((Object)vecInt0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(2324);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2324
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = (-1040);
      int[] intArray0 = new int[6];
      intArray0[0] = (-1040);
      intArray0[1] = (-1040);
      intArray0[2] = (-1040);
      intArray0[3] = (-1040);
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      intArray0[4] = (-1040);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      VecInt vecInt1 = new VecInt(2621, 3165);
      assertEquals(3165, vecInt1.last());
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2620, vecInt1.size());
      assertEquals(3165, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2620, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int1 = iVecInt0.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2620, vecInt1.size());
      assertEquals(3165, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2620, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(int1 == int0);
      assertEquals(2620, int1);
      
      int int2 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2620, int2);
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(0, (-1989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1989
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3526, 3526);
      assertEquals(3526, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3526, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = (-358);
      intArray0[1] = 3526;
      intArray0[2] = 3526;
      intArray0[3] = 3526;
      intArray0[4] = 3526;
      intArray0[5] = 3526;
      intArray0[6] = 3526;
      intArray0[7] = 3526;
      intArray0[8] = 3526;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-358), 3526, 3526, 3526, 3526, 3526, 3526, 3526, 3526}, intArray0);
      assertEquals(3526, vecInt1.last());
      assertEquals(9, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(9, intArray0.length);
      
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt1);
      assertArrayEquals(new int[] {(-358), 3526, 3526, 3526, 3526, 3526, 3526, 3526, 3526}, intArray0);
      assertEquals(3526, vecInt1.last());
      assertEquals(9, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(9, readOnlyVecInt0.size());
      assertFalse(readOnlyVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(readOnlyVecInt0);
      assertEquals(9, intArray0.length);
      
      boolean boolean0 = vecInt1.equals(vecInt0);
      assertArrayEquals(new int[] {(-358), 3526, 3526, 3526, 3526, 3526, 3526, 3526, 3526}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(3526, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3526, vecInt0.size());
      assertEquals(3526, vecInt1.last());
      assertEquals(9, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      assertEquals(9, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt1.sort((Comparator<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 2216;
      int int1 = 2769;
      VecInt vecInt0 = new VecInt(2216, 2769);
      assertEquals(2216, vecInt0.size());
      assertEquals(2769, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int2 = 9;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(9, 2216, comparator0);
      int[] intArray0 = new int[6];
      intArray0[0] = int0;
      intArray0[1] = int1;
      intArray0[2] = int0;
      intArray0[3] = int2;
      intArray0[4] = int2;
      int int3 = 1346;
      intArray0[5] = int3;
      vecInt0.moveTo(intArray0);
      VecInt vecInt1 = new VecInt();
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt1.sort(comparator1);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      int int0 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, int0);
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt1.contains(744);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      int int1 = vecInt0.containsAt(5, 744);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(int1 == int0);
      assertEquals((-1), int1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, (-3758));
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.set(1, 1260);
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1515, 1515);
      assertEquals(1515, vecInt0.size());
      assertEquals(1515, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = 0;
      VecInt vecInt1 = new VecInt(2621, 3165);
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3165, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int1 = iVecInt0.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3165, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(int1 == int0);
      assertEquals(2620, int1);
      
      int int2 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2620, int2);
      
      IteratorInt iteratorInt0 = vecInt1.iterator();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      
      vecInt0.pushAll(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(4135, vecInt0.size());
      assertEquals(3165, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(0, (-1989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1989
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 7;
      VecInt vecInt0 = new VecInt(50, 7);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(50, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(50, 3745, (-2185), 3799, (-2185)).when(comparator0).compare(anyInt() , anyInt());
      int int1 = (-1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(50, (-1), comparator1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(50, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.sort(comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-3613);
      intArray0[1] = (-1821);
      intArray0[2] = 2;
      intArray0[3] = 2101;
      intArray0[4] = (-1876);
      intArray0[5] = (-2575);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-3613), (-1821), 2, 2101, (-1876), (-2575)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.size());
      assertEquals((-2575), vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(6, intArray0.length);
      
      vecInt0.clear();
      assertArrayEquals(new int[] {(-3613), (-1821), 2, 2101, (-1876), (-2575)}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      
      vecInt0.ensure(2101);
      assertArrayEquals(new int[] {(-3613), (-1821), 2, 2101, (-1876), (-2575)}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      
      VecInt vecInt1 = new VecInt(2621, 3165);
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(3165, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2620, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int0 = iVecInt0.size();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(3165, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2620, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(2620, int0);
      
      int int1 = vecInt1.size();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(int1 == int0);
      assertEquals(2620, int1);
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(0, (-1989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1989
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(boolean0);
      
      vecInt0.insertFirst(2496);
      assertEquals(1, vecInt0.size());
      assertEquals(2496, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        vecInt0.containsAt(1431, (-2342));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2341
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, 7);
      assertEquals(50, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      int int0 = (-1);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(50, (-1), comparator1);
      assertEquals(50, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      
      vecInt0.sort(comparator0);
      assertEquals(50, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(50, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(50, iVecInt0.size());
      assertEquals(7, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int1 = vecInt0.delete(5);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(49, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(int1 == int0);
      assertEquals(7, int1);
      
      vecInt0.shrinkTo(7);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(7, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      vecInt0.clear();
      assertNotSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      // Undeclared exception!
      try { 
        vecInt0.remove(2302);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-56);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.moveTo(0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      
      vecInt0.unsafePush(1);
      assertArrayEquals(new int[] {1, 0, (-56), 0}, intArray0);
      assertEquals(1, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      
      vecInt0.unsafePush(1006);
      assertArrayEquals(new int[] {1, 1006, (-56), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1006, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(4, intArray0.length);
      
      vecInt0.hashCode();
      assertArrayEquals(new int[] {1, 1006, (-56), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1006, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1305);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.equals("|pY'J?pK- 1");
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf((VecInt) null);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1307);
      intArray0[3] = (-2260);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.shrink(0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertEquals((-2260), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt1 = vecInt0.push((-1307));
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(5, vecInt0.size());
      assertEquals((-1307), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1307), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, iVecInt1);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(4, iVecInt2.size());
      assertEquals((-2260), iVecInt2.last());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt3 = vecInt0.push(15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt3);
      assertSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertEquals(5, iVecInt3.size());
      assertEquals(15, iVecInt3.last());
      assertFalse(iVecInt3.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertNotNull(iVecInt3);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt3);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      vecInt0.set(0, 15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt3);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt4 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(iVecInt4, iVecInt2);
      assertNotSame(iVecInt4, iVecInt0);
      assertNotSame(iVecInt4, iVecInt3);
      assertNotSame(iVecInt4, iVecInt1);
      assertNotSame(iVecInt4, vecInt0);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertEquals(5, iVecInt4.size());
      assertEquals(15, iVecInt4.last());
      assertFalse(iVecInt4.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt4.equals((Object)vecInt0));
      assertTrue(iVecInt4.equals((Object)iVecInt1));
      assertFalse(iVecInt4.equals((Object)iVecInt0));
      assertTrue(iVecInt4.equals((Object)iVecInt3));
      assertTrue(iVecInt4.equals((Object)iVecInt2));
      assertNotNull(iVecInt4);
      assertEquals(4, intArray0.length);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt3);
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)iVecInt4));
      assertNotNull(iVecIntArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, iVecIntArray0.length);
      
      iVecInt3.sortUnique();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt3);
      assertSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, vecInt0);
      assertNotSame(iVecInt3, iVecInt4);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertEquals(15, iVecInt3.last());
      assertEquals(4, iVecInt3.size());
      assertFalse(iVecInt3.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)iVecInt4));
      assertFalse(iVecInt3.equals((Object)iVecInt4));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        iVecInt3.delete((-2699));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2699
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 5;
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {5}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(1, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals((-1), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals((-1), iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1, iVecInt1.size());
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      vecInt0.clear();
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      
      vecInt0.shrinkTo(0);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      
      vecInt0.pushAll(iVecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertEquals((-1), iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1, iVecInt1.size());
      assertTrue(vecInt0.equals((Object)iVecInt1));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      
      int[] intArray1 = new int[7];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = (-1);
      intArray1[1] = (-1);
      intArray1[2] = 0;
      intArray1[3] = (-1);
      intArray1[4] = (-1);
      intArray1[5] = (-1);
      intArray1[6] = 5;
      vecInt0.moveTo(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1), (-1), 5}, intArray1);
      assertNotSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(intArray1, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      
      IVecInt iVecInt2 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, vecInt0);
      assertNotSame(iVecInt2, iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(iVecInt2.isEmpty());
      assertEquals(0, iVecInt2.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt1));
      assertTrue(iVecInt2.equals((Object)iVecInt0));
      assertTrue(iVecInt2.equals((Object)vecInt0));
      assertNotNull(iVecInt2);
      
      vecInt0.moveTo(intArray1);
      assertArrayEquals(new int[] {(-1), (-1), 0, (-1), (-1), (-1), 5}, intArray1);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(intArray1, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertTrue(vecInt0.equals((Object)iVecInt2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(7, intArray1.length);
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1416;
      intArray0[1] = (-1977);
      intArray0[2] = (-227);
      intArray0[3] = 98;
      intArray0[4] = 460;
      intArray0[5] = 0;
      intArray0[6] = (-2598);
      intArray0[7] = (-2729);
      intArray0[8] = 286;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1416, (-1977), (-227), 98, 460, 0, (-2598), (-2729), 286}, intArray0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(286, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(9, intArray0.length);
      
      vecInt0.selectionSort(2249, 0);
      assertArrayEquals(new int[] {1416, (-1977), (-227), 98, 460, 0, (-2598), (-2729), 286}, intArray0);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(286, vecInt0.last());
      assertEquals(9, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1358);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[4];
      String string0 = vecInt0.toString();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(1358, 1, comparator0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      intArray0[0] = 1083;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      int int0 = 1917;
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      String string1 = vecInt1.toString();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("1083,0,-598,1917", string1);
      assertEquals(4, intArray0.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      vecInt0.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.hashCode();
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertEquals(4, intArray0.length);
      
      int int0 = new Integer(1366);
      assertEquals(1366, int0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[2];
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(iteratorInt0);
      
      int int0 = (-1070);
      vecInt0.shrink((-1070));
      assertFalse(vecInt0.isEmpty());
      assertEquals(1070, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.clone();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int int0 = 0;
      int int1 = (-133);
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      vecInt0.clear();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      VecInt vecInt1 = new VecInt(0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      vecInt0.copyTo((IVecInt) vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      vecInt0.clear();
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.equals((Object)vecInt1));
      
      IVecInt iVecInt0 = vecInt0.push(1386);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1386, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1386, iVecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      
      int int2 = vecInt0.size();
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1386, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      vecInt0.moveTo(1, 1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertEquals(1386, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      vecInt0.shrinkTo((-2521));
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-2521), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      vecInt0.shrink(0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals((-2521), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[1] = 1;
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push((-2142));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals((-2142), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      vecInt0.sort();
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {(-2142), 0, 0, 0, 0}, intArray1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(intArray1, intArray0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray1.length);
      
      vecInt0.hashCode();
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      
      VecInt vecInt1 = new VecInt(5, (-2823));
      assertEquals((-2823), vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertNotNull(vecInt1);
      
      vecInt0.ensure(1);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertNotNull(vecInt2);
      
      boolean boolean0 = vecInt1.contains(1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, iVecInt0);
      assertEquals((-2823), vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt0.contains(42);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2142), vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int0 = vecInt2.unsafeGet(0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertEquals(0, int0);
      
      String string0 = vecInt2.toString();
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertNotNull(string0);
      assertEquals("", string0);
      
      // Undeclared exception!
      try { 
        vecInt0.unsafeGet(2868);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2868
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.size();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int[] intArray0 = new int[4];
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 1;
      intArray0[0] = 1;
      intArray0[1] = (-1);
      intArray0[2] = 1251;
      intArray0[3] = 1312;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1, (-1), 1251, 1312}, intArray0);
      assertEquals(1312, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      int int1 = 3407;
      int int2 = vecInt0.containsAt(3407, 1312);
      assertArrayEquals(new int[] {1, (-1), 1251, 1312}, intArray0);
      assertEquals(1312, vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1), int2);
      assertEquals(4, intArray0.length);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      int int3 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = 0;
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {1, (-1), 1251, 1312}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt1.remove((-1287));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1307);
      intArray0[3] = (-2260);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.shrink(0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals((-2260), iVecInt0.last());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt1 = vecInt0.push((-1307));
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertEquals((-1307), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, iVecInt1.size());
      assertEquals((-1307), iVecInt1.last());
      assertFalse(iVecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertEquals((-2260), iVecInt2.last());
      assertEquals(4, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt3 = vecInt0.push(15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt3);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(iVecInt3.isEmpty());
      assertEquals(15, iVecInt3.last());
      assertEquals(5, iVecInt3.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertNotNull(iVecInt3);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt1 = iVecInt3.iterator();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt3);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt2);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(15, vecInt0.last());
      assertEquals(5, vecInt0.size());
      assertFalse(iVecInt3.isEmpty());
      assertEquals(15, iVecInt3.last());
      assertEquals(5, iVecInt3.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        iVecInt2.copyTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[1] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1307);
      intArray0[3] = (-2250);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertEquals((-2250), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertEquals((-2250), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.shrink(0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertEquals((-2250), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-2250), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-2250), iVecInt0.last());
      assertEquals(4, iVecInt0.size());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      VecInt vecInt1 = (VecInt)vecInt0.push((-1307));
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertEquals((-1307), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1307), vecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      VecInt vecInt2 = (VecInt)vecInt0.pop();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt2, vecInt1);
      assertSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertEquals((-2250), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(4, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals((-2250), vecInt2.last());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt2.equals((Object)iVecInt0));
      assertNotNull(vecInt2);
      assertEquals(4, intArray0.length);
      
      VecInt vecInt3 = (VecInt)vecInt0.push(15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt3, iVecInt0);
      assertSame(vecInt3, vecInt0);
      assertSame(vecInt3, vecInt1);
      assertSame(vecInt3, vecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(15, vecInt0.last());
      assertEquals(5, vecInt3.size());
      assertEquals(15, vecInt3.last());
      assertFalse(vecInt3.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt3.equals((Object)iVecInt0));
      assertNotNull(vecInt3);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      vecInt0.set(0, 15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
      
      boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2250)}, intArray0);
      assertSame(vecInt0, vecInt1);
      assertSame(vecInt0, vecInt2);
      assertSame(vecInt0, vecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt1, vecInt2);
      assertSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertSame(vecInt1, vecInt3);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(15, vecInt0.last());
      assertEquals(15, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      assertEquals(1325, vecInt0.size());
      assertEquals(1251, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt1.contains((-1));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1325, vecInt0.size());
      assertEquals(1251, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.containsAt(636);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, (-933));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-933), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.indexOf((-2467));
      assertFalse(vecInt0.isEmpty());
      assertEquals((-933), vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1), 1365);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      int int0 = 2216;
      int int1 = 2769;
      VecInt vecInt0 = new VecInt(2216, 2769);
      assertEquals(2769, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2216, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int2 = 9;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(513, 431, (-1), 1777, (-2249)).when(comparator0).compare(anyInt() , anyInt());
      // Undeclared exception!
      try { 
        vecInt0.sort(9, 2216, comparator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3526, 3526);
      assertEquals(3526, vecInt0.last());
      assertEquals(3526, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.delete(2);
      assertEquals(3526, vecInt0.last());
      assertEquals(3525, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3526, int0);
      
      // Undeclared exception!
      try { 
        vecInt0.growTo(2, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3526
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(55);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(55, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(55, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1373);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(55, vecInt0.last());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      IVecInt iVecInt1 = vecInt0.push((-407));
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-407), vecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals((-407), iVecInt1.last());
      assertNotNull(iVecInt1);
      
      IVecInt iVecInt2 = vecInt0.push(55);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertSame(iVecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(55, vecInt0.last());
      assertEquals(3, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals(55, iVecInt2.last());
      assertNotNull(iVecInt2);
      
      int int0 = vecInt0.indexOf(55);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(55, vecInt0.last());
      assertEquals(0, int0);
      
      boolean boolean0 = vecInt0.contains((-1155));
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt2);
      assertFalse(vecInt0.isEmpty());
      assertEquals(3, vecInt0.size());
      assertEquals(55, vecInt0.last());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      vecInt0.insertFirst(10);
      assertEquals(10, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      int int0 = vecInt0.containsAt((-1355), 1);
      assertEquals(10, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals((-1), int0);
      
      // Undeclared exception!
      try { 
        vecInt0.selectionSort(1, 10);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set(0, 0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push(1855);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1855, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(2, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1855, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.push(1855);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertEquals(1855, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(1855, iVecInt1.last());
      assertEquals(3, iVecInt1.size());
      assertNotNull(iVecInt1);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1855, vecInt0.last());
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(boolean0);
      
      vecInt0.sortUnique();
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(1855, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1813, 1800);
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertNotNull(vecInt0);
      
      String string0 = vecInt0.toString();
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertNotNull(string0);
      
      int int0 = vecInt0.containsAt(1807, 1800);
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertEquals((-1), int0);
      
      vecInt0.selectionSort(1800, 1800);
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      
      int int1 = vecInt0.hashCode();
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertFalse(int1 == int0);
      
      int int2 = vecInt0.indexOf(0);
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = vecInt0.indexOf(3578);
      assertEquals(1813, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1800, vecInt0.last());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals((-1), int3);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      VecInt vecInt0 = new VecInt(50, (-3758));
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(898, 1262, 1260, 898, 898).when(comparator0).compare(anyInt() , anyInt());
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(50, (-1), comparator1);
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
      
      vecInt0.sort(comparator0);
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-3758), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(50, vecInt0.size());
      assertEquals(50, iVecInt0.size());
      assertEquals((-3758), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int0 = new Integer(50);
      assertEquals(50, int0);
      
      IVecInt iVecInt1 = vecInt0.push((-1));
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(51, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(51, iVecInt1.size());
      assertEquals((-1), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      iVecInt1.ensure(5);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(51, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(51, iVecInt1.size());
      assertEquals((-1), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      
      int int1 = iVecInt1.indexOf((-1));
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals((-1), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(51, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(51, iVecInt1.size());
      assertEquals((-1), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertTrue(int1 == int0);
      assertEquals(50, int1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 50;
      int int1 = 7;
      VecInt vecInt0 = new VecInt(50, 7);
      assertFalse(vecInt0.isEmpty());
      assertEquals(7, vecInt0.last());
      assertEquals(50, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      vecInt0.subset(int1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      int int0 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertEquals(0, int0);
      
      IVecInt iVecInt0 = vecInt1.push(0);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1, vecInt1.size());
      assertEquals(0, vecInt1.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      VecInt vecInt2 = new VecInt();
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      
      boolean boolean0 = vecInt2.contains(1325);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      VecInt vecInt3 = new VecInt();
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      
      boolean boolean1 = vecInt3.contains(15);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, vecInt0);
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = vecInt2.isSubsetOf(vecInt3);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1813, 1800);
      assertEquals(1813, vecInt0.size());
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      String string0 = vecInt0.toString();
      assertEquals(1813, vecInt0.size());
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(string0);
      
      int int0 = vecInt0.indexOf(1813);
      assertEquals(1813, vecInt0.size());
      assertEquals(1800, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      VecInt vecInt0 = new VecInt(5, (-5381));
      assertEquals(5, vecInt0.size());
      assertEquals((-5381), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(5, vecInt0.size());
      assertEquals((-5381), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean0);
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      
      IVecInt iVecInt0 = vecInt2.push(2);
      assertNotSame(vecInt2, vecInt0);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertSame(iVecInt0, vecInt2);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt2.isEmpty());
      assertEquals(1, vecInt2.size());
      assertEquals(2, vecInt2.last());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt2.push(2575);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, vecInt2);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertEquals(2575, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(2, vecInt2.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2, iVecInt1.size());
      assertEquals(2575, iVecInt1.last());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      
      int int0 = vecInt2.get(0);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertSame(vecInt2, iVecInt0);
      assertNotSame(vecInt2, vecInt1);
      assertEquals(2575, vecInt2.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(2, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertEquals(2, int0);
      
      // Undeclared exception!
      try { 
        vecInt2.set(2, (-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, (-1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 0;
      intArray0[3] = (-1);
      intArray0[4] = 0;
      intArray0[5] = (-1);
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {0, (-1), 0, (-1), 0, (-1)}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(6, intArray0.length);
      
      vecInt0.sort(comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(0, intArray1.length);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.shrinkTo(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        vecInt0.remove(5);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.pop();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertNotNull(iVecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.copyTo(iVecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0, 0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int int0 = 2973;
      IVecInt[] iVecIntArray0 = vecInt0.subset(2973);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(iteratorInt0);
      
      vecInt0.shrinkTo(2973);
      assertFalse(vecInt0.isEmpty());
      assertEquals(2973, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.sort();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1486
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(boolean0);
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      int int0 = 3194;
      IVecInt iVecInt0 = vecInt1.push(3194);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt1.size());
      assertEquals(3194, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3194, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = iVecInt0.isEmpty();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt1.size());
      assertEquals(3194, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3194, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      int int1 = 0;
      boolean boolean1 = vecInt1.contains(0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertEquals(1, vecInt1.size());
      assertEquals(3194, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        vecInt1.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      VecInt vecInt0 = new VecInt(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.push(1855);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1855, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1855, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1855, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      vecInt1.sortUnique();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1855, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.last());
      assertEquals(1325, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt1.contains((-1));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      
      VecInt vecInt3 = new VecInt();
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertFalse(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      
      VecInt vecInt4 = new VecInt();
      assertTrue(vecInt4.isEmpty());
      assertEquals(0, vecInt4.size());
      assertFalse(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertTrue(vecInt4.equals((Object)vecInt1));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertNotNull(vecInt4);
      
      VecInt vecInt5 = new VecInt();
      assertTrue(vecInt5.isEmpty());
      assertEquals(0, vecInt5.size());
      assertFalse(vecInt5.equals((Object)vecInt0));
      assertTrue(vecInt5.equals((Object)vecInt4));
      assertTrue(vecInt5.equals((Object)vecInt2));
      assertTrue(vecInt5.equals((Object)vecInt1));
      assertTrue(vecInt5.equals((Object)vecInt3));
      assertNotNull(vecInt5);
      
      VecInt vecInt6 = new VecInt();
      assertEquals(0, vecInt6.size());
      assertTrue(vecInt6.isEmpty());
      assertTrue(vecInt6.equals((Object)vecInt1));
      assertTrue(vecInt6.equals((Object)vecInt3));
      assertTrue(vecInt6.equals((Object)vecInt4));
      assertTrue(vecInt6.equals((Object)vecInt5));
      assertFalse(vecInt6.equals((Object)vecInt0));
      assertTrue(vecInt6.equals((Object)vecInt2));
      assertNotNull(vecInt6);
      
      VecInt vecInt7 = new VecInt();
      assertTrue(vecInt7.isEmpty());
      assertEquals(0, vecInt7.size());
      assertTrue(vecInt7.equals((Object)vecInt4));
      assertTrue(vecInt7.equals((Object)vecInt1));
      assertTrue(vecInt7.equals((Object)vecInt3));
      assertTrue(vecInt7.equals((Object)vecInt6));
      assertTrue(vecInt7.equals((Object)vecInt5));
      assertTrue(vecInt7.equals((Object)vecInt2));
      assertFalse(vecInt7.equals((Object)vecInt0));
      assertNotNull(vecInt7);
      
      // Undeclared exception!
      try { 
        vecInt7.sort(1314, 1325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      int int0 = 2001;
      VecInt vecInt0 = new VecInt(2001);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.equals(")");
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2001);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      IVecInt[] iVecIntArray1 = vecInt0.subset(0);
      assertNotSame(iVecIntArray1, iVecIntArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(iVecIntArray1.equals((Object)iVecIntArray0));
      assertNotNull(iVecIntArray1);
      assertEquals(0, iVecIntArray1.length);
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      boolean boolean0 = vecInt0.contains((-1));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        vecInt0.hashCode();
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1251, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean0);
      
      boolean boolean1 = vecInt1.isSubsetOf(vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.size());
      assertEquals(1, vecInt0.last());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1;
      intArray0[2] = (-1307);
      intArray0[3] = (-2260);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.shrink(0);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2260), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt1 = vecInt0.push((-1307));
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals((-1307), vecInt0.last());
      assertEquals(5, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1307), iVecInt1.last());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt2 = vecInt0.pop();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertSame(vecInt0, iVecInt2);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt2, vecInt0);
      assertSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertEquals((-2260), vecInt0.last());
      assertEquals(4, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, iVecInt2.size());
      assertEquals((-2260), iVecInt2.last());
      assertFalse(iVecInt2.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt2.equals((Object)iVecInt0));
      assertNotNull(iVecInt2);
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt3 = vecInt0.push(15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, iVecInt3.size());
      assertEquals(15, iVecInt3.last());
      assertFalse(iVecInt3.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertNotNull(iVecInt3);
      assertEquals(4, intArray0.length);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(boolean0);
      assertEquals(4, intArray0.length);
      
      vecInt0.set(0, 15);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt4 = vecInt0.clone();
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt4, vecInt0);
      assertNotSame(iVecInt4, iVecInt2);
      assertNotSame(iVecInt4, iVecInt3);
      assertNotSame(iVecInt4, iVecInt0);
      assertNotSame(iVecInt4, iVecInt1);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals(5, iVecInt4.size());
      assertEquals(15, iVecInt4.last());
      assertFalse(iVecInt4.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertTrue(iVecInt4.equals((Object)iVecInt1));
      assertFalse(iVecInt4.equals((Object)iVecInt0));
      assertTrue(iVecInt4.equals((Object)vecInt0));
      assertTrue(iVecInt4.equals((Object)iVecInt2));
      assertTrue(iVecInt4.equals((Object)iVecInt3));
      assertNotNull(iVecInt4);
      assertEquals(4, intArray0.length);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals(15, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)iVecInt4));
      assertNotNull(iVecIntArray0);
      assertEquals(4, intArray0.length);
      assertEquals(5, iVecIntArray0.length);
      
      iVecInt3.moveTo(iVecInt4);
      assertArrayEquals(new int[] {0, 1, (-1307), (-2260)}, intArray0);
      assertNotSame(vecInt0, iVecInt4);
      assertSame(vecInt0, iVecInt2);
      assertSame(vecInt0, iVecInt3);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, iVecInt2);
      assertSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt4);
      assertNotSame(iVecInt3, iVecInt0);
      assertNotSame(iVecInt4, vecInt0);
      assertNotSame(iVecInt4, iVecInt2);
      assertNotSame(iVecInt4, iVecInt3);
      assertNotSame(iVecInt4, iVecInt0);
      assertNotSame(iVecInt4, iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt3.size());
      assertTrue(iVecInt3.isEmpty());
      assertEquals(15, iVecInt4.last());
      assertFalse(iVecInt4.isEmpty());
      assertEquals(10, iVecInt4.size());
      assertFalse(vecInt0.equals((Object)iVecInt4));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt4));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertFalse(iVecInt4.equals((Object)vecInt0));
      assertFalse(iVecInt4.equals((Object)iVecInt2));
      assertFalse(iVecInt4.equals((Object)iVecInt3));
      assertFalse(iVecInt4.equals((Object)iVecInt0));
      assertFalse(iVecInt4.equals((Object)iVecInt1));
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      int int0 = 1284;
      int int1 = 3627;
      VecInt vecInt0 = new VecInt(1284, 3627);
      assertEquals(3627, vecInt0.last());
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1972), (-1972), comparator0);
      assertEquals(3627, vecInt0.last());
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int[] intArray0 = new int[2];
      VecInt vecInt1 = new VecInt(2621, 3165);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      vecInt0.sort(1912, 1912);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(3627, vecInt0.last());
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2620, vecInt1.size());
      assertEquals(3165, iVecInt0.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int2 = iVecInt0.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2620, vecInt1.size());
      assertEquals(3165, iVecInt0.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2620, int2);
      
      int int3 = vecInt1.size();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(2620, int3);
      
      // Undeclared exception!
      try { 
        vecInt1.moveTo(0, (-1989));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1989
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.set((-4), (-4));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2703;
      intArray0[2] = (-2554);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt1.contains(0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      vecInt1.moveTo((IVecInt) vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      vecInt1.growTo(2609, 0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2609, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 54;
      intArray0[1] = 0;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = (-94);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {54, 0, 1, 1, 0, 1, (-94)}, intArray0);
      assertEquals(7, vecInt0.size());
      assertEquals((-94), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(7, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-3321), 54);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 54
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst((-127));
      assertEquals((-127), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int0 = vecInt0.indexOf(3262);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      VecInt vecInt2 = new VecInt();
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      
      VecInt vecInt3 = new VecInt();
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.isEmpty());
      assertTrue(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      
      VecInt vecInt4 = new VecInt();
      assertTrue(vecInt4.isEmpty());
      assertEquals(0, vecInt4.size());
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.equals((Object)vecInt0));
      assertTrue(vecInt4.equals((Object)vecInt1));
      assertNotNull(vecInt4);
      
      vecInt2.clear();
      assertNotSame(vecInt2, vecInt4);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertTrue(vecInt2.equals((Object)vecInt4));
      
      VecInt vecInt5 = new VecInt();
      assertEquals(0, vecInt5.size());
      assertTrue(vecInt5.isEmpty());
      assertTrue(vecInt5.equals((Object)vecInt3));
      assertTrue(vecInt5.equals((Object)vecInt4));
      assertTrue(vecInt5.equals((Object)vecInt0));
      assertTrue(vecInt5.equals((Object)vecInt2));
      assertTrue(vecInt5.equals((Object)vecInt1));
      assertNotNull(vecInt5);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt1, vecInt5);
      assertNotSame(vecInt1, vecInt4);
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt3);
      assertNotSame(iVecInt0, vecInt5);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt3);
      assertNotSame(iVecInt0, vecInt4);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt2);
      assertEquals((-1), vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1), iVecInt0.size());
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)vecInt5));
      assertFalse(vecInt1.equals((Object)vecInt4));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt3));
      assertFalse(iVecInt0.equals((Object)vecInt5));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt3));
      assertFalse(iVecInt0.equals((Object)vecInt4));
      assertFalse(iVecInt0.equals((Object)vecInt2));
      assertNotNull(iVecInt0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 140;
      VecInt vecInt0 = new VecInt(140, 140);
      assertEquals(140, vecInt0.size());
      assertEquals(140, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.get((-3333));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(2);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertNotNull(iVecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertNotNull(iVecIntArray0);
      assertEquals(1, iVecIntArray0.length);
      
      IVecInt iVecInt1 = vecInt0.push(1);
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertEquals(1, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertEquals(1, iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertNotNull(iVecInt1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2, 2);
      assertEquals(2, vecInt0.last());
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.sortUnique();
      assertEquals(2, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 1;
      VecInt vecInt0 = new VecInt(1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.unsafePush(1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort(1, 1, comparator0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      int int1 = vecInt0.size();
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-88);
      intArray0[1] = 1;
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {1, 1}, intArray0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(2, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-56);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      vecInt0.moveTo(0, intArray0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(4, intArray0.length);
      
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertEquals(0, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      int int0 = vecInt1.delete(0);
      assertArrayEquals(new int[] {0, 0, (-56), 0}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3, vecInt1.size());
      assertEquals((-56), vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int int0 = (-414);
      int int1 = (-356);
      int int2 = (-406);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-406), (-406), comparator0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.containsAt((-414), (-356));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -355
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst((-1796));
      assertEquals(1, vecInt0.size());
      assertEquals((-1796), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(1, vecInt0.size());
      assertEquals((-1796), vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iteratorInt0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1107;
      intArray0[1] = (-397);
      intArray0[2] = 15;
      intArray0[3] = (-2392);
      intArray0[4] = (-1466);
      intArray0[5] = 1455;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertNotNull(vecInt0);
      assertEquals(6, intArray0.length);
      
      int int0 = vecInt0.indexOf((-397));
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertEquals(1, int0);
      assertEquals(6, intArray0.length);
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray1);
      assertSame(intArray0, intArray1);
      assertSame(intArray1, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertNotNull(intArray1);
      assertEquals(6, intArray0.length);
      assertEquals(6, intArray1.length);
      
      int int1 = vecInt0.last();
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertSame(intArray0, intArray1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.last());
      assertEquals(6, vecInt0.size());
      assertFalse(int1 == int0);
      assertEquals(1455, int1);
      assertEquals(6, intArray0.length);
      
      vecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertSame(intArray0, intArray1);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(6, intArray0.length);
      
      vecInt0.shrinkTo(1455);
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertSame(intArray0, intArray1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.size());
      assertEquals(6, intArray0.length);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.selectionSort(7, (-1466), comparator0);
      assertArrayEquals(new int[] {1107, (-397), 15, (-2392), (-1466), 1455}, intArray0);
      assertSame(intArray0, intArray1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1455, vecInt0.size());
      assertEquals(6, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.indexOf(1099);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt0.pop();
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      vecInt0.selectionSort(1219, 1219);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertEquals((-1), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      // Undeclared exception!
      try { 
        vecInt0.subset(1219);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      assertEquals(1251, vecInt0.last());
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt1.equals(vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1251, vecInt0.last());
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt1.contains((-1));
      assertNotSame(vecInt1, vecInt0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1251, vecInt0.last());
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-1), 1325);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1325
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(2);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      iVecInt0.sortUnique();
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(2, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(2);
      assertSame(vecInt0, iVecInt0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.size());
      assertEquals(2, vecInt0.last());
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1269);
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1269, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      vecInt1.moveTo2(vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertTrue(vecInt1.equals((Object)vecInt0));
      
      boolean boolean0 = vecInt1.contains((-1));
      assertNotSame(vecInt1, vecInt0);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertNotNull(iVecInt0);
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)vecInt1));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1284, 3627);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1972), (-1972), comparator0);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      
      int[] intArray0 = new int[2];
      intArray0[0] = 3627;
      intArray0[1] = 1284;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = (-133);
      intArray0[2] = 10;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, (-133), 10}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3, vecInt1.size());
      assertEquals(10, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(3, intArray0.length);
      
      VecInt vecInt2 = new VecInt();
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      
      VecInt vecInt3 = new VecInt();
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertNotNull(vecInt3);
      
      vecInt2.clear();
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertFalse(vecInt2.equals((Object)vecInt1));
      
      VecInt vecInt4 = new VecInt();
      assertEquals(0, vecInt4.size());
      assertTrue(vecInt4.isEmpty());
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.equals((Object)vecInt0));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertNotNull(vecInt4);
      
      int int0 = vecInt1.size();
      assertArrayEquals(new int[] {0, (-133), 10}, intArray0);
      assertNotSame(vecInt1, vecInt3);
      assertNotSame(vecInt1, vecInt4);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertFalse(vecInt1.isEmpty());
      assertEquals(3, vecInt1.size());
      assertEquals(10, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt3));
      assertFalse(vecInt1.equals((Object)vecInt4));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertEquals(3, int0);
      assertEquals(3, intArray0.length);
      
      vecInt2.copyTo((IVecInt) vecInt3);
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt4);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, vecInt4);
      assertNotSame(vecInt3, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt4));
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt4));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      
      vecInt2.clear();
      assertNotSame(vecInt2, vecInt3);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt4);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(0, vecInt2.size());
      assertTrue(vecInt2.isEmpty());
      assertTrue(vecInt2.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt4));
      assertTrue(vecInt2.equals((Object)vecInt3));
      assertFalse(vecInt2.equals((Object)vecInt1));
      
      VecInt vecInt5 = new VecInt();
      assertTrue(vecInt5.isEmpty());
      assertEquals(0, vecInt5.size());
      assertTrue(vecInt5.equals((Object)vecInt3));
      assertTrue(vecInt5.equals((Object)vecInt4));
      assertTrue(vecInt5.equals((Object)vecInt0));
      assertFalse(vecInt5.equals((Object)vecInt1));
      assertTrue(vecInt5.equals((Object)vecInt2));
      assertNotNull(vecInt5);
      
      int int1 = vecInt3.size();
      assertNotSame(vecInt3, vecInt5);
      assertNotSame(vecInt3, vecInt2);
      assertNotSame(vecInt3, vecInt1);
      assertNotSame(vecInt3, vecInt4);
      assertNotSame(vecInt3, vecInt0);
      assertTrue(vecInt3.isEmpty());
      assertEquals(0, vecInt3.size());
      assertTrue(vecInt3.equals((Object)vecInt4));
      assertTrue(vecInt3.equals((Object)vecInt5));
      assertTrue(vecInt3.equals((Object)vecInt0));
      assertFalse(vecInt3.equals((Object)vecInt1));
      assertTrue(vecInt3.equals((Object)vecInt2));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = vecInt4.get(3);
      assertNotSame(vecInt4, vecInt0);
      assertNotSame(vecInt4, vecInt2);
      assertNotSame(vecInt4, vecInt3);
      assertNotSame(vecInt4, vecInt5);
      assertNotSame(vecInt4, vecInt1);
      assertEquals(0, vecInt4.size());
      assertTrue(vecInt4.isEmpty());
      assertTrue(vecInt4.equals((Object)vecInt3));
      assertTrue(vecInt4.equals((Object)vecInt5));
      assertTrue(vecInt4.equals((Object)vecInt2));
      assertTrue(vecInt4.equals((Object)vecInt0));
      assertFalse(vecInt4.equals((Object)vecInt1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        vecInt5.last();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(194, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1671;
      intArray0[2] = (-133);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      assertEquals(4, intArray0.length);
      
      int int0 = vecInt0.last();
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertEquals(4, vecInt0.size());
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(0, int0);
      assertEquals(4, intArray0.length);
      
      int[] intArray1 = new int[4];
      assertFalse(intArray1.equals((Object)intArray0));
      
      intArray1[0] = 1083;
      intArray1[1] = 0;
      intArray1[2] = (-598);
      intArray1[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray1);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray1.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray1.length);
      
      VecInt vecInt2 = (VecInt)vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1917, vecInt2.last());
      assertEquals(4, vecInt2.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(vecInt2);
      assertEquals(4, intArray1.length);
      
      vecInt1.insertFirst(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1083, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertEquals(4, intArray1.length);
      
      IteratorInt iteratorInt0 = vecInt2.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1083, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1917, vecInt2.last());
      assertEquals(4, vecInt2.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray1.length);
      
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertNotNull(emptyVecInt0);
      
      boolean boolean0 = vecInt2.equals(emptyVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertTrue(emptyVecInt0.isEmpty());
      assertEquals(0, emptyVecInt0.size());
      assertEquals("[]", emptyVecInt0.toString());
      assertFalse(vecInt1.isEmpty());
      assertEquals(1083, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1917, vecInt2.last());
      assertEquals(4, vecInt2.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(boolean0);
      assertEquals(4, intArray1.length);
      
      IteratorInt iteratorInt1 = vecInt2.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(1083, vecInt1.last());
      assertEquals(5, vecInt1.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(1917, vecInt2.last());
      assertEquals(4, vecInt2.size());
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray1.length);
      
      vecInt1.unsafePush(20);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertEquals(20, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, vecInt1.size());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertEquals(4, intArray1.length);
      
      vecInt1.copyTo((IVecInt) vecInt2);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(20, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, vecInt1.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(10, vecInt2.size());
      assertEquals(20, vecInt2.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertEquals(4, intArray1.length);
      
      vecInt0.pushAll(vecInt2);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(intArray1, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertEquals(20, vecInt0.last());
      assertEquals(14, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(20, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(6, vecInt1.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals(10, vecInt2.size());
      assertEquals(20, vecInt2.last());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(intArray1.equals((Object)intArray0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      assertEquals(4, intArray1.length);
      
      vecInt0.shrink(1083);
      assertArrayEquals(new int[] {0, 1671, (-133), 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, vecInt2);
      assertEquals((-1069), vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(intArray0.equals((Object)intArray1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.sort(0, 1083);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 541
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 659;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {659}, intArray0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(659, vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      try { 
        vecInt0.unsafePush(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 10;
      vecInt0.insertFirst(10);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.push((-1470));
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals((-1470), vecInt1.last());
      assertEquals(1, iVecInt0.size());
      assertEquals((-1470), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      IVecInt iVecInt1 = vecInt1.push((-1470));
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals((-1470), vecInt1.last());
      assertEquals(2, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1470), iVecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      
      boolean boolean0 = vecInt1.isEmpty();
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals((-1470), vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt0.isSubsetOf(vecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2, vecInt1.size());
      assertEquals((-1470), vecInt1.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      vecInt0.insertFirst(10);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(10, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt(2621, 3165);
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      IVecInt iVecInt0 = vecInt1.pop();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(3165, iVecInt0.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      
      int int0 = iVecInt0.size();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertEquals(3165, iVecInt0.last());
      assertEquals(2620, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(2620, int0);
      
      int int1 = vecInt1.size();
      assertSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(2620, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(3165, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(int1 == int0);
      assertEquals(2620, int1);
      
      IVecInt iVecInt1 = iVecInt0.push(2621);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2621, vecInt1.last());
      assertEquals(2621, iVecInt0.last());
      assertEquals(2621, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2621, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2621, iVecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertNotNull(iVecInt1);
      
      int int2 = vecInt0.size();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int[] intArray0 = iVecInt1.toArray();
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertEquals(2621, vecInt1.size());
      assertFalse(vecInt1.isEmpty());
      assertEquals(2621, vecInt1.last());
      assertEquals(2621, iVecInt0.last());
      assertEquals(2621, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2621, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(2621, iVecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertNotNull(intArray0);
      assertEquals(5240, intArray0.length);
      
      vecInt1.moveTo2(iVecInt1);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt1, vecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      
      iVecInt0.unsafePush(2620);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(2620, vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertEquals(1, iVecInt0.size());
      assertEquals(2620, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      
      iVecInt0.remove(2620);
      assertSame(vecInt1, iVecInt0);
      assertSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertSame(iVecInt0, vecInt1);
      assertSame(iVecInt0, iVecInt1);
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      vecInt0.growTo(15, 484);
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      String string0 = vecInt0.toString();
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(string0);
      assertEquals("484,484,484,484,484,484,484,484,484,484,484,484,484,484,484", string0);
      
      int int0 = vecInt0.containsAt(6, 2);
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1), int0);
      
      vecInt0.selectionSort(15, (-1));
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      int int1 = vecInt0.hashCode();
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(int1 == int0);
      
      int int2 = vecInt0.indexOf(43);
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(int2 == int0);
      assertEquals((-1), int2);
      
      int int3 = vecInt0.indexOf(1073);
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals((-1), int3);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertEquals(484, vecInt0.last());
      assertEquals(15, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertNotNull(iteratorInt0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1251);
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.last());
      assertNotNull(vecInt0);
      
      VecInt vecInt1 = new VecInt();
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      boolean boolean0 = vecInt1.equals(vecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.last());
      assertEquals(0, vecInt1.size());
      assertTrue(vecInt1.isEmpty());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(boolean0);
      
      boolean boolean1 = vecInt0.contains(1251);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(1325, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1251, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1284, 3627);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      assertNotNull(vecInt0);
      
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      vecInt0.sort((-1972), (-1972), comparator0);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1083;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1917, iVecInt0.last());
      assertEquals(8, iVecInt0.size());
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      vecInt0.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iVecInt0, vecInt0);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(3627, iVecInt0.last());
      assertEquals(1292, iVecInt0.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      vecInt0.growTo((-5533), (-1972));
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(1284, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      vecInt0.growTo(1284, 3627);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertEquals(2568, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(3627, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      
      IVecInt iVecInt1 = vecInt0.push((-1400));
      assertSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, vecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(2569, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-1400), vecInt0.last());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-1400), iVecInt1.last());
      assertEquals(2569, iVecInt1.size());
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertNotNull(iVecInt1);
      
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-1400), 3627, comparator1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        vecInt0.moveTo((-460), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      VecInt vecInt0 = new VecInt(2);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      String string0 = vecInt0.toString();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(string0);
      assertEquals("", string0);
      
      vecInt0.sortUnique();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      IVecInt iVecInt0 = vecInt0.push(2);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(2, iVecInt0.last());
      assertNotNull(iVecInt0);
      
      boolean boolean0 = vecInt0.isEmpty();
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertFalse(boolean0);
      
      vecInt0.insertFirst(0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      
      VecInt vecInt1 = new VecInt();
      assertTrue(vecInt1.isEmpty());
      assertEquals(0, vecInt1.size());
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      
      VecInt vecInt2 = new VecInt();
      assertTrue(vecInt2.isEmpty());
      assertEquals(0, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertTrue(vecInt2.equals((Object)vecInt1));
      assertNotNull(vecInt2);
      
      IVecInt iVecInt1 = vecInt2.push((-4083));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, vecInt1);
      assertFalse(vecInt2.isEmpty());
      assertEquals(1, vecInt2.size());
      assertEquals((-4083), vecInt2.last());
      assertEquals(1, iVecInt1.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-4083), iVecInt1.last());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecInt1);
      
      vecInt2.unsafePush((-5030));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt1);
      assertFalse(vecInt2.isEmpty());
      assertEquals((-5030), vecInt2.last());
      assertEquals(2, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      
      vecInt2.remove((-4083));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt1);
      assertFalse(vecInt2.isEmpty());
      assertEquals((-5030), vecInt2.last());
      assertEquals(1, vecInt2.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      
      vecInt2.copyTo(iVecInt1);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, vecInt1);
      assertFalse(vecInt2.isEmpty());
      assertEquals((-5030), vecInt2.last());
      assertEquals(2, vecInt2.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals((-5030), iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      
      IVecInt iVecInt2 = vecInt2.push((-1470));
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt2);
      assertSame(vecInt2, iVecInt1);
      assertSame(iVecInt2, vecInt2);
      assertNotSame(iVecInt2, vecInt1);
      assertSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertNotSame(iVecInt2, vecInt0);
      assertEquals((-1470), vecInt2.last());
      assertEquals(3, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals((-1470), iVecInt2.last());
      assertEquals(3, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertNotNull(iVecInt2);
      
      IVecInt[] iVecIntArray0 = iVecInt1.subset(2);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt2);
      assertSame(vecInt2, iVecInt1);
      assertSame(iVecInt1, iVecInt2);
      assertNotSame(iVecInt1, iVecInt0);
      assertNotSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, vecInt2);
      assertNotSame(iVecInt1, vecInt1);
      assertEquals((-1470), vecInt2.last());
      assertEquals(3, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(3, iVecInt1.size());
      assertEquals((-1470), iVecInt1.last());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)iVecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecIntArray0);
      assertEquals(3, iVecIntArray0.length);
      
      IVecInt iVecInt3 = vecInt1.push((-5030));
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(vecInt1, vecInt2);
      assertSame(vecInt1, iVecInt3);
      assertNotSame(vecInt1, iVecInt1);
      assertNotSame(vecInt1, iVecInt2);
      assertNotSame(iVecInt3, iVecInt1);
      assertNotSame(iVecInt3, iVecInt0);
      assertNotSame(iVecInt3, vecInt2);
      assertNotSame(iVecInt3, vecInt0);
      assertSame(iVecInt3, vecInt1);
      assertNotSame(iVecInt3, iVecInt2);
      assertFalse(vecInt1.isEmpty());
      assertEquals((-5030), vecInt1.last());
      assertEquals(1, vecInt1.size());
      assertEquals(1, iVecInt3.size());
      assertFalse(iVecInt3.isEmpty());
      assertEquals((-5030), iVecInt3.last());
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(vecInt1.equals((Object)vecInt2));
      assertFalse(vecInt1.equals((Object)iVecInt1));
      assertFalse(vecInt1.equals((Object)iVecInt2));
      assertFalse(iVecInt3.equals((Object)iVecInt1));
      assertFalse(iVecInt3.equals((Object)iVecInt0));
      assertFalse(iVecInt3.equals((Object)vecInt2));
      assertFalse(iVecInt3.equals((Object)vecInt0));
      assertFalse(iVecInt3.equals((Object)iVecInt2));
      assertNotNull(iVecInt3);
      
      vecInt2.insertFirst(0);
      assertNotSame(vecInt2, vecInt1);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt2);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, iVecInt3);
      assertEquals(4, vecInt2.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals((-5030), vecInt2.last());
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt3));
      
      IVecInt iVecInt4 = iVecInt2.push((-1768));
      assertNotSame(iVecInt4, vecInt0);
      assertSame(iVecInt4, iVecInt2);
      assertNotSame(iVecInt4, vecInt1);
      assertNotSame(iVecInt4, iVecInt3);
      assertSame(iVecInt4, vecInt2);
      assertNotSame(iVecInt4, iVecInt0);
      assertSame(iVecInt4, iVecInt1);
      assertNotSame(vecInt2, vecInt1);
      assertSame(vecInt2, iVecInt4);
      assertNotSame(vecInt2, vecInt0);
      assertNotSame(vecInt2, iVecInt0);
      assertSame(vecInt2, iVecInt2);
      assertSame(vecInt2, iVecInt1);
      assertNotSame(vecInt2, iVecInt3);
      assertSame(iVecInt2, vecInt2);
      assertNotSame(iVecInt2, vecInt1);
      assertSame(iVecInt2, iVecInt1);
      assertNotSame(iVecInt2, iVecInt0);
      assertSame(iVecInt2, iVecInt4);
      assertNotSame(iVecInt2, iVecInt3);
      assertNotSame(iVecInt2, vecInt0);
      assertFalse(iVecInt4.isEmpty());
      assertEquals((-1768), iVecInt4.last());
      assertEquals(5, iVecInt4.size());
      assertFalse(vecInt2.isEmpty());
      assertEquals((-1768), vecInt2.last());
      assertEquals(5, vecInt2.size());
      assertEquals(5, iVecInt2.size());
      assertFalse(iVecInt2.isEmpty());
      assertEquals((-1768), iVecInt2.last());
      assertFalse(iVecInt4.equals((Object)vecInt0));
      assertFalse(iVecInt4.equals((Object)vecInt1));
      assertFalse(iVecInt4.equals((Object)iVecInt3));
      assertFalse(iVecInt4.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)vecInt1));
      assertFalse(vecInt2.equals((Object)vecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt0));
      assertFalse(vecInt2.equals((Object)iVecInt3));
      assertFalse(iVecInt2.equals((Object)vecInt1));
      assertFalse(iVecInt2.equals((Object)iVecInt0));
      assertFalse(iVecInt2.equals((Object)iVecInt3));
      assertFalse(iVecInt2.equals((Object)vecInt0));
      assertNotNull(iVecInt4);
      
      IteratorInt iteratorInt0 = vecInt0.iterator();
      assertNotSame(vecInt0, vecInt2);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt3);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, iVecInt4);
      assertNotSame(vecInt0, iVecInt2);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertFalse(vecInt0.equals((Object)vecInt2));
      assertFalse(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt0.equals((Object)iVecInt3));
      assertFalse(vecInt0.equals((Object)iVecInt4));
      assertFalse(vecInt0.equals((Object)iVecInt2));
      assertNotNull(iteratorInt0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = (-1796);
      VecInt vecInt0 = null;
      try {
        vecInt0 = new VecInt((-1796));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 2703;
      intArray0[2] = (-2554);
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = vecInt0.equals(object0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertFalse(boolean0);
      
      IVecInt iVecInt0 = vecInt0.push(2703);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2703, vecInt0.last());
      assertEquals(1, iVecInt0.size());
      assertEquals(2703, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertNotNull(iVecInt0);
      
      boolean boolean1 = vecInt0.contains((-2129));
      assertSame(vecInt0, iVecInt0);
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2703, vecInt0.last());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      vecInt0.unsafePush(1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(2, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.unsafePush(1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      vecInt0.hashCode();
      assertSame(vecInt0, iVecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      
      int int0 = vecInt0.unsafeGet(0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(3, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, vecInt0.last());
      assertEquals(2703, int0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      assertNotNull(vecInt0);
      
      vecInt0.insertFirst(0);
      assertEquals(0, vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      
      vecInt0.clear();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.shrink(0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      vecInt0.sort();
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      int[] intArray0 = new int[4];
      intArray0[0] = 1083;
      intArray0[1] = 0;
      intArray0[2] = (-598);
      intArray0[3] = 1917;
      VecInt vecInt1 = new VecInt(intArray0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertNotNull(vecInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.ensure(0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, vecInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertEquals(4, intArray0.length);
      
      IVecInt iVecInt0 = vecInt1.clone();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt0 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertNotNull(iteratorInt0);
      assertEquals(4, intArray0.length);
      
      IteratorInt iteratorInt1 = iVecInt0.iterator();
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertNotSame(iteratorInt1, iteratorInt0);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertEquals(4, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(vecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt1));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iteratorInt1.equals((Object)iteratorInt0));
      assertNotNull(iteratorInt1);
      assertEquals(4, intArray0.length);
      
      vecInt1.copyTo(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertEquals(8, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      vecInt0.pushAll(iVecInt0);
      assertArrayEquals(new int[] {1083, 0, (-598), 1917}, intArray0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt1, iVecInt0);
      assertNotSame(vecInt1, vecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotSame(iVecInt0, vecInt1);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(vecInt1.isEmpty());
      assertEquals(4, vecInt1.size());
      assertEquals(1917, vecInt1.last());
      assertEquals(8, iVecInt0.size());
      assertEquals(1917, iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(vecInt1.equals((Object)iVecInt0));
      assertFalse(vecInt1.equals((Object)vecInt0));
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertFalse(iVecInt0.equals((Object)vecInt1));
      assertEquals(4, intArray0.length);
      
      vecInt0.selectionSort((-1), (-1305));
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      IVecInt[] iVecIntArray0 = vecInt0.subset(0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertNotNull(iVecIntArray0);
      assertEquals(0, iVecIntArray0.length);
      
      vecInt0.hashCode();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      
      IVecInt iVecInt1 = vecInt0.clone();
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertNotSame(iVecInt1, vecInt1);
      assertNotSame(iVecInt1, vecInt0);
      assertNotSame(iVecInt1, iVecInt0);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(8, iVecInt1.size());
      assertEquals(1917, iVecInt1.last());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertTrue(iVecInt1.equals((Object)iVecInt0));
      assertTrue(iVecInt1.equals((Object)vecInt0));
      assertFalse(iVecInt1.equals((Object)vecInt1));
      assertNotNull(iVecInt1);
      
      boolean boolean0 = vecInt0.contains(1031);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(vecInt0, vecInt1);
      assertNotSame(vecInt0, iVecInt1);
      assertEquals(8, vecInt0.size());
      assertEquals(1917, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertTrue(vecInt0.equals((Object)iVecInt0));
      assertTrue(vecInt0.equals((Object)iVecInt1));
      assertFalse(vecInt0.equals((Object)vecInt1));
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        vecInt0.moveTo(1917, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertNotNull(vecInt0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      vecInt0.moveTo(0, intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(8, intArray0.length);
      
      vecInt0.sortUnique();
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 2;
      intArray0[3] = (-1643);
      intArray0[4] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertFalse(vecInt0.isEmpty());
      assertEquals(5, vecInt0.size());
      assertEquals((-1), vecInt0.last());
      assertNotNull(vecInt0);
      assertEquals(5, intArray0.length);
      
      IVecInt iVecInt0 = vecInt0.push((-2657));
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals((-2657), vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(6, iVecInt0.size());
      assertEquals((-2657), iVecInt0.last());
      assertNotNull(iVecInt0);
      assertEquals(5, intArray0.length);
      
      vecInt0.sort();
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertSame(vecInt0, iVecInt0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertEquals(5, intArray0.length);
      
      int[] intArray1 = vecInt0.toArray();
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertArrayEquals(new int[] {(-2657), (-1643), (-1), 0, 0, 2, 0, 0, 0, 0}, intArray1);
      assertNotSame(intArray0, intArray1);
      assertSame(vecInt0, iVecInt0);
      assertNotSame(intArray1, intArray0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(5, intArray0.length);
      assertEquals(10, intArray1.length);
      
      boolean boolean0 = vecInt0.contains((-2657));
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(boolean0);
      assertEquals(5, intArray0.length);
      
      vecInt0.hashCode();
      assertArrayEquals(new int[] {0, 0, 2, (-1643), (-1)}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertSame(vecInt0, iVecInt0);
      assertEquals(6, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.last());
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(5, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1325, 1325);
      VecInt vecInt1 = new VecInt();
      vecInt1.contains((-1));
      vecInt0.isSubsetOf(vecInt1);
      // Undeclared exception!
      try { 
        vecInt0.remove((-2251));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 5;
      intArray0[1] = 1;
      intArray0[2] = (-746);
      intArray0[3] = (-1578);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = (-1);
      intArray0[8] = 1;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.unsafePush((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      int int0 = 0;
      VecInt vecInt0 = new VecInt(0, 0);
      IVecInt iVecInt0 = vecInt0.push(0);
      iVecInt0.sortUnique();
      iVecInt0.subset((-2476));
      // Undeclared exception!
      try { 
        vecInt0.get(1248);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      VecInt vecInt0 = new VecInt(3526, 3526);
      // Undeclared exception!
      vecInt0.sortUnique();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-3119);
      intArray0[1] = (-1);
      intArray0[2] = (-691);
      intArray0[3] = 1442;
      intArray0[4] = 3549;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        vecInt0.selectionSort((-691), 1603);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 1671;
      intArray0[2] = (-133);
      intArray0[3] = 0;
      VecInt vecInt0 = new VecInt(intArray0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-133), 0, 1671, 0, 1671).when(comparator0).compare(anyInt() , anyInt());
      vecInt0.sort(comparator0);
      assertArrayEquals(new int[] {1671, 0, (-133), 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.isEmpty();
      vecInt0.pop();
      vecInt0.sortUnique();
      int int0 = vecInt0.containsAt(3901, 3901);
      assertEquals(1, vecInt0.size());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 2;
      VecInt vecInt0 = new VecInt(2);
      IVecInt iVecInt0 = vecInt0.push(2);
      int int1 = (-1038);
      vecInt0.equals(iVecInt0);
      int int2 = 5026;
      vecInt0.subset(5026);
      vecInt0.push((-1038));
      int int3 = 0;
      // Undeclared exception!
      try { 
        vecInt0.moveTo(0, (-1038));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1038
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }
}
