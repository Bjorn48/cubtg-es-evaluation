/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:01:24 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.PrintWriter;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.junit.runner.RunWith;
import org.sat4j.minisat.core.SolverStats;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SolverStats_ESTest extends SolverStats_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incImportedUnits(536);
      solverStats0.incImportedUnits(1);
      assertEquals(537, solverStats0.getImportedUnits());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incUpdateLBD();
      solverStats0.incUpdateLBD();
      assertEquals(2L, solverStats0.getUpdateLBD());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incShortcuts();
      solverStats0.incShortcuts();
      assertEquals(2, solverStats0.getShortcuts());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReduceddb();
      solverStats0.incReduceddb();
      assertEquals(2, solverStats0.getReduceddb());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incStarts();
      solverStats0.incReduceddb();
      assertEquals(1, solverStats0.getStarts());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incChangedreason();
      solverStats0.incChangedreason();
      assertEquals(2L, solverStats0.getChangedreason());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReducedliterals(498);
      solverStats0.incReducedliterals((-1));
      assertEquals(497L, solverStats0.getReducedliterals());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      solverStats0.incRootSimplifications();
      assertEquals(2L, solverStats0.getRootSimplifications());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incIgnoredclauses();
      solverStats0.incIgnoredclauses();
      assertEquals(2L, solverStats0.getIgnoredclauses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedclauses();
      solverStats0.incLearnedclauses();
      assertEquals(2L, solverStats0.getLearnedclauses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedternaryclauses();
      solverStats0.incLearnedternaryclauses();
      assertEquals(2L, solverStats0.getLearnedternaryclauses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedbinaryclauses();
      solverStats0.incLearnedbinaryclauses();
      assertEquals(2L, solverStats0.getLearnedbinaryclauses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedliterals();
      solverStats0.incLearnedliterals();
      assertEquals(2L, solverStats0.getLearnedliterals());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incPropagations();
      solverStats0.incLearnedliterals();
      assertEquals(1L, solverStats0.getPropagations());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incInspects();
      solverStats0.incLearnedliterals();
      assertEquals(1L, solverStats0.getLearnedliterals());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incConflicts();
      solverStats0.incConflicts();
      assertEquals(2L, solverStats0.getConflicts());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incInspects();
      solverStats0.incInspects();
      assertEquals(2L, solverStats0.getInspects());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incPropagations();
      solverStats0.incPropagations();
      assertEquals(2L, solverStats0.getPropagations());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incDecisions();
      solverStats0.incDecisions();
      assertEquals(2L, solverStats0.getDecisions());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incStarts();
      solverStats0.incStarts();
      assertEquals(2, solverStats0.getStarts());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      MockFile mockFile0 = new MockFile("Calls to reduceDB\t: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals(1L, solverStats0.getRootSimplifications());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedternaryclauses();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(1L, solverStats0.getLearnedternaryclauses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incChangedreason();
      MockFile mockFile0 = new MockFile("Calls to reduceDB\t: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals(1L, solverStats0.getChangedreason());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incUpdateLBD();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("h_y{");
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals(1L, solverStats0.getUpdateLBD());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bW+;Wb$`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      solverStats0.incLearnedbinaryclauses();
      solverStats0.printStat(mockPrintWriter0, "propagations\t\t: ");
      assertEquals(1L, solverStats0.getLearnedbinaryclauses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incImportedUnits(536);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(536, solverStats0.getImportedUnits());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incStarts();
      MockFile mockFile0 = new MockFile("Calls to reduceDB\t: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals(1, solverStats0.getStarts());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bW+;Wb$`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      solverStats0.incReduceddb();
      solverStats0.printStat(mockPrintWriter0, "propagations\t\t: ");
      assertEquals(1, solverStats0.getReduceddb());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incDecisions();
      MockFile mockFile0 = new MockFile("Calls to reduceDB\t: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals(1L, solverStats0.getDecisions());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      MockPrintStream mockPrintStream0 = new MockPrintStream("bW+;Wb$`");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      solverStats0.incConflicts();
      solverStats0.printStat(mockPrintWriter0, "propagations\t\t: ");
      assertEquals(1L, solverStats0.getConflicts());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedclauses();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(1L, solverStats0.getLearnedclauses());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incIgnoredclauses();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(1L, solverStats0.getIgnoredclauses());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incPropagations();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(1L, solverStats0.getPropagations());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incInspects();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(15);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0);
      solverStats0.printStat(mockPrintWriter0, "Bh6C{k1");
      assertEquals(1L, solverStats0.getInspects());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReducedliterals(2832);
      long long0 = solverStats0.getReducedliterals();
      assertEquals(2832L, long0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReducedliterals((-1));
      long long0 = solverStats0.getReducedliterals();
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incImportedUnits((-1));
      int int0 = solverStats0.getImportedUnits();
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      // Undeclared exception!
      try { 
        solverStats0.printStat((PrintWriter) null, " b2=R97*4Oyq*tu6w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.SolverStats", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      int int0 = solverStats0.getStarts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      Map<String, Number> map0 = solverStats0.toMap();
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getChangedreason();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getReducedliterals();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incRootSimplifications();
      long long0 = solverStats0.getRootSimplifications();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incChangedreason();
      long long0 = solverStats0.getChangedreason();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedliterals();
      long long0 = solverStats0.getLearnedliterals();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getLearnedternaryclauses();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedbinaryclauses();
      long long0 = solverStats0.getLearnedbinaryclauses();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getUpdateLBD();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getDecisions();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedclauses();
      long long0 = solverStats0.getLearnedclauses();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getInspects();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incStarts();
      int int0 = solverStats0.getStarts();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.reset();
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getReducedliterals());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getPropagations();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incImportedUnits(1283);
      int int0 = solverStats0.getImportedUnits();
      assertEquals(1283, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getConflicts();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getIgnoredclauses();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getLearnedbinaryclauses();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReducedliterals((-1521));
      MockFile mockFile0 = new MockFile("Calls to reduceDB\t: ");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      solverStats0.printStat(mockPrintWriter0, "");
      assertEquals((-1521L), solverStats0.getReducedliterals());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incInspects();
      long long0 = solverStats0.getInspects();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incConflicts();
      long long0 = solverStats0.getConflicts();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incShortcuts();
      int int0 = solverStats0.getShortcuts();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      int int0 = solverStats0.getReduceddb();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incIgnoredclauses();
      long long0 = solverStats0.getIgnoredclauses();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getLearnedclauses();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incPropagations();
      long long0 = solverStats0.getPropagations();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incUpdateLBD();
      long long0 = solverStats0.getUpdateLBD();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      int int0 = solverStats0.getShortcuts();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incDecisions();
      long long0 = solverStats0.getDecisions();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      int int0 = solverStats0.getImportedUnits();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getLearnedliterals();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      long long0 = solverStats0.getRootSimplifications();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incLearnedternaryclauses();
      long long0 = solverStats0.getLearnedternaryclauses();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SolverStats solverStats0 = new SolverStats();
      solverStats0.incReduceddb();
      int int0 = solverStats0.getReduceddb();
      assertEquals(1, int0);
  }
}
