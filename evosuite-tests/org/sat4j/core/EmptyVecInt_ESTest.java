/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 01:32:21 GMT 2019
 */

package org.sat4j.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.EmptyVecInt;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.IteratorInt;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EmptyVecInt_ESTest extends EmptyVecInt_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.copyTo((IVecInt) null);
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      boolean boolean0 = emptyVecInt0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      Object object0 = new Object();
      boolean boolean0 = emptyVecInt0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.toArray();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt iVecInt0 = emptyVecInt0.clone();
      assertNotSame(iVecInt0, emptyVecInt0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.clear();
      assertEquals("[]", emptyVecInt0.toString());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.moveTo((-3219), (int[]) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.moveTo(315, 1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.set(0, 0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(emptyVecInt0);
      boolean boolean0 = emptyVecInt0.equals(readOnlyVecInt0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.delete((-1));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.copyTo((int[]) null);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.pop();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.insertFirst((-845));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IteratorInt iteratorInt0 = emptyVecInt0.iterator();
      assertNotNull(iteratorInt0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.push(2454);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.last();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.hashCode();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.moveTo((IVecInt) emptyVecInt0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.ensure(0);
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.growTo((-418), (-418));
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.containsAt((-1092), (-1092));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int[] intArray0 = new int[1];
      emptyVecInt0.moveTo(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.remove((-1658));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.containsAt(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.shrink(0);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      IVecInt[] iVecIntArray0 = emptyVecInt0.subset(2);
      assertEquals(0, iVecIntArray0.length);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      String string0 = emptyVecInt0.toString();
      assertEquals("[]", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.shrinkTo(1987);
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = emptyVecInt0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      boolean boolean0 = emptyVecInt0.contains((-3285));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.get(934);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.sortUnique();
      assertEquals(0, emptyVecInt0.size());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.moveTo2(emptyVecInt0);
      assertEquals("[]", emptyVecInt0.toString());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      int int0 = emptyVecInt0.indexOf((-2369));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      emptyVecInt0.sort();
      assertTrue(emptyVecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.unsafeGet(1);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      emptyVecInt0.sort(comparator0);
      assertEquals("[]", emptyVecInt0.toString());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EmptyVecInt emptyVecInt0 = new EmptyVecInt();
      // Undeclared exception!
      try { 
        emptyVecInt0.unsafePush(5);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.EmptyVecInt", e);
      }
  }
}
