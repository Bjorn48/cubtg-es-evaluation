/*
 * This file was automatically generated by EvoSuite
 * Sun Feb 17 13:03:31 GMT 2019
 */

package org.sat4j.minisat.constraints.card;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.UserFixedPhaseSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.specs.VarMapper;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DotSearchTracing;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinWatchCard_ESTest extends MinWatchCard_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(3);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      minWatchCard0.undo(3);
      minWatchCard0.undo(1);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(1361, 58);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1438));
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, (-1438));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1361
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(3423);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1443));
      minWatchCard0.calcReasonOnTheFly((-32), vecInt0, vecInt0);
      assertEquals((-1443), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, true, (-1));
      boolean boolean0 = minWatchCard0.equals(minWatchCard1);
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      assertFalse(boolean0);
      assertEquals((-1), minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(1361, 58);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1438));
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals((-1438), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(20);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 11);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(20);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 1350);
      minWatchCard0.remove(solver0);
      assertEquals((-1350), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(3);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, varOrderHeap0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, (-547));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(1361, 58);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1438));
      minWatchCard0.calcReason((-589), vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 0);
      minWatchCard0.undo(0);
      minWatchCard0.computeWatches();
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(12);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(12);
      SearchParams searchParams0 = new SearchParams(1, 0.0, 0.0, 12);
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      minWatchCard0.assertConstraint(solver0);
      minWatchCard0.toConstraint();
      assertTrue(minWatchCard0.simplify());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(1361, 65535);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-430));
      minWatchCard0.size();
      assertEquals((-430), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 0);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, false, 1350);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals((-1350), int0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      int int0 = MinWatchCard.linearisation(lits0, vecInt0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 0);
      minWatchCard0.getVocabulary();
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.getFromPool(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 2);
      minWatchCard0.getVocabulary();
      assertEquals(2, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      lits0.nextFreeVarId(true);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 2);
      minWatchCard0.getVocabulary();
      assertEquals(2, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      VecInt vecInt0 = new VecInt(1, (-1262));
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 1);
      minWatchCard0.getLits();
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      vecInt0.pushAll(vecInt0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 3);
      assertEquals(2, minWatchCard0.size());
      
      int int0 = minWatchCard0.get(1);
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(0);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 1);
      int int0 = minWatchCard0.get(0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-430));
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, miniSATRestarts0);
      ILits iLits0 = solver0.getVocabulary();
      VecInt vecInt0 = new VecInt(1361, 58);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1438));
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals((-1438), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 0);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>((-599));
      minWatchCard0.undo(3598);
      PureOrder pureOrder0 = new PureOrder((-570));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, lubyRestarts0);
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals(0, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(12);
      minWatchCard0.undo(12);
      minWatchCard0.undo(50);
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, naturalStaticOrder0, eMARestarts0);
      MinWatchCard minWatchCard1 = minWatchCard0.computePropagation(solver0);
      assertEquals(1, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertNotNull(minWatchCard1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-931));
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, (-931));
      DotSearchTracing<LexicoDecorator<ModelIterator>> dotSearchTracing0 = new DotSearchTracing<LexicoDecorator<ModelIterator>>("Not implemented yet!");
      // Undeclared exception!
      try { 
        minWatchCard0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-630));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-630));
      DotSearchTracing<LexicoDecorator<ModelIterator>> dotSearchTracing0 = new DotSearchTracing<LexicoDecorator<ModelIterator>>("/q!E}%|GT");
      // Undeclared exception!
      try { 
        minWatchCard0.toString((VarMapper) dotSearchTracing0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -630
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(12);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1086);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1086);
      // Undeclared exception!
      try { 
        minWatchCard0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1086
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-7));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-7));
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(Integer.MIN_VALUE);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 8);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      PureOrder pureOrder0 = new PureOrder(1);
      LubyRestarts lubyRestarts0 = new LubyRestarts(Integer.MIN_VALUE);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, pureOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483647
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(413);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 413);
      // Undeclared exception!
      try { 
        minWatchCard0.register();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, iLits0, readOnlyVecInt0, true, (-1051));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, varOrderHeap0, fixedPeriodRestarts0);
      IVecInt iVecInt0 = vecInt0.pop();
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew(solver0, lits0, iVecInt0, true, (-2328));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-2649));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(640);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, (-1088));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation((ILits) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(5423);
      // Undeclared exception!
      try { 
        MinWatchCard.linearisation(lits0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5423
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1086);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1086);
      // Undeclared exception!
      try { 
        minWatchCard0.computeWatches();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = new VecInt(286, 286);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt1, 48);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReason(4409, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(3);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      minWatchCard0.undo(3);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-733));
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, (-733));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1358);
      LubyRestarts lubyRestarts0 = new LubyRestarts((-733));
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push((-5719));
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, (-1));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(422);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(2137);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, varOrderHeap0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraint(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5719
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, false, 2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, (IVecInt) null, true, (-1190));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.pop();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, iVecInt0, false, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(vecInt0);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, readOnlyVecInt0, (-2828));
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.ReadOnlyVecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard((ILits) null, (IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.pop();
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.shrinkTo(1147);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 3);
      minWatchCard0.normalize();
      assertEquals(3, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 821);
      minWatchCard0.size();
      assertEquals((-821), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push(3);
      vecInt1.pushAll(vecInt0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, 1);
      DotSearchTracing<LexicoDecorator<ModelIterator>> dotSearchTracing0 = new DotSearchTracing<LexicoDecorator<ModelIterator>>("@");
      String string0 = minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals("-1[?] -1[?] >= 1", string0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.toString((VarMapper) null);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      DotSearchTracing<LexicoDecorator<ModelIterator>> dotSearchTracing0 = new DotSearchTracing<LexicoDecorator<ModelIterator>>(">= ");
      minWatchCard0.toString((VarMapper) dotSearchTracing0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      vecInt0.unsafePush(1);
      int int0 = minWatchCard0.getAssertionLevel(vecInt0, 50);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.push((-162));
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-162));
      // Undeclared exception!
      try { 
        minWatchCard0.getAssertionLevel((IVecInt) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      VecInt vecInt1 = (VecInt)vecInt0.push(3);
      vecInt1.pushAll(vecInt0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt1, 1);
      minWatchCard0.undo(3);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy(comparator0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(3);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      WatcherBasedPrimeImplicantStrategy watcherBasedPrimeImplicantStrategy0 = new WatcherBasedPrimeImplicantStrategy();
      // Undeclared exception!
      try { 
        minWatchCard0.propagatePI(watcherBasedPrimeImplicantStrategy0, 2);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.push(48);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 48);
      minWatchCard0.undo(48);
      minWatchCard0.undo(1);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReasonOnTheFly(48, vecInt0, vecInt0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.undo(1);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.calcReasonOnTheFly((-1), vecInt0, vecInt0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4548, 4548);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 1326);
      minWatchCard0.hashCode();
      assertEquals(1326, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      MinWatchCard minWatchCard1 = new MinWatchCard(lits0, vecInt0, 48);
      boolean boolean0 = minWatchCard0.equals(minWatchCard1);
      assertEquals(48, minWatchCard1.requiredNumberOfSatisfiedLiterals());
      assertFalse(minWatchCard1.equals((Object)minWatchCard0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      boolean boolean0 = minWatchCard0.equals(minWatchCard0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      boolean boolean0 = minWatchCard0.equals((Object) null);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-1808));
      boolean boolean0 = minWatchCard0.equals(vecInt0);
      assertFalse(boolean0);
      assertEquals((-1808), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 10);
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(12);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(12);
      minWatchCard0.undo(12);
      PureOrder pureOrder0 = new PureOrder(12);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(pureOrder0, (-599));
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, fixedPeriodRestarts0);
      minWatchCard0.computePropagation(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      assertTrue(minWatchCard0.simplify());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(12);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      minWatchCard0.undo(12);
      // Undeclared exception!
      try { 
        minWatchCard0.computePropagation((UnitPropagationListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 1);
      minWatchCard0.register();
      assertEquals((-1), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.undo(1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(2822);
      PureOrder pureOrder0 = new PureOrder();
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, pureOrder0, fixedPeriodRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.assertConstraintIfNeeded(solver0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, true, 0);
      SearchParams searchParams0 = new SearchParams(0, 1086);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, (ILogAble) null);
      minWatchCard0.assertConstraintIfNeeded(solver0);
      assertEquals(0, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.assertConstraintIfNeeded((UnitPropagationListener) null);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(20, 1);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, (-1067));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(0);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts(20);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(11, 11);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 11);
      String string0 = minWatchCard0.toString();
      assertEquals("-x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] -x5[?] >= 11", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.toString();
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(20);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, (-8));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(20);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      minWatchCard0.assertConstraint(solver0);
      assertEquals(1, solver0.getPropagationLevel());
      
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(20);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(20);
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0);
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, randomWalkDecorator0, eMARestarts0);
      minWatchCard0.assertConstraint(solver0);
      boolean boolean0 = minWatchCard0.simplify();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      boolean boolean0 = minWatchCard0.simplify();
      assertFalse(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, iVecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.simplify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(3);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, iVecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      PureOrder pureOrder0 = new PureOrder(92);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, pureOrder0, lubyRestarts0);
      // Undeclared exception!
      try { 
        minWatchCard0.remove(solver0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1);
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      PureOrder pureOrder0 = new PureOrder(82);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, pureOrder0, lubyRestarts0);
      minWatchCard0.remove(solver0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      IVecInt iVecInt0 = vecInt0.push(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, 3);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(3);
      SearchParams searchParams0 = new SearchParams();
      PureOrder pureOrder0 = new PureOrder();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, pureOrder0, glucose21Restarts0, iLogAble0);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate(solver0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.undo(1);
      // Undeclared exception!
      try { 
        minWatchCard0.propagate((UnitPropagationListener) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      Constr constr0 = MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, true, (-1));
      assertNull(constr0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(2695.9596, (-2328));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts((-1772));
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      MinWatchCard.minWatchCardNew(solver0, lits0, vecInt0, true, 1);
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      vecInt0.unsafePush(1);
      // Undeclared exception!
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      try { 
        MinWatchCard.minWatchCardNew((UnitPropagationListener) null, lits0, vecInt0, false, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      minWatchCard0.calcReason((-1), vecInt0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt(11, 1081);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 2);
      // Undeclared exception!
      try { 
        minWatchCard0.calcReason(1776, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt(1780, 1780);
      MinWatchCard minWatchCard0 = null;
      try {
        minWatchCard0 = new MinWatchCard(iLits0, vecInt0, false, (-214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1781
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, false, 3);
      // Undeclared exception!
      try { 
        minWatchCard0.setLearnt();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 49);
      boolean boolean0 = minWatchCard0.learnt();
      assertFalse(boolean0);
      assertEquals(49, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1);
      minWatchCard0.incActivity(1);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Lits lits0 = new Lits();
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      UserFixedPhaseSelectionStrategy userFixedPhaseSelectionStrategy0 = new UserFixedPhaseSelectionStrategy();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(userFixedPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(3673);
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, levelBasedVarOrderHeap0, lubyRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, iVecInt0, 3673);
      minWatchCard0.setActivity((-3205.517201824244));
      assertEquals(3673, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 18);
      // Undeclared exception!
      try { 
        minWatchCard0.isSatisfied();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VecInt vecInt0 = new VecInt(4548, 4548);
      MinWatchCard minWatchCard0 = new MinWatchCard((ILits) null, vecInt0, 1326);
      double double0 = minWatchCard0.getActivity();
      assertEquals(1326, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, (-51));
      boolean boolean0 = minWatchCard0.canBeSatisfiedByCountingLiterals();
      assertTrue(boolean0);
      assertEquals((-51), minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 2477);
      boolean boolean0 = minWatchCard0.locked();
      assertEquals(2477, minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 17);
      int int0 = minWatchCard0.requiredNumberOfSatisfiedLiterals();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1);
      minWatchCard0.forwardActivity(244.16822433865);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 17);
      Constr constr0 = minWatchCard0.toConstraint();
      assertEquals(17, constr0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      // Undeclared exception!
      try { 
        minWatchCard0.get(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 1);
      boolean boolean0 = minWatchCard0.canBePropagatedMultipleTimes();
      assertFalse(boolean0);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Lits lits0 = new Lits();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(lits0, vecInt0, 4362);
      minWatchCard0.getLits();
      assertEquals(4362, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      ILits iLits0 = cardinalityDataStructure0.getVocabulary();
      VecInt vecInt0 = new VecInt();
      MinWatchCard minWatchCard0 = new MinWatchCard(iLits0, vecInt0, 1);
      minWatchCard0.rescaleBy(3);
      assertEquals(1, minWatchCard0.requiredNumberOfSatisfiedLiterals());
  }
}
