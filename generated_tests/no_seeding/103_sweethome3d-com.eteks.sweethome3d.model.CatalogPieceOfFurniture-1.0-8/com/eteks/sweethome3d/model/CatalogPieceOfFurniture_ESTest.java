/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 22:29:48 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CatalogPieceOfFurniture_ESTest extends CatalogPieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("l:OL8Kw{<FZ_", (Content) null, (Content) null, (-0.9401168F), (-0.9401168F), (-0.9401168F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("l:OL8Kw{<FZ_", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, (-1662.416F), 1358.748F, (-0.9401168F), true, true);
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertNotNull(catalogPieceOfFurniture1);
      assertEquals((-0.9401168F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals((-1662.416F), catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals(1358.748F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getInformation());
      
      int int0 = catalogPieceOfFurniture0.compareTo(catalogPieceOfFurniture1);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(catalogPieceOfFurniture1, catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("l:OL8Kw{<FZ_", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.9401168F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isMovable());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertEquals((-1662.416F), catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture1.getName());
      assertNull(catalogPieceOfFurniture1.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertEquals(1358.748F, catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer((-587));
      assertNotNull(integer0);
      assertEquals((-587), (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("hhW7,#}C", (Content) null, (Content) null, (-1.1526812F), (-2361.2F), (-1.0F), 1.0F, false, false, integer0, (float[][]) null, false, (-2361.2F), false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      boolean boolean0 = catalogPieceOfFurniture0.isTexturable();
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("l:OL8Kw{<FZ_", (Content) null, (Content) null, (-0.9401168F), (-0.9401168F), (-0.9401168F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("l:OL8Kw{<FZ_", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      
      boolean boolean0 = catalogPieceOfFurniture0.isResizable();
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("l:OL8Kw{<FZ_", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-0.9401168F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Integer integer0 = new Integer((-587));
      assertNotNull(integer0);
      assertEquals((-587), (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("hhW7,#}C", (Content) null, (Content) null, 0.0F, (-2397.4014F), (-1.0F), 1.0F, false, false, integer0, (float[][]) null, false, (-2397.4014F), false);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2397.4014F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2397.4014F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isProportional();
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-2397.4014F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2397.4014F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      
      float[][] floatArray0 = new float[8][5];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EN\u0007[}<8Z>Yh!YxS~C", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 627.86884F, 627.86884F, 627.86884F, 2128.4563F, true, "EN\u0007[}<8Z>Yh!YxS~C", floatArray0, "EN\u0007[}<8Z>Yh!YxS~C", false, false, false, (BigDecimal) null, (BigDecimal) null, (String) null);
      assertEquals(8, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getCreator());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(2128.4563F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean0 = catalogPieceOfFurniture0.isMovable();
      assertEquals(8, floatArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getCreator());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(2128.4563F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-587));
      assertNotNull(bigDecimal0);
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short) (-587), bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "applicationSubFolder.Mac OS X", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.0F, 0.0F, 599.59F, 599.59F, false, false, (float[][]) null, "W#1;G.]x`]pDJm}:4,x", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      boolean boolean0 = catalogPieceOfFurniture0.isModifiable();
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-587));
      assertNotNull(integer0);
      assertEquals((-587), (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-1.0F), 3653.7F, (-1.0F), 587.123F, false, true, integer0, (float[][]) null, false, 0.0F, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(3653.7F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(587.123F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      boolean boolean0 = catalogPieceOfFurniture0.isDeformable();
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(3653.7F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-587), (int)catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(587.123F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[8][5];
      Integer integer0 = new Integer(2042);
      assertNotNull(integer0);
      assertEquals(2042, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q\"J^ nE?", resourceURLContent0, resourceURLContent0, 0.0F, (-1.0F), 1.0F, 4273.29F, false, true, integer0, floatArray0, true, 0.0F, true);
      assertEquals(8, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(4273.29F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      boolean boolean0 = catalogPieceOfFurniture0.isBackFaceShown();
      assertEquals(8, floatArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(4273.29F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("A_ZWR1F*~u", resourceURLContent0, resourceURLContent0, 1.0F, 2166.0F, (-394.83F), true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("A_ZWR1F*~u", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      
      float float0 = catalogPieceOfFurniture0.getWidth();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("A_ZWR1F*~u", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.39488783F, 0.39488783F, 0.39488783F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      BigDecimal bigDecimal0 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertNull(bigDecimal0);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.39488783F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("Unknown resource ", ">RKTU+,{ZZxf+<", (-1), ">RKTU+,{ZZxf+<", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.toString());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getPath());
      assertEquals("unknown resource ", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNotNull(resourceURLContent0);
      assertNull(uRL0.toString());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getPath());
      assertEquals("unknown resource ", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[6];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Unknown resource ", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "GiZ<", resourceURLContent0, resourceURLContent0, (-1), (-1), (-1), 1198.1F, true, true, floatArray0, "Unknown resource ", true, bigDecimal0, bigDecimal0);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.toString());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getPath());
      assertEquals("unknown resource ", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1198.1F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertEquals("Unknown resource ", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("GiZ<", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertEquals(7, floatArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertNull(uRL0.toString());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getPath());
      assertEquals("unknown resource ", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.toExternalForm());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals(">RKTU+,{ZZxf+<", uRL0.getFile());
      assertEquals(0, uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1198.1F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("Unknown resource ", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getName());
      assertEquals("Unknown resource ", catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("GiZ<", catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      Float float0 = new Float((-1000.676F));
      assertNotNull(float0);
      assertEquals((-1000.676F), (float)float0, 0.01F);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      float[][] floatArray0 = new float[8][2];
      float[] floatArray1 = new float[7];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = new BigDecimal((-1));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", "@-rYZXaNu0-:1y>;G", "@-rYZXaNu0-:1y>;G", "F", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 0.0F, 0.0F, (-1.0F), 2283.5835F, false, " doesn't contain piece ", floatArray0, "VZ_", true, true, false, bigDecimal0, bigDecimal0, "F");
      assertEquals(0, stringArray0.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2283.5835F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("@-rYZXaNu0-:1y>;G", catalogPieceOfFurniture0.getName());
      assertEquals("VZ_", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(" doesn't contain piece ", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("F", catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1000.676F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertEquals(0L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("F", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("@-rYZXaNu0-:1y>;G", catalogPieceOfFurniture0.getDescription());
      assertEquals("F", catalogPieceOfFurniture0.getCurrency());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getValueAddedTaxPercentage();
      assertEquals(0, stringArray0.length);
      assertEquals(8, floatArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2283.5835F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("@-rYZXaNu0-:1y>;G", catalogPieceOfFurniture0.getName());
      assertEquals("VZ_", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(" doesn't contain piece ", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("F", catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-1000.676F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertEquals(0L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("F", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("@-rYZXaNu0-:1y>;G", catalogPieceOfFurniture0.getDescription());
      assertEquals("F", catalogPieceOfFurniture0.getCurrency());
      assertEquals((byte) (-1), bigDecimal1.byteValue());
      assertEquals((short) (-1), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.tools.OperatingSystem", (Content) null, (Content) null, (-0.38254833F), (-0.38254833F), (-0.38254833F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      
      String string0 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertNull(string0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<CatalogPieceOfFurniture> class0 = CatalogPieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertNotNull(temporaryURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      float[][] floatArray0 = new float[5][7];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Oo@Op5k", temporaryURLContent0, temporaryURLContent0, 0.0F, (-2789.6F), (-1.0F), 0.0F, false, "Can't create temporary folder ", integer0, floatArray0, true, (-1.0F), false);
      assertEquals(5, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("Oo@Op5k", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2789.6F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("Can't create temporary folder ", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      String string0 = catalogPieceOfFurniture0.getStaircaseCutOutShape();
      assertEquals(5, floatArray0.length);
      assertNotNull(string0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("Oo@Op5k", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-2789.6F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("Can't create temporary folder ", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("Can't create temporary folder ", string0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[7][4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("$D5Qk", "`}k<$^j!H.!Fu", "`}k<$^j!H.!Fu", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1081.142F), (-1081.142F), 0.0F, 0.0F, false, floatArray0, "`}k<$^j!H.!Fu", false, true, true, bigDecimal0, bigDecimal0);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("$D5Qk", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getCreator());
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getDescription());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertEquals(7, floatArray0.length);
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("$D5Qk", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getCreator());
      assertEquals("`}k<$^j!H.!Fu", catalogPieceOfFurniture0.getDescription());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-587));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "applicationSubFolder.Mac OS X", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.0F, 0.0F, 599.59F, 599.59F, false, false, (float[][]) null, "W#1;G.]x`]pDJm}:4,x", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      BigDecimal bigDecimal1 = catalogPieceOfFurniture0.getPrice();
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((byte) (-75), bigDecimal1.byteValue());
      assertEquals((short) (-587), bigDecimal1.shortValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("#oWFGzNV", (Content) null, (Content) null, 0.0F, (-1081.142F), (-1081.142F), false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("#oWFGzNV", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      Content content0 = catalogPieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("#oWFGzNV", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[7][9];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("os.version", (String) null, (String) null, (Content) null, (Content) null, (Content) null, (-2361.2F), 0.0F, 0.0F, 0.0F, true, floatArray0, "", false, true, true, bigDecimal0, bigDecimal0);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("os.version", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertEquals(7, floatArray0.length);
      assertNull(string0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("os.version", catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-", (Content) null, (Content) null, (-0.38254833F), (-0.38254833F), (-0.38254833F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("-", catalogPieceOfFurniture0.getName());
      
      String string0 = catalogPieceOfFurniture0.getName();
      assertNotNull(string0);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("-", catalogPieceOfFurniture0.getName());
      assertEquals("-", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EN\u0007[}<8Z>Yh!YxS~C", temporaryURLContent0, temporaryURLContent0, 627.86884F, 1.0F, 1.0F, true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getName());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      TemporaryURLContent temporaryURLContent1 = (TemporaryURLContent)catalogPieceOfFurniture0.getModel();
      assertNotNull(temporaryURLContent1);
      assertSame(temporaryURLContent0, temporaryURLContent1);
      assertSame(temporaryURLContent1, temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getName());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(temporaryURLContent1.isJAREntry());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Long long0 = new Long((-587));
      assertNotNull(long0);
      assertEquals((-587L), (long)long0);
      
      Float float0 = new Float((-2361.2F));
      assertNotNull(float0);
      assertEquals((-2361.2F), (float)float0, 0.01F);
      
      BigInteger bigInteger0 = BigInteger.ONE;
      assertNotNull(bigInteger0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertNotNull(bigDecimal0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", "hhW7,#}C", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 0.0F, (-5491.0F), (-5491.0F), (-463.0F), false, "", (float[][]) null, (String) null, false, false, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.io.HomeURLContent");
      assertEquals(1, stringArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-5491.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-587L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-5491.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getInformation());
      assertEquals((-463.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      
      String string0 = catalogPieceOfFurniture0.getInformation();
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals((short)1, bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-5491.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-587L), (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2361.2F), catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-5491.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getInformation());
      assertEquals((-463.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("hhW7,#}C", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[3][7];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("ZwZMUEzS0", resourceURLContent0, resourceURLContent0, (-823.734F), (-1.0F), 1989.419F, 1475.01F, false, "ZwZMUEzS0", (Integer) null, floatArray0, false, 1.0F, false);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-823.734F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1475.01F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1989.419F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("ZwZMUEzS0", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("ZwZMUEzS0", catalogPieceOfFurniture0.getName());
      
      String string0 = catalogPieceOfFurniture0.getId();
      assertEquals(3, floatArray0.length);
      assertNull(string0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-823.734F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertEquals(1475.01F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1989.419F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("ZwZMUEzS0", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("ZwZMUEzS0", catalogPieceOfFurniture0.getName());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String[] stringArray0 = new String[1];
      Float float0 = new Float((float) 34);
      assertNotNull(float0);
      assertEquals(34.0F, (float)float0, 0.01F);
      
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertNotNull(bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("=\"y", "", "=\"y", "F", stringArray0, (Long) null, float0, (Content) null, (Content) null, (Content) null, 34, 1.0F, (-1929.75F), (-1929.75F), false, "com.eteks.sweethome3d.tools.temporarySubFolder", (float[][]) null, "=\"y", true, true, true, bigDecimal0, bigDecimal0, "q38iP");
      assertEquals(1, stringArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1929.75F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1929.75F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(34.0F, catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("=\"y", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("=\"y", catalogPieceOfFurniture0.getDescription());
      assertEquals("F", catalogPieceOfFurniture0.getInformation());
      assertEquals(34.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("=\"y", catalogPieceOfFurniture0.getCreator());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("q38iP", catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getId();
      assertEquals(1, stringArray0.length);
      assertNotNull(string0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1929.75F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-1929.75F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(34.0F, catalogPieceOfFurniture0.getGrade(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("=\"y", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("com.eteks.sweethome3d.tools.temporarySubFolder", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("=\"y", catalogPieceOfFurniture0.getDescription());
      assertEquals("F", catalogPieceOfFurniture0.getInformation());
      assertEquals(34.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("=\"y", catalogPieceOfFurniture0.getCreator());
      assertEquals(1.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("q38iP", catalogPieceOfFurniture0.getCurrency());
      assertEquals("=\"y", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      float float0 = catalogPieceOfFurniture0.getIconYaw();
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.3926991F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer((-630));
      assertNotNull(integer0);
      assertEquals((-630), (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("hhW7,#}C", (Content) null, (Content) null, 1.0F, (-630), (-587), (-587), true, true, integer0, (float[][]) null, true, (-1.1526812F), false);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-630), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-630.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-587.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-587.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getIconYaw();
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-630), (int)catalogPieceOfFurniture0.getColor());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-630.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-587.0F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-587.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-1.1526812F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("10.4", resourceURLContent0, resourceURLContent0, 627.86884F, (-2331.86F), 0.0F, true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("10.4", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2331.86F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)catalogPieceOfFurniture0.getIcon();
      assertNotNull(resourceURLContent1);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("10.4", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(627.86884F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-2331.86F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(resourceURLContent1.isJAREntry());
      assertFalse(resourceURLContent1.isMultiPartResource());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[6];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertNotNull(bigDecimal0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, 0.0F, false, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
      assertEquals(8, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      
      float float0 = catalogPieceOfFurniture0.getHeight();
      assertEquals(8, floatArray0.length);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-", (Content) null, (Content) null, (-218.0F), 15.960967F, 15.960967F, true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(15.960967F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("-", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(15.960967F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-218.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      float float0 = catalogPieceOfFurniture0.getHeight();
      assertEquals(15.960967F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("-", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(15.960967F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-218.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(15.960967F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      Float float0 = catalogPieceOfFurniture0.getGrade();
      assertNull(float0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(2962);
      assertNotNull(integer0);
      assertEquals(2962, (int)integer0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("g*", uRLContent0, uRLContent0, 2962, (-1), (-1981.886F), 0.0F, false, false, integer0, (float[][]) null, false, 0.0F, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1981.886F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2962, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2962.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("g*", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      float float0 = catalogPieceOfFurniture0.getElevation();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("file", uRL0.getProtocol());
      assertEquals("some", uRL0.getHost());
      assertEquals("some", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1981.886F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2962, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2962.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("g*", catalogPieceOfFurniture0.getName());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[7][4];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", "Windows", "", (Content) null, (Content) null, 2817.49F, (-3457.02F), (-3457.02F), (-2013.65F), true, true, floatArray0, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", true, (BigDecimal) null, (BigDecimal) null);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2817.49F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("Windows", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals((-3457.02F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2013.65F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-3457.02F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      
      float float0 = catalogPieceOfFurniture0.getElevation();
      assertEquals(7, floatArray0.length);
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2817.49F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("Windows", catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals((-3457.02F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals((-2013.65F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-3457.02F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-2013.65F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal((-587));
      assertNotNull(bigDecimal0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "applicationSubFolder.Mac OS X", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 0.0F, 0.0F, 599.59F, 599.59F, false, false, (float[][]) null, "W#1;G.]x`]pDJm}:4,x", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string0);
      assertEquals((short) (-587), bigDecimal0.shortValue());
      assertEquals((byte) (-75), bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(599.59F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("W#1;G.]x`]pDJm}:4,x", catalogPieceOfFurniture0.getCreator());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("applicationSubFolder.Mac OS X", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(599.59F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      BigDecimal bigDecimal0 = new BigDecimal(183.8954043739883);
      assertNotNull(bigDecimal0);
      assertEquals((short)183, bigDecimal0.shortValue());
      assertEquals((byte) (-73), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("hhW7,#}C", "applicationSubFolder.Windows", "", (Content) null, (Content) null, (-1.1526812F), 324.31F, 1.0F, 2033.186F, true, (float[][]) null, "applicationSubFolder.Windows", true, bigDecimal0, bigDecimal0);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((short)183, bigDecimal0.shortValue());
      assertEquals((byte) (-73), bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getId());
      assertEquals("applicationSubFolder.Windows", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2033.186F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("applicationSubFolder.Windows", catalogPieceOfFurniture0.getName());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals(324.31F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      String string0 = catalogPieceOfFurniture0.getDescription();
      assertNotNull(string0);
      assertEquals((short)183, bigDecimal0.shortValue());
      assertEquals((byte) (-73), bigDecimal0.byteValue());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.1526812F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals("hhW7,#}C", catalogPieceOfFurniture0.getId());
      assertEquals("applicationSubFolder.Windows", catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2033.186F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals("applicationSubFolder.Windows", catalogPieceOfFurniture0.getName());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertEquals(324.31F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[3][7];
      Integer integer0 = new Integer(2042);
      assertNotNull(integer0);
      assertEquals(2042, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q\"J^ nE?", resourceURLContent0, resourceURLContent0, 224.948F, 0.0F, 2166.0F, (-394.83F), true, false, integer0, floatArray0, true, (-394.83F), true);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      
      float float0 = catalogPieceOfFurniture0.getDepth();
      assertEquals(3, floatArray0.length);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EN\u0007[}<8Z>Yh!YxS~C", resourceURLContent0, resourceURLContent0, 2166.0F, (-1.4849182F), 0.0F, false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-1.4849182F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      float float0 = catalogPieceOfFurniture0.getDepth();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("EN\u0007[}<8Z>Yh!YxS~C", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-1.4849182F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-1.4849182F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("coC.eteks.sweefme3d.tools.OperatingSystem", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("coC.eteks.sweefme3d.tools.OperatingSystem", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      String string0 = catalogPieceOfFurniture0.getCurrency();
      assertNull(string0);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("coC.eteks.sweefme3d.tools.OperatingSystem", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-", (Content) null, (Content) null, (-0.38254833F), (-0.38254833F), (-0.38254833F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("-", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      
      String string0 = catalogPieceOfFurniture0.getCreator();
      assertNull(string0);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("-", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-0.38254833F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNotNull(resourceURLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[3][0];
      float[] floatArray1 = new float[3];
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertNotNull(bigDecimal0);
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, resourceURLContent0, (-1081.142F), 0.0F, 1295.0F, 0.0F, true, floatArray0, "]j>BL&.-G", false, bigDecimal0, bigDecimal0);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("]j>BL&.-G", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(1295.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      String string0 = catalogPieceOfFurniture0.getCreator();
      assertEquals(3, floatArray0.length);
      assertNotNull(string0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals("]j>BL&.-G", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals(1295.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals("", catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals("]j>BL&.-G", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[7][4];
      Integer integer0 = Integer.valueOf((-613));
      assertNotNull(integer0);
      assertEquals((-613), (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("0", (Content) null, (Content) null, (-1081.142F), 0.0F, (-1.0F), 0.0F, true, "0", integer0, floatArray0, false, 3033.25F, false);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("0", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("0", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-613), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(3033.25F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      
      Long long0 = catalogPieceOfFurniture0.getCreationDate();
      assertEquals(7, floatArray0.length);
      assertNotNull(long0);
      assertEquals((-1081.142F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("0", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("0", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-613), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(3033.25F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(1392409281320L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      Long long0 = catalogPieceOfFurniture0.getCreationDate();
      assertNull(long0);
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[3][7];
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q\"J^ nE?", resourceURLContent0, resourceURLContent0, 224.948F, 0.0F, 2166.0F, (-394.83F), true, false, integer0, floatArray0, true, (-394.83F), true);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      
      Integer integer1 = catalogPieceOfFurniture0.getColor();
      assertEquals(3, floatArray0.length);
      assertNotNull(integer1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0, (int)catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      assertNotNull(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      
      float[][] floatArray0 = new float[3][7];
      Integer integer0 = new Integer(2042);
      assertNotNull(integer0);
      assertEquals(2042, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q\"J^ nE?", resourceURLContent0, resourceURLContent0, 224.948F, 0.0F, 2166.0F, (-394.83F), true, false, integer0, floatArray0, true, (-394.83F), true);
      assertEquals(3, floatArray0.length);
      assertNotNull(catalogPieceOfFurniture0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      Integer integer1 = catalogPieceOfFurniture0.getColor();
      assertEquals(3, floatArray0.length);
      assertNotNull(integer1);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertEquals(224.948F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(2042, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(2166.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-394.83F), catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals("q\"J^ nE?", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(2042, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("", "", (-1), "", uRLStreamHandler0);
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, 2426.544F, (-1), (-1), true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(2426.544F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      
      Integer integer0 = catalogPieceOfFurniture0.getColor();
      assertNull(integer0);
      assertNull(uRL0.getQuery());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertEquals("", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals(0, uRL0.getDefaultPort());
      assertEquals("", uRL0.getPath());
      assertNull(uRL0.toString());
      assertEquals("", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("", uRL0.getFile());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(2426.544F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("F", (Content) null, (Content) null, 0.0F, 0.0F, 0.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("F", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      
      // Undeclared exception!
      try { 
        catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String[] stringArray0 = new String[0];
      Float float0 = new Float((-76.9));
      assertNotNull(float0);
      assertEquals((-76.9F), (float)float0, 0.01F);
      
      float[][] floatArray0 = new float[1][5];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, (String) null, (String) null, (String) null, stringArray0, (Long) null, float0, (Content) null, (Content) null, (Content) null, 1.0F, (-1149.4011F), 1.0F, (-1149.4011F), false, (String) null, floatArray0, (String) null, true, false, true, (BigDecimal) null, (BigDecimal) null, "p1");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      float[][] floatArray0 = new float[0][2];
      BigDecimal bigDecimal0 = new BigDecimal(3024.0F);
      assertNotNull(bigDecimal0);
      assertEquals((short)3024, bigDecimal0.shortValue());
      assertEquals((byte) (-48), bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q#Dd7,P=2+[ty", "q#Dd7,P=2+[ty", "\"4S~W", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 3024.0F, (-1.0F), 3024.0F, (-1.0F), true, floatArray0, "q#Dd7,P=2+[ty", true, true, true, bigDecimal0, bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[1][8];
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.FurnitureCategory", "com.eteks.sweethome3d.model.FurnitureCategory", "com.eteks.sweethome3d.model.FurnitureCategory", (Content) null, (Content) null, (Content) null, (-1.0F), (-1.0F), (-1.0F), (-1318.7F), false, floatArray0, (String) null, false, bigDecimal0, bigDecimal0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[0][2];
      BigDecimal bigDecimal0 = new BigDecimal(2);
      assertNotNull(bigDecimal0);
      assertEquals((byte)2, bigDecimal0.byteValue());
      assertEquals((short)2, bigDecimal0.shortValue());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", "", (Content) null, (Content) null, (Content) null, 2, 2, 2, 108.531F, false, "", floatArray0, "", false, true, false, bigDecimal0, bigDecimal0, "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[0][1];
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = null;
      try {
        catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", (Content) null, (Content) null, 1628.0F, 2321.0F, 1.0F, 2321.0F, false, floatArray0, "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", false, (BigDecimal) null, (BigDecimal) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }
}
