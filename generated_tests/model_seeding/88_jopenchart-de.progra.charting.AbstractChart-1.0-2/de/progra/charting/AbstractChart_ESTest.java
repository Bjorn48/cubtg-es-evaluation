/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 16:54:12 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.CoordSystem;
import de.progra.charting.DefaultChart;
import de.progra.charting.Legend;
import de.progra.charting.Title;
import de.progra.charting.model.ChartDataModel;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.EditableDataSet;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.AbstractChartRenderer;
import de.progra.charting.render.PieChartRenderer;
import de.progra.charting.render.PlotChartRenderer;
import de.progra.charting.render.RowColorModel;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.Rectangle2D;
import java.util.Hashtable;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChart_ESTest extends AbstractChart_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Title title0 = new Title();
      defaultChart0.setTitle(title0);
      assertEquals("Chart Title", title0.getText());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setRowColorModel((RowColorModel) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart((ChartDataModel) null, "", 1000);
      Legend legend0 = new Legend();
      defaultChart0.setLegend(legend0);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setCoordSystem((CoordSystem) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.setChartDataModel((ChartDataModel) null);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Title title0 = defaultChart0.getTitle();
      assertNull(title0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      RowColorModel rowColorModel0 = defaultChart0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, (String) null);
      RowColorModel rowColorModel0 = defaultChart0.getRowColorModel();
      assertEquals(0, rowColorModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[1];
      EditableDataSet editableDataSet0 = new EditableDataSet(0);
      editableDataSetArray0[0] = editableDataSet0;
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, (String) null);
      RowColorModel rowColorModel0 = defaultChart0.getRowColorModel();
      assertEquals(1, rowColorModel0.getRowCount());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[1];
      EditableDataSet editableDataSet0 = new EditableDataSet(0);
      editableDataSetArray0[0] = editableDataSet0;
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, "T");
      Legend legend0 = defaultChart0.getLegend();
      assertNotNull(legend0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(objectChartDataModel0, "X", 0, "X", "X");
      CoordSystem coordSystem0 = defaultChart0.getCoordSystem();
      assertEquals(1, CoordSystem.SECOND_YAXIS);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setManualScale(true);
      defaultChart0.model = (ChartDataModel) editableChartDataModel0;
      ChartDataModel chartDataModel0 = defaultChart0.getChartDataModel();
      assertEquals(0.0, chartDataModel0.getManualMinimumColumnValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(defaultChartDataModel0, "", 1);
      ChartDataModel chartDataModel0 = defaultChart0.getChartDataModel();
      assertSame(defaultChartDataModel0, chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.setChartRenderer((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.render((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.DefaultChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(objectChartDataModel0, "X", 0, "X", "X");
      defaultChart0.renderer = null;
      // Undeclared exception!
      try { 
        defaultChart0.getChartRenderer(15);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      // Undeclared exception!
      try { 
        defaultChart0.addChartRenderer((AbstractChartRenderer) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.AbstractChart", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[0];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      defaultChart0.addChartRenderer(pieChartRenderer0, 0);
      assertEquals(0, DefaultChart.LINEAR_X_LINEAR_Y);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(objectChartDataModel0, "X", 0, "X", "X");
      AbstractChartRenderer abstractChartRenderer0 = defaultChart0.getChartRenderer(15);
      assertNull(abstractChartRenderer0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Rectangle rectangle0 = defaultChart0.getBounds();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Legend legend0 = defaultChart0.getLegend();
      assertNull(legend0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[1];
      EditableDataSet editableDataSet0 = new EditableDataSet(0);
      editableDataSetArray0[0] = editableDataSet0;
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, "T");
      Map map0 = defaultChart0.getChartRenderer();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      defaultChart0.paintDefault((Graphics2D) null);
      assertEquals(1, DefaultChart.NO_COORDINATE_SYSTEM);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Hashtable<Object, PlotChartRenderer> hashtable0 = new Hashtable<Object, PlotChartRenderer>();
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0);
      PlotChartRenderer plotChartRenderer0 = new PlotChartRenderer(coordSystem0, editableChartDataModel0);
      hashtable0.put(defaultChart0, plotChartRenderer0);
      defaultChart0.setChartRenderer(hashtable0);
      assertEquals(1, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      DefaultChart defaultChart0 = new DefaultChart(objectChartDataModel0, "X", 0, "X", "X");
      Title title0 = defaultChart0.getTitle();
      assertEquals("X", title0.getText());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EditableDataSet[] editableDataSetArray0 = new EditableDataSet[1];
      EditableDataSet editableDataSet0 = new EditableDataSet(0);
      editableDataSetArray0[0] = editableDataSet0;
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(editableDataSetArray0);
      DefaultChart defaultChart0 = new DefaultChart(editableChartDataModel0, "de.progra.charting.model.ObjectChartDataModel");
      ChartDataModel chartDataModel0 = defaultChart0.getChartDataModel();
      assertEquals(1, chartDataModel0.getDataSetNumber());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      CoordSystem coordSystem0 = defaultChart0.getCoordSystem();
      assertNull(coordSystem0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      ChartDataModel chartDataModel0 = defaultChart0.getChartDataModel();
      assertNull(chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultChart defaultChart0 = new DefaultChart();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      defaultChart0.setBounds(rectangle0);
      Rectangle rectangle1 = defaultChart0.getBounds();
      assertEquals(0.0, rectangle1.getMinY(), 0.01);
  }
}
