/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 19:40:27 GMT 2019
 */

package org.sat4j.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.lang.reflect.Array;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.LexicoDecorator;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.SubModelIterator;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Minimal4CardinalityModel_ESTest extends Minimal4CardinalityModel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[6];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(subModelIterator0).isSatisfiable();
      doReturn((IConstr) null).when(subModelIterator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(intArray0).when(subModelIterator0).modelWithInternalVariables();
      doReturn(1, 1, 1).when(subModelIterator0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(subModelIterator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(maxSatDecorator0, solutionFoundListener0);
      int[] intArray1 = minimal4CardinalityModel0.model();
      assertNull(intArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[6];
      int[] intArray1 = new int[0];
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true, false).when(subModelIterator0).isSatisfiable();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(subModelIterator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray1, (Object) intArray0).when(subModelIterator0).modelWithInternalVariables();
      doReturn(1, 1, 1).when(subModelIterator0).nVars();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray1, (Object) intArray1).when(subModelIterator0).model();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, solutionFoundListener0);
      minimal4CardinalityModel0.modelWithInternalVariables();
      int[] intArray2 = minimal4CardinalityModel0.model();
      assertNotSame(intArray2, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[2] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, true).when(subModelIterator0).isSatisfiable();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null).when(subModelIterator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) null).when(subModelIterator0).modelWithInternalVariables();
      doReturn(1, 1, 1).when(subModelIterator0).nVars();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) null).when(subModelIterator0).model();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, solutionFoundListener0);
      minimal4CardinalityModel0.modelWithInternalVariables();
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[10];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, true, false, true).when(subModelIterator0).isSatisfiable();
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(subModelIterator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) null).when(subModelIterator0).modelWithInternalVariables();
      doReturn(1, 1, 1).when(subModelIterator0).nVars();
      doReturn((Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) intArray0, (Object) null).when(subModelIterator0).model();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, solutionFoundListener0);
      minimal4CardinalityModel0.modelWithInternalVariables();
      minimal4CardinalityModel0.modelWithInternalVariables();
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, solutionFoundListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-4)).when(subModelIterator0).nVars();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, solutionFoundListener0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      ClausalCardinalitiesDecorator<SubModelIterator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<SubModelIterator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 0);
      ManyCore<ClausalCardinalitiesDecorator<SubModelIterator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<SubModelIterator>>(clausalCardinalitiesDecoratorArray0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0, solutionFoundListener0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(lightFactory0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, (IVecInt) null, checkMUSSolutionListener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(dimacsOutputSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String[] stringArray0 = new String[6];
      ClausalCardinalitiesDecorator<SubModelIterator>[] clausalCardinalitiesDecoratorArray0 = (ClausalCardinalitiesDecorator<SubModelIterator>[]) Array.newInstance(ClausalCardinalitiesDecorator.class, 8);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn((-591)).when(subModelIterator0).nVars();
      ClausalCardinalitiesDecorator<SubModelIterator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<SubModelIterator>(subModelIterator0);
      clausalCardinalitiesDecoratorArray0[0] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[1] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[2] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[3] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[4] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[5] = clausalCardinalitiesDecorator0;
      clausalCardinalitiesDecoratorArray0[6] = clausalCardinalitiesDecoratorArray0[1];
      clausalCardinalitiesDecoratorArray0[7] = clausalCardinalitiesDecoratorArray0[0];
      ManyCore<ClausalCardinalitiesDecorator<SubModelIterator>> manyCore0 = new ManyCore<ClausalCardinalitiesDecorator<SubModelIterator>>(true, stringArray0, clausalCardinalitiesDecoratorArray0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = null;
      try {
        minimal4CardinalityModel0 = new Minimal4CardinalityModel(manyCore0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[6];
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      IVecInt iVecInt0 = mock(IVecInt.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(iVecInt0).size();
      Constr constr0 = mixedDataStructureDanielWLConciseBinary0.createUnregisteredClause(iVecInt0);
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(subModelIterator0).isSatisfiable();
      doReturn((IConstr) null, constr0).when(subModelIterator0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((Object) intArray0, (Object) intArray0).when(subModelIterator0).modelWithInternalVariables();
      doReturn(1, 1, 1).when(subModelIterator0).nVars();
      doReturn(false).when(subModelIterator0).removeConstr(any(org.sat4j.specs.IConstr.class));
      doReturn((Object) intArray0, (Object) intArray0).when(subModelIterator0).model();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(subModelIterator0, solutionFoundListener0);
      minimal4CardinalityModel0.modelWithInternalVariables();
      int[] intArray1 = minimal4CardinalityModel0.model();
      assertSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IVecInt iVecInt0 = VecInt.EMPTY;
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel((ISolver) null, iVecInt0, solutionFoundListener0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      VecInt vecInt0 = new VecInt();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(lexicoDecorator0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SubModelIterator subModelIterator0 = mock(SubModelIterator.class, new ViolatedAssumptionAnswer());
      doReturn(9, 9, 0).when(subModelIterator0).nVars();
      LexicoDecorator<SubModelIterator> lexicoDecorator0 = new LexicoDecorator<SubModelIterator>(subModelIterator0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(lexicoDecorator0);
      // Undeclared exception!
      try { 
        minimal4CardinalityModel0.model();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.Minimal4CardinalityModel", e);
      }
  }
}
