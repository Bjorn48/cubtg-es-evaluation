/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 29 13:44:58 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.TextStyle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Room_ESTest extends Room_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      room0.move(0.0F, (-1.0F));
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.containsPoint(1140.7754F, (-4278.743F), 0.0F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      float[][] floatArray0 = new float[9][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(9, floatArray0.length);
      
      boolean boolean0 = room0.containsPoint((-2196.0F), (-2196.0F), (-2196.0F));
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(9, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt((-546.7F), 1594, 1594);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setAreaYOffset((-1.0F));
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt((-181.4806F), 0.0F, 1069.165F);
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(6, floatArray0.length);
      
      room0.setAreaXOffset((-262.61096F));
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-262.61096F), room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(0.0F, (-2720.7F), 0.0F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-262.61096F), room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(6, room0.getPointCount());
      assertEquals(6, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(4, floatArray0.length);
      
      room0.move(1140.7754F, 7947.5F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(7947.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(1140.7754F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(2022.4258F, (-181.4806F), 1069.165F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(7947.5F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(1140.7754F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(897.1121F, (-431.0F), 1319.0F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(2, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setNameXOffset((-1.0F));
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt((-158.23F), 1.0F, 1.0F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 1.0F;
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(1140.7754F, 368.449F, (-683.95F));
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = room0.getPointIndexAt(40.0F, 0.0F, 599.6F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[2];
      floatArray1[1] = 1140.7754F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1140.7754F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(570.3877F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isClockwise();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(570.3877F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setAreaAngle(1.0F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setAreaAngle(0.0F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      float[][] floatArray0 = new float[10][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(10, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(10, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.removePoint(3532);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 3532
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      float[][] floatArray0 = new float[11][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(11, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(11, floatArray0.length);
      
      room0.setPoint(0.0F, 8, 8);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(11, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(11, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.move(368.449F, 0.0F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(368.449F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setPoint(167.58261F, 1267.1106F, 0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(268.0158F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(633.5553F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.setPoint(0.0F, 0.0F, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Invalid index 8
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      float[][] floatArray0 = new float[14][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(14, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(14, floatArray0.length);
      
      room0.setPoint(2857.7F, 0, 0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(1428.85F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(14, room0.getPointCount());
      assertEquals(14, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameAngle(1267.1106F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(4.190349F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameAngle(0.0F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setNameYOffset(1116.27F);
      assertEquals(1116.27F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setNameYOffset((-1));
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-1.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setName("com.eteks.sweethome3d.tools.TemporaryURLContent");
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
      
      room0.setName("com.eteks.sweethome3d.tools.TemporaryURLContent");
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.TemporaryURLContent", room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1140.7754F;
      floatArray1[1] = 1.0F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 1.0F;
      floatArray0[2] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 1140.7754F;
      floatArray0[3] = floatArray3;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isSingular();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      room0.setFloorVisible(false);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isFloorVisible();
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      
      room0.setAreaVisible(false);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isAreaVisible();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      float[] floatArray0 = new float[4];
      floatArray0[0] = 319.675F;
      float[][] floatArray1 = new float[8][3];
      floatArray1[0] = floatArray0;
      Room room0 = new Room(floatArray1);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(159.8375F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray1.length);
      
      boolean boolean0 = room0.intersectsRectangle(2.0F, (-2322.547F), 4310.181F, 319.675F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(159.8375F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray1.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      float[][] floatArray0 = new float[3][9];
      float[] floatArray1 = new float[4];
      floatArray1[1] = 1962.0F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(981.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      
      float float0 = room0.getYCenter();
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(981.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertEquals(3, floatArray0.length);
      assertEquals(981.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getYCenter();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-0.5F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1140.7754F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getXCenter();
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(570.3877F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(5, floatArray0.length);
      
      room0.move((-516.6895F), (-516.6895F));
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(5, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-516.6895F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals((-516.6895F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5, floatArray0.length);
      
      float float0 = room0.getXCenter();
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(5, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-516.6895F), room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertEquals((-516.6895F), room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5, floatArray0.length);
      assertEquals((-516.6895F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1140.7754F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(4, floatArray0.length);
      
      int int0 = room0.getPointIndexAt(1140.7754F, 1.0F, 1.0F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(4, floatArray0.length);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      
      room0.setNameYOffset(503.0F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(503.0F, room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(503.0F, room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      assertEquals(503.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setNameXOffset((-1.0F));
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getNameXOffset();
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      room0.setNameAngle((-40.0F));
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(3.9822972F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      float float0 = room0.getNameAngle();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(3.9822972F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals(3.9822972F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setName("*%YnVpN=Ub");
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals("*%YnVpN=Ub", room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      String string0 = room0.getName();
      assertNotNull(string0);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals("*%YnVpN=Ub", room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("*%YnVpN=Ub", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setName("");
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals("", room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      String string0 = room0.getName();
      assertNotNull(string0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals("", room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Level level0 = new Level("", (-95.0F), (-95.0F), (-95.0F));
      assertNotNull(level0);
      assertEquals((-95.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-95.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-95.0F), level0.getHeight(), 0.01F);
      
      room0.setLevel(level0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-95.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-95.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-95.0F), level0.getHeight(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-95.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-95.0F), level1.getHeight(), 0.01F);
      assertEquals((-95.0F), level1.getElevation(), 0.01F);
      assertTrue(level1.isVisible());
      assertSame(level1, level0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Level level0 = new Level("M!9FdAf", 4.124694F, 4.124694F, 4.124694F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(4.124694F, level0.getHeight(), 0.01F);
      assertEquals(4.124694F, level0.getElevation(), 0.01F);
      assertEquals(4.124694F, level0.getFloorThickness(), 0.01F);
      assertEquals("M!9FdAf", level0.getName());
      
      room0.setLevel(level0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(4.124694F, level0.getHeight(), 0.01F);
      assertEquals(4.124694F, level0.getElevation(), 0.01F);
      assertEquals(4.124694F, level0.getFloorThickness(), 0.01F);
      assertEquals("M!9FdAf", level0.getName());
      assertEquals(3, floatArray0.length);
      
      Level level1 = room0.getLevel();
      assertNotNull(level1);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(4.124694F, level1.getElevation(), 0.01F);
      assertEquals(4.124694F, level1.getHeight(), 0.01F);
      assertEquals(4.124694F, level1.getFloorThickness(), 0.01F);
      assertEquals("M!9FdAf", level1.getName());
      assertSame(level1, level0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(4, floatArray0.length);
      
      room0.setFloorShininess(1.0F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getFloorShininess();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      
      room0.setFloorShininess((-1068.0F));
      assertEquals((-1068.0F), room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getFloorShininess();
      assertEquals((-1068.0F), room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      assertEquals((-1068.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = Integer.valueOf(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      room0.setFloorColor(integer0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertNotNull(integer1);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0, (int)room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      assertEquals(0, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      float[][] floatArray0 = new float[3][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer integer0 = new Integer(2146383917);
      assertNotNull(integer0);
      assertEquals(2146383917, (int)integer0);
      
      room0.setFloorColor(integer0);
      assertNull(room0.getCeilingColor());
      assertEquals(2146383917, (int)room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertNotNull(integer1);
      assertNull(room0.getCeilingColor());
      assertEquals(2146383917, (int)room0.getFloorColor());
      assertFalse(room0.isClockwise());
      assertEquals(3, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(3, floatArray0.length);
      assertEquals(2146383917, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      float[][] floatArray0 = new float[2][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = new Integer((-1829));
      assertNotNull(integer0);
      assertEquals((-1829), (int)integer0);
      
      room0.setFloorColor(integer0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals((-1829), (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getFloorColor();
      assertNotNull(integer1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals((-1829), (int)room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals((-1829), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      
      room0.setCeilingShininess(1.0F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getCeilingShininess();
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(1.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(4, floatArray0.length);
      assertEquals(1.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer0 = Integer.valueOf(6);
      assertNotNull(integer0);
      assertEquals(6, (int)integer0);
      
      room0.setCeilingColor(integer0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(6, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Integer integer1 = room0.getCeilingColor();
      assertNotNull(integer1);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(6, (int)room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(6, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      room0.setAreaYOffset(532.7F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(532.7F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      float float0 = room0.getAreaYOffset();
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(532.7F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertEquals(532.7F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      
      room0.setAreaYOffset((-1.0F));
      assertNull(room0.getName());
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      
      float float0 = room0.getAreaYOffset();
      assertNull(room0.getName());
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(2, floatArray0.length);
      assertEquals((-1.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      float[][] floatArray0 = new float[3][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(3, floatArray0.length);
      
      TextStyle textStyle0 = new TextStyle(0.0F);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      room0.setAreaStyle(textStyle0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals(0.0F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(3, floatArray0.length);
      
      TextStyle textStyle1 = room0.getAreaStyle();
      assertNotNull(textStyle1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(3, room0.getPointCount());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isItalic());
      assertFalse(textStyle1.isBold());
      assertSame(textStyle1, textStyle0);
      assertEquals(3, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      TextStyle textStyle0 = new TextStyle(368.449F);
      assertNotNull(textStyle0);
      assertFalse(textStyle0.isItalic());
      assertEquals(368.449F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      
      room0.setAreaStyle(textStyle0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertFalse(textStyle0.isItalic());
      assertEquals(368.449F, textStyle0.getFontSize(), 0.01F);
      assertFalse(textStyle0.isBold());
      assertEquals(2, floatArray0.length);
      
      TextStyle textStyle1 = room0.getAreaStyle();
      assertNotNull(textStyle1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(368.449F, textStyle1.getFontSize(), 0.01F);
      assertFalse(textStyle1.isBold());
      assertFalse(textStyle1.isItalic());
      assertSame(textStyle1, textStyle0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      room0.setFloorVisible(false);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertFalse(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(6, room1.getPointCount());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertFalse(room1.isFloorVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(6, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1140.7754F;
      floatArray0[1] = floatArray1;
      float[] floatArray2 = new float[3];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[1] = 1.0F;
      floatArray0[2] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isClockwise());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getYCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(570.3877F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(4, room1.getPointCount());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.5F, room1.getYCenter(), 0.01F);
      assertEquals(570.3877F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isClockwise());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setAreaVisible(false);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertFalse(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertFalse(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(4, room1.getPointCount());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray0[0] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-0.5F), room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals((-0.5F), room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      float[][] floatArray0 = new float[5][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(5, floatArray0.length);
      
      room0.addPoint((-2128.285F), 1672.1653F);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-1064.1425F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(836.08264F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(5, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals((-1064.1425F), room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(836.08264F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(6, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isCeilingVisible());
      assertEquals(836.08264F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals((-1064.1425F), room1.getXCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(5, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(8, floatArray0.length);
      
      room0.setNameYOffset(0.0F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(8, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(8, room1.getPointCount());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameXOffset(911.2F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(911.2F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(911.2F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertEquals(911.2F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setNameXOffset((-1.0F));
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals((-1.0F), room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals((-1.0F), room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      float[][] floatArray0 = new float[4][2];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setFloorShininess(1.0F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(1.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertFalse(room1.isClockwise());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(1.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(4, room1.getPointCount());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      float[][] floatArray0 = new float[4][9];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      room0.setFloorShininess((-2020.0F));
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-2020.0F), room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-2020.0F), room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals((-2020.0F), room1.getFloorShininess(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getName());
      assertNull(room1.getFloorColor());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(4, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      
      room0.setCeilingShininess(1319.0F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1319.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(1319.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(1319.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setCeilingShininess((-1.0F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-1.0F), room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-1.0F), room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals((-1.0F), room1.getCeilingShininess(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      
      room0.setAreaYOffset(5602.217F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5602.217F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(5602.217F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(2, room1.getPointCount());
      assertTrue(room1.isCeilingVisible());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertEquals(5602.217F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setAreaYOffset((-1.0F));
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals((-1.0F), room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertFalse(room1.isClockwise());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertEquals((-1.0F), room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      float[][] floatArray0 = new float[2][7];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      room0.setAreaXOffset((-1082.791F));
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-1082.791F), room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals((-1082.791F), room0.getAreaXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getName());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals((-1082.791F), room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(2, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      room0.setAreaAngle((-2992.457F));
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4.62236F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(4, floatArray0.length);
      
      Room room1 = room0.clone();
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4.62236F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(4, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isCeilingVisible());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(4.62236F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertEquals(4, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.setPoints((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      float[][] floatArray0 = new float[11][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(11, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(11, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.setPoint(0.0F, 8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.move(1.0F, 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      float[][] floatArray0 = new float[11][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(11, room0.getPointCount());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(11, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.isSingular();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      float[][] floatArray0 = new float[10][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(10, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.isNameCenterPointAt((-196.3534F), (-196.3534F), (-1661.9F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.isClockwise();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      float[][] floatArray0 = new float[10][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(10, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(10, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.isAreaCenterPointAt(410.0623F, (-265.17416F), (-265.17416F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.intersectsRectangle(3133.3F, 3133.3F, 0.0F, 318.112F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.getYCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.getXCenter();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      float[][] floatArray0 = new float[10][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(10, room0.getPointCount());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(10, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.getPointIndexAt(795.7F, (-2995.581F), 795.7F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      float[][] floatArray0 = new float[4][1];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.getArea();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      float[][] floatArray0 = new float[2][0];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      // Undeclared exception!
      try { 
        room0.containsPoint(4332.2925F, 1.0F, 4332.2925F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getArea();
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
      
      boolean boolean0 = room0.containsPoint(935.8F, (-1.0F), 4332.2925F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, floatArray0.length);
      
      float float0 = room0.getYCenter();
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(6, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(6, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      float[][] floatArray0 = new float[4][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(4, floatArray0.length);
      
      float float0 = room0.getXCenter();
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(4, room0.getPointCount());
      assertEquals(4, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      float[][] floatArray0 = new float[7][1];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(7, room0.getPointCount());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(7, floatArray0.length);
      
      room0.addPoint(1.0F, 0.0F, 0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.5F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(7, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      float[][] floatArray0 = new float[2][1];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      float[][] floatArray1 = room0.getPoints();
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNotSame(floatArray0, floatArray1);
      assertNotSame(floatArray1, floatArray0);
      assertEquals(2, floatArray0.length);
      assertEquals(2, floatArray1.length);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      float[][] floatArray0 = new float[9][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(9, floatArray0.length);
      
      float float0 = room0.getNameYOffset();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(9, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(9, floatArray0.length);
      assertEquals((-40.0F), float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(8, floatArray0.length);
      
      float float0 = room0.getAreaYOffset();
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(8, room0.getPointCount());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(8, floatArray0.length);
      assertEquals(0.0F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      float[][] floatArray0 = new float[8][6];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray0.length);
      
      room0.move(0.0F, 0.0F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(8, floatArray0.length);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      float[][] floatArray0 = new float[4][4];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = room0.isAreaCenterPointAt(632.9895F, 4490.1F, 632.9895F);
      assertEquals(4, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      
      boolean boolean0 = room0.isNameCenterPointAt(2186, 2148.6526F, 2186);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(2, floatArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      float[][] floatArray0 = new float[6][5];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      
      int int0 = room0.getPointIndexAt((-1.0F), (-4327.706F), 2461.38F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertFalse(room0.isClockwise());
      assertEquals(6, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      float[][] floatArray0 = new float[2][3];
      Room room0 = new Room(floatArray0);
      assertNotNull(room0);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      
      int int0 = room0.getPointIndexAt(0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertEquals(0, int0);
  }
}
