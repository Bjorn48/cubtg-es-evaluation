/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:16:07 GMT 2019
 */

package org.sat4j.minisat.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.lang.reflect.Array;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.BasicLauncher;
import org.sat4j.ExitCode;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.CardinalityDataStructure;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMax;
import org.sat4j.minisat.constraints.CardinalityDataStructureYanMin;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWLConciseBinary;
import org.sat4j.minisat.constraints.MixedDataStructureSingleWL;
import org.sat4j.minisat.constraints.card.MinWatchCard;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.constraints.cnf.OriginalBinaryClause;
import org.sat4j.minisat.constraints.cnf.UnitClause;
import org.sat4j.minisat.core.ConflictTimer;
import org.sat4j.minisat.core.ILits;
import org.sat4j.minisat.core.IOrder;
import org.sat4j.minisat.core.ISimplifier;
import org.sat4j.minisat.core.LearnedConstraintsEvaluationType;
import org.sat4j.minisat.core.LearningStrategy;
import org.sat4j.minisat.core.Pair;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.SimplificationType;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.core.SolverStats;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.learning.NoLearningButHeuristics;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.LevelBasedVarOrderHeap;
import org.sat4j.minisat.orders.NaturalStaticOrder;
import org.sat4j.minisat.orders.PhaseInLastLearnedClauseSelectionStrategy;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.RandomWalkDecorator;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.ArminRestarts;
import org.sat4j.minisat.restarts.EMARestarts;
import org.sat4j.minisat.restarts.FixedPeriodRestarts;
import org.sat4j.minisat.restarts.Glucose21Restarts;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.minisat.restarts.NoRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.Constr;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVec;
import org.sat4j.specs.IVecInt;
import org.sat4j.specs.Lbool;
import org.sat4j.specs.SearchListener;
import org.sat4j.specs.UnitPropagationListener;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.ManyCore;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Solver_ESTest extends Solver_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<ClausalDataStructureWL> solver0 = null;
      try {
        solver0 = new Solver<ClausalDataStructureWL>((LearningStrategy<ClausalDataStructureWL>) null, (ClausalDataStructureWL) null, searchParams0, (IOrder) null, arminRestarts0, basicLauncher0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.setDBSimplificationAllowed(false);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      double double0 = 0.0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double1 = tabuListDecorator0.varActivity(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      SearchParams searchParams0 = null;
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, (SearchParams) null, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.findModel();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IVecInt iVecInt1 = solver0.unsatExplanation();
      assertNull(iVecInt1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielWLConciseBinary0.setLearner(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      iVecInt0.growTo(11, 11);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(907));
      assertNotNull(set0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(3, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(3, doubleArray0.length);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.realNumberOfVariables();
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int1);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams1 = new SearchParams((-3258));
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams1.getVarDecay();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams1.getClaDecay();
      assertNotSame(searchParams1, searchParams0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams2 = solver2.getSearchParams();
      assertSame(searchParams2, searchParams1);
      assertNotSame(searchParams2, searchParams0);
      assertSame(searchParams1, searchParams2);
      assertNotSame(searchParams1, searchParams0);
      assertNotNull(searchParams2);
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1.5, searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams2.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(unitClause0.isSatisfied());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(unitClause0.isSatisfied());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, eMARestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      // Undeclared exception!
      try { 
        solver0.record(unitClause0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int0);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      PureOrder pureOrder0 = new PureOrder((-336));
      assertNotNull(pureOrder0);
      assertEquals((-336), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, pureOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals((-336), pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.varBumpActivity((-336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -168
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(37);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, tabuListDecorator0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      // Undeclared exception!
      try { 
        solver0.assume(758);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 759
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      miniSATRestarts0.init(searchParams1, (SolverStats) null);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      iVecInt0.growTo((-1663), 0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning1, mixedDataStructureDanielWLConciseBinary0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      
      Set<Integer> set0 = solver1.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(0));
      assertNotNull(set0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int1);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      assertNotNull(lubyRestarts0);
      assertEquals(100, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(100, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.getIthConstr((-395));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -395
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams(0.0, 0.0, (-2644.1), 1304);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-2644.1), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(1304, searchParams1.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int0 = solver0.nConstraints();
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, int0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics1 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics1);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics1, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 2;
      intArray0[2] = (-2469);
      intArray0[3] = 1304;
      intArray0[4] = 0;
      intArray0[5] = 5;
      intArray0[6] = 32;
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2469
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertTrue(unitClause0.isSatisfied());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log((String) null);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, eMARestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.LBD2;
      solver1.setLearnedConstraintsDeletionStrategy((ConflictTimer) eMARestarts0, learnedConstraintsEvaluationType0);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      solver1.cancelUntilTrailLevel(37);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(7, solver1.nVars());
      assertEquals(8, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(10, percentLengthLearning0.getLimit());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(47);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      ILits iLits0 = varOrderHeap0.getVocabulary();
      assertNull(iLits0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      varOrderHeap1.setLits((ILits) null);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      SearchParams searchParams1 = solver0.getSearchParams();
      assertSame(searchParams0, searchParams1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertSame(searchParams1, searchParams0);
      assertNotNull(searchParams1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      solver1.setDataStructureFactory(cardinalityDataStructureYanMax0);
      assertSame(searchParams0, searchParams1);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.01, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning0.getLimit());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(76);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(76, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(76, 45);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(45, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(76.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(76L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(76, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(76L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(76, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(45, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(76.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.decayActivities();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(76L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(76, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(45, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(76.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IVecInt iVecInt1 = solver0.unsatExplanation();
      assertNull(iVecInt1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      iVecInt0.growTo(11, 11);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(0));
      assertNotNull(set0);
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(2, doubleArray0.length);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.realNumberOfVariables();
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      assertFalse(int1 == int0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int1);
      
      boolean boolean1 = solver0.isSatisfiable(iVecInt0);
      assertTrue(boolean1 == boolean0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(7, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      //  // Unstable assertion: assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      //  // Unstable assertion: assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      //  // Unstable assertion: assertNotNull(iLits0);
      //  // Unstable assertion: assertEquals(0, iLits0.nVars());
      //  // Unstable assertion: assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      //  // Unstable assertion: assertNotNull(searchParams0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(100, int1);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1.5, double0, 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      //  // Unstable assertion: assertNotNull(randomWalkDecorator0);
      //  // Unstable assertion: assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      //  // Unstable assertion: assertNull(doubleArray0);
      //  // Unstable assertion: assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      //  // Unstable assertion: assertNotNull(lubyRestarts0);
      //  // Unstable assertion: assertEquals(100, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      //  // Unstable assertion: assertNotNull(solver0);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals(100, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertTrue(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(1, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(2, solver0.newVar());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
      //  // Unstable assertion: assertArrayEquals(new int[] {}, intArray0);
      //  // Unstable assertion: assertNotNull(intArray0);
      //  // Unstable assertion: assertEquals(0, intArray0.length);
      //  // Unstable assertion: assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      //  // Unstable assertion: assertEquals(100, searchParams0.getInitConflictBound());
      //  // Unstable assertion: assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      //  // Unstable assertion: assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      //  // Unstable assertion: assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      //  // Unstable assertion: assertEquals(100, lubyRestarts0.getFactor());
      //  // Unstable assertion: assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      //  // Unstable assertion: assertEquals(1, lubyRestarts0.luby());
      //  // Unstable assertion: assertFalse(lubyRestarts0.shouldRestart());
      //  // Unstable assertion: assertEquals(2147483, solver0.getTimeout());
      //  // Unstable assertion: assertEquals(0, solver0.currentDecisionLevel());
      //  // Unstable assertion: assertFalse(solver0.isVerbose());
      //  // Unstable assertion: assertFalse(solver0.isDBSimplificationAllowed());
      //  // Unstable assertion: assertEquals(0, solver0.decisionLevel());
      //  // Unstable assertion: assertEquals(0, solver0.getPropagationLevel());
      //  // Unstable assertion: assertEquals(0, solver0.nConstraints());
      //  // Unstable assertion: assertFalse(solver0.isSolverKeptHot());
      //  // Unstable assertion: assertEquals("c ", solver0.getLogPrefix());
      //  // Unstable assertion: assertEquals(3, solver0.nVars());
      //  // Unstable assertion: assertEquals(3, solver0.realNumberOfVariables());
      //  // Unstable assertion: assertEquals(4, solver0.newVar());
      //  // Unstable assertion: assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(100);
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      fixedLengthLearning0.init();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      SimplificationType simplificationType0 = SimplificationType.EXPENSIVE_SIMPLIFICATION;
      solver1.setSimplifier(simplificationType0);
      //  // Unstable assertion: assertEquals(1, solver1.nVars());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3215);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      tabuListDecorator0.updateVar(0);
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = fixedLengthLearning0.toString();
      assertNotNull(string0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals("Limit learning to clauses of size smaller or equal to 3215", string0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      double[] doubleArray0 = solver0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      solver1.setNeedToReduceDB(true);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWL>(3215);
      assertNotNull(percentLengthLearning1);
      assertEquals(3215, percentLengthLearning1.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning1, mixedDataStructureDanielWL0, tabuListDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver2);
      assertEquals(3215, percentLengthLearning1.getLimit());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      solver2.reset();
      assertEquals(3215, percentLengthLearning1.getLimit());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      iVecInt0.growTo(11, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(0));
      assertNotNull(set0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1452);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver1.getOrder();
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Lits lits0 = (Lits)clausalDataStructureWL0.getVocabulary();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(noLearningNoHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      VecInt vecInt0 = (VecInt)solver2.createBlockingClauseForCurrentModel();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertNotNull(vecInt0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.newVar(3);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertFalse(int1 == int0);
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int1);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.5, double0, 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.setLearnedConstraintsDeletionStrategy(solver0.activity_based);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3258));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      randomWalkDecorator0.assignLiteral((-3258));
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      randomWalkDecorator0.undo((-2000));
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setKeepSolverHot(true);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setLearner(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertTrue(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, eMARestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      VecInt vecInt0 = new VecInt();
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-1087));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-1087), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertFalse(iVecInt0.isEmpty());
      assertEquals((-1087), iVecInt0.last());
      assertEquals(1, iVecInt0.size());
      
      IVecInt iVecInt1 = vecInt0.push(0);
      assertSame(vecInt0, iVecInt0);
      assertSame(vecInt0, iVecInt1);
      assertSame(iVecInt1, iVecInt0);
      assertSame(iVecInt1, vecInt0);
      assertNotNull(iVecInt1);
      assertEquals(0, vecInt0.last());
      assertFalse(vecInt0.isEmpty());
      assertEquals(2, vecInt0.size());
      assertFalse(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.last());
      assertEquals(2, iVecInt1.size());
      
      // Undeclared exception!
      try { 
        vecInt0.remove((-1747));
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2702.8847357);
      doubleArray0[5] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      randomWalkDecorator0.assignLiteral(0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      fixedLengthLearning0.setVarActivityListener(solver0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      ILogAble iLogAble0 = solver0.out;
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(iLogAble0);
      assertEquals(6, doubleArray0.length);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0, iLogAble0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(6, doubleArray0.length);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(7, solver1.newVar());
      assertEquals(6, solver1.realNumberOfVariables());
      assertEquals(6, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      LearnedConstraintsEvaluationType learnedConstraintsEvaluationType0 = LearnedConstraintsEvaluationType.ACTIVITY;
      // Undeclared exception!
      try { 
        solver0.setLearnedConstraintsDeletionStrategy(learnedConstraintsEvaluationType0);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(1.5, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(11);
      assertNotNull(activeLearning1);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      SearchParams searchParams1 = new SearchParams(11, (-1));
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(11.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1), searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Pair pair0 = new Pair();
      assertNotNull(pair0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      Constr constr0 = pair0.getReason();
      assertNull(constr0);
      assertEquals(0, pair0.getBacktrackLevel());
      
      UnitPropagationListener unitPropagationListener0 = mock(UnitPropagationListener.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        solver0.record((Constr) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3258));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams1, (SolverStats) null);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      int[] intArray0 = new int[0];
      MinWatchCard minWatchCard0 = (MinWatchCard)solver0.addAtMostOnTheFly(intArray0, 907);
      assertNotSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(minWatchCard0);
      assertEquals(0, intArray0.length);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(minWatchCard0.simplify());
      assertEquals((-907), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertTrue(minWatchCard0.locked());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertEquals(0, minWatchCard0.size());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
      
      NoLearningNoHeuristics<CardinalityDataStructure> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(5, solver1.nVars());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver1.getRestartStrategy();
      assertNotSame(solver1, solver0);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertNotNull(miniSATRestarts1);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(noLearningNoHeuristics0, cardinalityDataStructure0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts1);
      assertNotNull(solver2);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(10, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(9, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(9, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      
      IVec<Constr> iVec0 = solver2.getLearnedConstraints();
      assertNotSame(solver1, solver0);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNotSame(searchParams1, searchParams0);
      assertNotNull(iVec0);
      assertFalse(solver1.equals((Object)solver0));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(11, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(12, solver1.newVar());
      assertEquals(11, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(3, solver2.nVars());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, iVec0.size());
      assertTrue(iVec0.isEmpty());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, randomWalkDecorator0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      
      ILogAble iLogAble0 = solver0.getLogger();
      assertNotNull(iLogAble0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 589;
      intArray0[4] = 2955;
      intArray0[5] = 1000;
      intArray0[6] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 589, 2955, 1000, 0}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(7, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ILits iLits0 = subsetVarOrder0.getVocabulary();
      assertArrayEquals(new int[] {0, 0, 0, 589, 2955, 1000, 0}, intArray0);
      assertNull(iLits0);
      assertEquals(7, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      varOrderHeap1.setLits((ILits) null);
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      boolean boolean0 = noRestarts0.shouldRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(boolean0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, randomWalkDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      int int0 = solver0.nConstraints();
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, int0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertFalse(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, int1);
      
      int int2 = searchParams0.getInitConflictBound();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, int2);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, double0, 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, noRestarts0, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      IVecInt iVecInt0 = solver1.getOutLearnt();
      assertNotSame(varOrderHeap1, varOrderHeap0);
      assertNotNull(iVecInt0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(1.5, 0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(11);
      assertNotNull(activeLearning1);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.decayActivities();
      assertNotSame(activeLearning1, activeLearning0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.displayLicense();
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      solver1.out = (ILogAble) mUSLauncher0;
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      VecInt vecInt0 = (VecInt)solver1.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = solver0.addExactly(vecInt0, 0);
      assertNotSame(activeLearning1, activeLearning0);
      assertNotNull(iConstr0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(2, iConstr0.size());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(5, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.nConstraints());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      try { 
        solver0.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      IConstr iConstr0 = mock(IConstr.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        solver0.removeSubsumedConstr(iConstr0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.Vec", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      doReturn((-1882.057)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals((-1882.057), double0, 0.01);
      
      tabuListDecorator0.setVarDecay((-1882.057));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap1).varActivity(anyInt());
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1);
      assertNotNull(tabuListDecorator1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      
      double double1 = tabuListDecorator1.varActivity(0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      solver0.setLearningStrategy(percentLengthLearning0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int1);
      
      double double2 = searchParams0.getConflictBoundIncFactor();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, double2, 0.01);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator1, lubyRestarts0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver2.isSatisfiable(false);
      assertNotSame(solver2, solver1);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      int int2 = solver1.newVar(0);
      assertNotSame(solver1, solver2);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      solver0.setLearningStrategy(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[4] = (-2702.8847357);
      doubleArray0[5] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      randomWalkDecorator0.assignLiteral(0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      int int0 = 12;
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(880);
      assertNotNull(fixedLengthLearning0);
      assertEquals(880, fixedLengthLearning0.getMaxLength());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.toString((String) null);
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams((-4366));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4366), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals((-4366L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4366), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertEquals((-6549L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>(37);
      assertNotNull(fixedLengthLearning1);
      assertEquals(37, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals((-6549L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-4366), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, fixedLengthLearning1.getMaxLength());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-4366);
      intArray0[1] = 37;
      intArray0[2] = 37;
      intArray0[3] = (-4366);
      intArray0[4] = 37;
      // Undeclared exception!
      try { 
        solver0.addAtMostOnTheFly(intArray0, 100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8733
         //
         verifyException("org.sat4j.minisat.constraints.card.MinWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 663.845221306);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(663.845221306, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>(1729);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1729, fixedLengthLearning0.getMaxLength());
      
      fixedLengthLearning0.init();
      assertEquals(1729, fixedLengthLearning0.getMaxLength());
      
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>((-2500));
      assertNotNull(percentLengthLearning0);
      assertEquals((-2500), percentLengthLearning0.getLimit());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, searchParams0, varOrderHeap1, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals((-2500), percentLengthLearning0.getLimit());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2660;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 2660}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {0, 2660}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.toString();
        fail("Expecting exception: NoSuchFieldError");
      
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int1);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = (double) 100;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = (double) 100;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = (double) 100;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray1.length);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new int[] {}, intArray0);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertEquals(6, doubleArray0.length);
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams(100, 1297.18712883994, (-3106.030594559196), 2);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(100.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3106.030594559196), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1297.18712883994, searchParams1.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(6, doubleArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(100.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3106.030594559196), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1297.18712883994, searchParams1.getClaDecay(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(searchParams1, searchParams0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(iLogAble0);
      assertEquals(6, doubleArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(100.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3106.030594559196), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1297.18712883994, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams1, randomWalkDecorator0, lubyRestarts0, iLogAble0);
      assertArrayEquals(new double[] {1.5, 100.0, 1.5, 100.0, 1.5, 100.0}, doubleArray0, 0.01);
      assertNotNull(solver2);
      assertEquals(6, doubleArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(100L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(100.0, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3106.030594559196), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, searchParams1.getInitConflictBound());
      assertEquals(1297.18712883994, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver2.forget((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      Map<String, Number> map0 = solver0.getStat();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(map0);
      assertEquals(2, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(17, map0.size());
      assertFalse(map0.isEmpty());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver1);
      assertEquals(2, intArray0.length);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(2, intArray0.length);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, miniSATRestarts0, iLogAble0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver2);
      assertEquals(2, intArray0.length);
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      activeLearning0.setLimit((-2733));
      assertEquals((-2733), activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      int int0 = 33;
      solver2.unset(33);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals((-2733), activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -908
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn("9|.@x7HNqBBN").when(varOrderHeap0).toString();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 1.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams(2, 0.0, (-2291.213638), 4);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2291.213638), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, searchParams1.getInitConflictBound());
      assertEquals(2.0, searchParams1.getVarDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax1, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(searchParams0, searchParams1);
      assertNotNull(iLogAble0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-3106.030594559196));
      assertNotNull(activeLearning0);
      assertEquals((-3106.030594559196), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(6, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3106.030594559196), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams1, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver3);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2291.213638), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, searchParams1.getInitConflictBound());
      assertEquals(2.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchListener<Solver<MixedDataStructureDanielHT>> searchListener0 = solver3.getSearchListener();
      assertNotSame(searchParams0, searchParams1);
      assertNotSame(searchParams1, searchParams0);
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotNull(searchListener0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals((-2291.213638), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(4, searchParams1.getInitConflictBound());
      assertEquals(2.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(9, solver1.nVars());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(10, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(4, solver3.newVar());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver2.forget(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      iVecInt0.growTo(11, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(1452);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap1 = (LevelBasedVarOrderHeap)solver0.getOrder();
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertSame(levelBasedVarOrderHeap1, levelBasedVarOrderHeap0);
      assertNotNull(levelBasedVarOrderHeap1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap1.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningNoHeuristics<ClausalDataStructureWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Lits lits0 = (Lits)clausalDataStructureWL0.getVocabulary();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      int int0 = solver0.newVar(3);
      assertSame(levelBasedVarOrderHeap0, levelBasedVarOrderHeap1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1452, fixedLengthLearning0.getMaxLength());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(3, int0);
      
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int1 = searchParams0.getInitConflictBound();
      assertFalse(int1 == int0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int1);
      
      int int2 = searchParams0.getInitConflictBound();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int2);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, double0, 0.01);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.enqueue((-1));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 663.845221306);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(663.845221306, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(1, doubleArray1.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(663.845221306, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(4186);
      assertNotNull(percentLengthLearning0);
      assertEquals(4186, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1);
      assertNotNull(tabuListDecorator1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      double double0 = tabuListDecorator0.varActivity(32);
      assertNotSame(tabuListDecorator0, tabuListDecorator1);
      assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
      assertEquals(0.0, double0, 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, varOrderHeap1, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4186, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setLearningStrategy(percentLengthLearning0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(4186, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator1, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int1);
      
      double double1 = searchParams0.getConflictBoundIncFactor();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, double1, 0.01);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, (SearchParams) null, varOrderHeap1, glucose21Restarts0);
      assertNotNull(solver2);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable(false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      iVecInt0.growTo(11, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.realNumberOfVariables();
      assertFalse(int1 == int0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(4, solver1.newVar());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int1);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      assertNotNull(printWriter0);
      assertEquals("", stringWriter0.toString());
      
      Random.setNextRandom(0);
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning1, cardinalityDataStructure0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver3);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver3.model(1879);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1871.622316);
      assertNotNull(activeLearning0);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2205;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-4266);
      intArray0[5] = 476;
      intArray0[6] = 500;
      intArray0[7] = 2401;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {2205, 0, 0, 0, (-4266), 476, 500, 2401}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 0);
      assertArrayEquals(new int[] {2205, 0, 0, 0, (-4266), 476, 500, 2401}, intArray0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      searchParams0.setInitConflictBound(32);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(32L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      
      miniSATRestarts0.onRestart();
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, miniSATRestarts0);
      assertArrayEquals(new int[] {2205, 0, 0, 0, (-4266), 476, 500, 2401}, intArray0);
      assertNotNull(solver0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      solver0.modelFound();
      assertArrayEquals(new int[] {2205, 0, 0, 0, (-4266), 476, 500, 2401}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      long long0 = solver0.getTimeoutMs();
      assertArrayEquals(new int[] {2205, 0, 0, 0, (-4266), 476, 500, 2401}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(2147483647L, long0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning1 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      Solver<ClausalDataStructureWL> solver1 = null;
      try {
        solver1 = new Solver<ClausalDataStructureWL>(activeLearning1, (ClausalDataStructureWL) null, searchParams0, subsetVarOrder0, miniSATRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructure> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructure>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(clauseOnlyLearning0, cardinalityDataStructure0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setExpectedNumberOfClauses((-2150));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      
      int int0 = (-239);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-239));
      assertNotNull(percentLengthLearning0);
      assertEquals((-239), percentLengthLearning0.getLimit());
      
      String string0 = percentLengthLearning0.toString();
      assertNotNull(string0);
      assertEquals((-239), percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses of size smaller or equal to -239% of the number of variables", string0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, (CardinalityDataStructureYanMin) null, naturalStaticOrder0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      int int0 = (-1508);
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1508));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1508), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      String string0 = percentLengthLearning0.toString();
      assertNotNull(string0);
      assertEquals((-1508), percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses of size smaller or equal to -1508% of the number of variables", string0);
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals((-1508), percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      solver0.setLogPrefix("");
      assertEquals((-1508), percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, solver0.nVars());
      assertEquals("", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      ILogAble iLogAble0 = null;
      Solver<CardinalityDataStructure> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning1, (CardinalityDataStructure) null, searchParams0, randomWalkDecorator0, glucose21Restarts0, (ILogAble) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureSingleWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureSingleWL>(369);
      assertNotNull(fixedLengthLearning0);
      assertEquals(369, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams((-1.0), 11);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      
      lubyRestarts0.onRestart();
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(fixedLengthLearning0, mixedDataStructureSingleWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(369, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setOrder(levelBasedVarOrderHeap0);
      assertEquals(369, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver0.isNeedToReduceDB();
      assertEquals(369, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.nVars());
      assertEquals(6, solver0.newVar());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(boolean0);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator((ISolver) null);
      assertNotNull(maxSatDecorator0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      
      IVecInt iVecInt0 = maxSatDecorator0.createBlockingClauseForCurrentModel();
      assertNull(iVecInt0);
      assertFalse(maxSatDecorator0.hasNoObjectiveFunction());
      assertEquals(0, maxSatDecorator0.getExpectedNumberOfClauses());
      assertEquals(0, maxSatDecorator0.getNbexpectedclauses());
      assertFalse(maxSatDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(maxSatDecorator0.isOptimal());
      assertFalse(maxSatDecorator0.isSolutionOptimal());
      
      ILits iLits0 = mock(ILits.class, new ViolatedAssumptionAnswer());
      OriginalBinaryClause originalBinaryClause0 = null;
      try {
        originalBinaryClause0 = new OriginalBinaryClause((IVecInt) null, iLits0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.BinaryClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray0 = new int[2];
      intArray0[1] = 2660;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 2660}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, searchParams0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {0, 2660}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      IVecInt iVecInt0 = solver0.getOutLearnt();
      assertArrayEquals(new int[] {0, 2660}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      try { 
        cardinalityDataStructureYanMax0.createClause(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 880);
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<CardinalityDataStructure> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructure>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(noLearningButHeuristics0, cardinalityDataStructure0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Lbool lbool0 = solver0.truthValue(47);
      assertNotNull(lbool0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("U", lbool0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(880);
      assertNotNull(fixedLengthLearning0);
      assertEquals(880, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, (SearchParams) null, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(880, fixedLengthLearning0.getMaxLength());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.cancel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3258));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.999, double1, 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams1 = new SearchParams(0);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams1, (SolverStats) null);
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(0, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      
      miniSATRestarts0.reset();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      
      int[] intArray0 = new int[1];
      MinWatchCard minWatchCard0 = (MinWatchCard)solver0.addAtMostOnTheFly(intArray0, 907);
      assertNotSame(searchParams0, searchParams1);
      assertArrayEquals(new int[] {0}, intArray0);
      assertNotNull(minWatchCard0);
      assertEquals(1, intArray0.length);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nConstraints());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, minWatchCard0.size());
      assertTrue(minWatchCard0.locked());
      assertTrue(minWatchCard0.canBeSatisfiedByCountingLiterals());
      assertEquals((-906), minWatchCard0.requiredNumberOfSatisfiedLiterals());
      assertEquals(0.0, minWatchCard0.getActivity(), 0.01);
      assertFalse(minWatchCard0.learnt());
      assertFalse(minWatchCard0.simplify());
      assertFalse(minWatchCard0.canBePropagatedMultipleTimes());
      assertFalse(MinWatchCard.ATMOST);
      assertTrue(MinWatchCard.ATLEAST);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningButHeuristics0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      boolean boolean0 = noRestarts0.shouldRestart();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(boolean0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = null;
      try {
        solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningButHeuristics0, (MixedDataStructureDanielWLConciseBinary) null, pureOrder0, noRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(18);
      assertNotNull(percentLengthLearning0);
      assertEquals(18, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertNotNull(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 102);
      assertNotNull(tabuListDecorator0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals(18, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals(18, percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-403));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-403), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-510));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-510), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals((-403), fixedLengthLearning0.getMaxLength());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-510), searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      
      VecInt vecInt0 = (VecInt)solver1.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      try { 
        minOneDecorator0.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      boolean boolean0 = noRestarts0.shouldRestart();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertFalse(boolean0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, noRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      
      int int0 = solver0.currentDecisionLevel();
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1663), fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 476;
      intArray0[1] = (-1663);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2401;
      intArray0[5] = 2401;
      intArray0[6] = (-4266);
      intArray0[7] = (-4266);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-1663));
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1663.0), randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams((-4266));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-4266), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setInitConflictBound((-1));
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>(4);
      assertNotNull(percentLengthLearning0);
      assertEquals(4, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertNotNull(solver0);
      assertEquals(8, intArray0.length);
      assertEquals(4, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      
      long long0 = solver0.getTimeoutMs();
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(4, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483647L, long0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning1);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning1, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertNotNull(solver1);
      assertEquals(8, intArray0.length);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1663.0), randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(8, intArray0.length);
      
      int int0 = solver1.getPropagationLevel();
      assertArrayEquals(new int[] {476, (-1663), 0, 0, 2401, 2401, (-4266), (-4266)}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-1663.0), randomWalkDecorator0.getProbability(), 0.01);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals((-1L), miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals((-1), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(1.5, 0);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>(11);
      assertNotNull(activeLearning1);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.decayActivities();
      assertNotSame(activeLearning1, activeLearning0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      solver1.out = (ILogAble) mUSLauncher0;
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      VecInt vecInt0 = (VecInt)solver1.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IConstr iConstr0 = solver0.addExactly(vecInt0, 0);
      assertNotSame(activeLearning1, activeLearning0);
      assertNotNull(iConstr0);
      assertFalse(activeLearning1.equals((Object)activeLearning0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(2, iConstr0.size());
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(11.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(5, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(5, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ClauseOnlyLearning<MixedDataStructureDanielHT> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielHT>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(clauseOnlyLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = solver2.dimacs2internal(vecInt0);
      assertNotSame(vecInt0, iVecInt0);
      assertNotSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.equals((Object)vecInt0));
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(7, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(8, solver1.newVar());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver3 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver3);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      assertFalse(solver3.isVerbose());
      assertEquals(1, solver3.nVars());
      assertEquals(0, solver3.nConstraints());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt1 = solver3.unsatExplanation();
      assertNull(iVecInt1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(0, solver3.currentDecisionLevel());
      assertEquals(0, solver3.decisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.nConstraints());
      assertEquals(3, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(3, solver3.realNumberOfVariables());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ClauseOnlyLearning<ClausalDataStructureWL> clauseOnlyLearning0 = new ClauseOnlyLearning<ClausalDataStructureWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>((-603));
      assertNotNull(percentLengthLearning0);
      assertEquals((-603), percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertNotNull(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap(rSATPhaseSelectionStrategy0);
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 102);
      assertNotNull(tabuListDecorator0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals((-603), percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      assertNotNull(minOneDecorator0);
      assertEquals((-603), percentLengthLearning0.getLimit());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
      assertFalse(minOneDecorator0.isOptimal());
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-603));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-603), fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams(0.0, (-510));
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-510), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals((-603), fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-510), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      
      VecInt vecInt0 = (VecInt)solver1.implied;
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      try { 
        minOneDecorator0.addClause(vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((-786.9182135257375)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals((-786.9182135257375), double0, 0.01);
      
      tabuListDecorator0.setVarDecay((-786.9182135257375));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setVerbose(false);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, (CardinalityDataStructureYanMin) null, searchParams0, tabuListDecorator0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver1 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.unset(907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 907
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      doReturn((-1882.057)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals((-1882.057), double0, 0.01);
      
      tabuListDecorator0.setVarDecay((-1882.057));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap1).varActivity(anyInt());
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1);
      assertNotNull(tabuListDecorator1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      
      double double1 = tabuListDecorator1.varActivity(0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      solver0.setLearningStrategy(percentLengthLearning0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(100, int1);
      
      double double2 = searchParams0.getConflictBoundIncFactor();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, double2, 0.01);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, searchParams0, tabuListDecorator1, lubyRestarts0);
      assertNotNull(solver2);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = solver2.isSatisfiable(false);
      assertNotSame(solver2, solver1);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(solver2.equals((Object)solver1));
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(6, solver2.newVar());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(5, solver2.realNumberOfVariables());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(5, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      int int2 = solver1.newVar(0);
      assertNotSame(solver1, solver2);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(0, int2);
      
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning1 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      assertNotNull(clauseOnlyLearning1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver3 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning1, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver3);
      assertFalse(tabuListDecorator0.equals((Object)tabuListDecorator1));
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning1.toString());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(2147483, solver3.getTimeout());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(1, solver3.nVars());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.realNumberOfVariables());
      assertEquals(0, solver3.decisionLevel());
      assertEquals(2, solver3.newVar());
      
      // Undeclared exception!
      try { 
        solver3.primeImplicant(100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams1 = new SearchParams((-1.0), 11);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-1.0), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(11, searchParams1.getInitConflictBound());
      
      lubyRestarts0.onRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMin> solver0 = null;
      try {
        solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, (IOrder) null, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, tabuListDecorator0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.truthValue(500);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int1);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      VecInt vecInt0 = (VecInt)solver0.implied;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWL>(907);
      assertNotNull(percentLengthLearning1);
      assertEquals(907, percentLengthLearning1.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning1, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(907, percentLengthLearning1.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      
      long long0 = solver1.getTimeoutMs();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals(907, percentLengthLearning1.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483647L, long0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1663), fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.learnt());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals((-1663), fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      boolean boolean0 = solver0.assume(37);
      assertEquals((-1663), fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(1, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertTrue(boolean0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      boolean boolean1 = solver1.isDBSimplificationAllowed();
      assertFalse(boolean1 == boolean0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 880);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = tabuListDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int0 = solver0.realNumberOfVariables();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int0);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning1 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      miniSATLearning1.setDataStructureFactory(cardinalityDataStructureYanMin0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      
      SearchParams searchParams0 = new SearchParams(522.738471897641, 47);
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(522.738471897641, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning1, cardinalityDataStructureYanMin0, searchParams0, varOrderHeap1, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(522.738471897641, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(47, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning1.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 1120;
      intArray0[2] = 0;
      intArray0[3] = 47;
      intArray0[4] = 47;
      intArray0[5] = (-3258);
      intArray0[6] = 32;
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1120
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 880);
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean1 = solver0.simplifyDB();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PureOrder pureOrder0 = new PureOrder();
      assertNotNull(pureOrder0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      PhaseInLastLearnedClauseSelectionStrategy phaseInLastLearnedClauseSelectionStrategy0 = (PhaseInLastLearnedClauseSelectionStrategy)pureOrder0.getPhaseSelectionStrategy();
      assertNotNull(phaseInLastLearnedClauseSelectionStrategy0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals("phase appearing in latest learned clause", phaseInLastLearnedClauseSelectionStrategy0.toString());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 1.0E20);
      assertNotNull(randomWalkDecorator0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1.0E20, randomWalkDecorator0.getProbability(), 0.01);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      boolean boolean0 = noRestarts0.shouldRestart();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(boolean0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, randomWalkDecorator0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1.0E20, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      
      solver0.cancelUntil(0);
      assertEquals(20, pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(1.0E20, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.assume(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = new Float(0.0);
      assertEquals(0.0F, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0F);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      int int0 = 37;
      SearchParams searchParams0 = new SearchParams(37);
      assertNotNull(searchParams0);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      int int1 = 0;
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      lubyRestarts0.reset();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      eMARestarts0.init(searchParams0, (SolverStats) null);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      lubyRestarts0.onRestart();
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      assertNotNull(lubyRestarts1);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      searchParams0.setVarDecay(0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts1);
      assertNotNull(solver0);
      assertFalse(lubyRestarts1.equals((Object)lubyRestarts0));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertTrue(lubyRestarts1.shouldRestart());
      assertEquals(32, lubyRestarts1.getFactor());
      assertEquals(0L, lubyRestarts1.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts1.luby());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = (-1868);
      intArray0[2] = 0;
      intArray0[3] = 0;
      // Undeclared exception!
      try { 
        solver0.dimacs2internal((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      Lits lits0 = new Lits();
      assertNotNull(lits0);
      assertEquals(0, lits0.nVars());
      assertEquals(0, lits0.realnVars());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3246));
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      PureOrder pureOrder0 = new PureOrder((-3246));
      assertNotNull(pureOrder0);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 2.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(2.0, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.varDecayActivity();
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(2.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = pureOrder0.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      NoLearningButHeuristics<CardinalityDataStructureYanMax> noLearningButHeuristics0 = new NoLearningButHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningButHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver0);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningButHeuristics0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(2.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      solver1.setLearningStrategy(noLearningButHeuristics0);
      assertNotSame(solver1, solver0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(2.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, pureOrder0, glucose21Restarts0);
      assertNotNull(solver2);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      boolean boolean0 = solver2.isSatisfiable(false);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals((-3246), pureOrder0.getPeriod());
      assertEquals("tries to first branch on a single phase watched unassigned variable (pure literal if using a CB data structure) else VSIDS from MiniSAT", pureOrder0.toString());
      assertEquals(0, pureOrder0.numberOfInterestingVariables());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams0 = new SearchParams((-3246));
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double0 = searchParams0.getVarDecay();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams0.getClaDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams1.getInitConflictBound();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams1.getInitConflictBound();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, int1);
      
      Double double2 = new Double((-3246));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertEquals((-3246.0), (double)double2, 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.nConstraints());
      
      VecInt vecInt0 = (VecInt)solver0.implied;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-3246));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-3246.0), activeLearning0.getActivityPercent(), 0.01);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-3246.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals((-3246), searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      // Undeclared exception!
      try { 
        solver1.forget(907);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1815
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3215);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[0];
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(554.2958201826033).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      tabuListDecorator0.updateVar(0);
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(554.2958201826033, double0, 0.01);
      
      String string0 = fixedLengthLearning0.toString();
      assertNotNull(string0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals("Limit learning to clauses of size smaller or equal to 3215", string0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, tabuListDecorator0, fixedPeriodRestarts0);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      ILogAble iLogAble0 = solver0.out;
      assertNotNull(iLogAble0);
      
      solver0.setLogger(iLogAble0);
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(solver0, solver1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>((-1));
      assertNotNull(percentLengthLearning0);
      assertEquals((-1), percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals((-1), percentLengthLearning0.getLimit());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      solver0.setLogPrefix("Limit learning to clauses of size smaller or equal to 3215");
      assertNotSame(cardinalityDataStructureYanMax0, cardinalityDataStructureYanMax1);
      assertNotSame(solver0, solver1);
      assertFalse(cardinalityDataStructureYanMax0.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(8, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("Limit learning to clauses of size smaller or equal to 3215", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(7, solver0.nVars());
      assertFalse(solver0.isVerbose());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      
      activeLearning0.setLimit((-2733));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2733), activeLearning0.getLimit());
      
      String string1 = percentLengthLearning0.toString();
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals((-1), percentLengthLearning0.getLimit());
      assertEquals("Limit learning to clauses of size smaller or equal to -1% of the number of variables", string1);
      
      // Undeclared exception!
      try { 
        solver2.unset(3215);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3215
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int1 = 907;
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(levelBasedVarOrderHeap0, 0.0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      randomWalkDecorator0.assignLiteral(1652);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      assertNotNull(solver1);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      solver1.initStats((SolverStats) null);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      
      // Undeclared exception!
      try { 
        solver1.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(unitClause0.isSatisfied());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertTrue(unitClause0.isSatisfied());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      assertNotNull(searchParams0);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      ISimplifier iSimplifier0 = solver0.getSimplifier();
      assertNotNull(iSimplifier0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("luby style (SATZ_rand, TiniSAT) restarts strategy with factor ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = solver0.unsatExplanation();
      assertNull(iVecInt1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      iVecInt0.growTo(11, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(11));
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean1 = lubyRestarts0.shouldRestart();
      assertTrue(boolean1 == boolean0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean1);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean2 = solver1.simplifyDB();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      naturalStaticOrder0.init();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      // Undeclared exception!
      try { 
        solver0.printInfos((PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 1.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      randomWalkDecorator0.varDecayActivity();
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = varOrderHeap1.getVariableHeuristics();
      assertNotSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {(-1.0), 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(3, doubleArray1.length);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(2840);
      assertNotNull(percentLengthLearning0);
      assertEquals(2840, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(2840, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver1.setLearningStrategy(percentLengthLearning0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(2840, percentLengthLearning0.getLimit());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver2 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator0, glucose21Restarts0);
      assertNotNull(solver2);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      
      boolean boolean0 = solver2.isSatisfiable(true);
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.decisionLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isVerbose());
      assertEquals(4, solver2.newVar());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertTrue(boolean0);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielHT> solver3 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, lubyRestarts0, basicLauncher0);
      assertNotNull(solver3);
      assertEquals(2, solver3.newVar());
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertEquals(1, solver3.nVars());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(0, solver3.nConstraints());
      assertEquals(1, solver3.realNumberOfVariables());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver3.cancelUntilTrailLevel((-365));
      assertEquals(2147483, solver3.getTimeout());
      assertEquals(0, solver3.decisionLevel());
      assertEquals("c ", solver3.getLogPrefix());
      assertFalse(solver3.isSolverKeptHot());
      assertEquals(3, solver3.realNumberOfVariables());
      assertEquals(3, solver3.nVars());
      assertEquals(4, solver3.newVar());
      assertEquals(0, solver3.nConstraints());
      assertFalse(solver3.isDBSimplificationAllowed());
      assertEquals(0, solver3.currentDecisionLevel());
      assertFalse(solver3.isVerbose());
      assertEquals(0, solver3.getPropagationLevel());
      assertEquals(2, lubyRestarts0.getFactor());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      ILits iLits1 = clausalDataStructureWL0.getVocabulary();
      assertSame(iLits1, iLits0);
      assertNotNull(iLits1);
      assertEquals(0, iLits1.nVars());
      assertEquals(0, iLits1.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, int1);
      
      double double0 = searchParams0.getConflictBoundIncFactor();
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, double0, 0.01);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 100;
      intArray0[1] = 100;
      intArray0[2] = 100;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {100, 100, 100}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, (-486.842577));
      assertArrayEquals(new int[] {100, 100, 100}, intArray0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(3, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-486.842577), randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertArrayEquals(new int[] {100, 100, 100}, intArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(3, intArray0.length);
      assertEquals(1, doubleArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals((-486.842577), randomWalkDecorator0.getProbability(), 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<ClausalDataStructureWL> activeLearning0 = new ActiveLearning<ClausalDataStructureWL>(3831.0369547045);
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(3831.0369547045, activeLearning0.getActivityPercent(), 0.01);
      
      SearchParams searchParams1 = new SearchParams(32);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32, searchParams1.getInitConflictBound());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(activeLearning0, clausalDataStructureWL0, searchParams1, subsetVarOrder0, lubyRestarts0);
      assertArrayEquals(new int[] {100, 100, 100}, intArray0);
      assertNotNull(solver0);
      assertEquals(3, intArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(100, lubyRestarts0.getFactor());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(3831.0369547045, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(32, searchParams1.getInitConflictBound());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver0.findModel();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams(32, 1109);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1109, searchParams0.getInitConflictBound());
      assertEquals(32.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.decayActivities();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(1000);
      assertNotNull(fixedLengthLearning0);
      assertEquals(1000, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(fixedLengthLearning0, cardinalityDataStructure0, (SearchParams) null, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1000, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      solver1.registerLiteral(32);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1000, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(33, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(34, solver1.newVar());
      assertEquals(33, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      
      int[] intArray0 = new int[9];
      int int0 = (-3509);
      intArray0[0] = (-3509);
      intArray0[1] = 1;
      intArray0[2] = 2792;
      intArray0[3] = 1000;
      intArray0[4] = (-513);
      intArray0[5] = 2326;
      intArray0[6] = 3;
      intArray0[7] = 1432;
      intArray0[8] = 6;
      VecInt vecInt0 = new VecInt(intArray0);
      assertArrayEquals(new int[] {(-3509), 1, 2792, 1000, (-513), 2326, 3, 1432, 6}, intArray0);
      assertNotNull(vecInt0);
      assertEquals(9, intArray0.length);
      assertEquals(9, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(6, vecInt0.last());
      
      IVecInt iVecInt0 = vecInt0.push(1000);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertArrayEquals(new int[] {(-3509), 1, 2792, 1000, (-513), 2326, 3, 1432, 6}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(9, intArray0.length);
      assertEquals(10, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1000, vecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      assertEquals(1000, iVecInt0.last());
      assertEquals(10, iVecInt0.size());
      
      // Undeclared exception!
      try { 
        vecInt0.set((-90), 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -90
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      assertNotNull(fixedLengthLearning0);
      assertEquals((-1663), fixedLengthLearning0.getMaxLength());
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.learnt());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWL> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWL>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(noLearningNoHeuristics0, mixedDataStructureDanielWL0, searchParams0, naturalStaticOrder0, eMARestarts0);
      assertNotNull(solver1);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      solver1.reset();
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[5] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      randomWalkDecorator0.varDecayActivity();
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      
      solver0.setLearningStrategy(fixedLengthLearning0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, randomWalkDecorator0, glucose21Restarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(6, doubleArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = solver1.isSatisfiable(true);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1882.057);
      doubleArray0[1] = (-1882.057);
      doubleArray0[2] = (-1882.057);
      doubleArray0[3] = (-1882.057);
      doubleArray0[4] = (-1882.057);
      doubleArray0[5] = (-401.99144078237805);
      doubleArray0[6] = (-1882.057);
      doubleArray0[7] = (-1882.057);
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      doReturn((-1882.057)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertArrayEquals(new double[] {(-1882.057), (-1882.057), (-1882.057), (-1882.057), (-1882.057), (-401.99144078237805), (-1882.057), (-1882.057)}, doubleArray0, 0.01);
      assertNotNull(tabuListDecorator0);
      assertEquals(8, doubleArray0.length);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertArrayEquals(new double[] {(-1882.057), (-1882.057), (-1882.057), (-1882.057), (-1882.057), (-401.99144078237805), (-1882.057), (-1882.057)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      assertEquals((-1882.057), double0, 0.01);
      
      tabuListDecorator0.setVarDecay((-1882.057));
      assertArrayEquals(new double[] {(-1882.057), (-1882.057), (-1882.057), (-1882.057), (-1882.057), (-401.99144078237805), (-1882.057), (-1882.057)}, doubleArray0, 0.01);
      assertEquals(8, doubleArray0.length);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      double[] doubleArray1 = tabuListDecorator0.getVariableHeuristics();
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {(-1882.057), (-1882.057), (-1882.057), (-1882.057), (-1882.057), (-401.99144078237805), (-1882.057), (-1882.057)}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {(-1882.057), (-1882.057), (-1882.057), (-1882.057), (-1882.057), (-401.99144078237805), (-1882.057), (-1882.057)}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(8, doubleArray1.length);
      assertEquals(8, doubleArray0.length);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(32);
      assertNotNull(percentLengthLearning0);
      assertEquals(32, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      VarOrderHeap varOrderHeap1 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(varOrderHeap1).varActivity(anyInt());
      TabuListDecorator tabuListDecorator1 = new TabuListDecorator(varOrderHeap1);
      assertNotNull(tabuListDecorator1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      
      double double1 = tabuListDecorator1.varActivity(0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-1.0), double1, 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      solver0.setLearningStrategy(percentLengthLearning0);
      assertNotSame(tabuListDecorator1, tabuListDecorator0);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(32, percentLengthLearning0.getLimit());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      ClauseOnlyLearning<MixedDataStructureSingleWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureSingleWL>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(clauseOnlyLearning0, mixedDataStructureSingleWL0, tabuListDecorator1, glucose21Restarts0);
      assertNotNull(solver1);
      assertFalse(tabuListDecorator1.equals((Object)tabuListDecorator0));
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      // Undeclared exception!
      try { 
        solver0.getLiteralsPropagatedAt(2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      iVecInt0.growTo(11, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.realNumberOfVariables();
      assertFalse(int1 == int0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int1);
      
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      assertNotNull(printWriter0);
      assertEquals("", stringWriter0.toString());
      
      solver2.printStat(printWriter0, "Not implemented yet!");
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.decisionLevel());
      assertEquals("Not implemented yet!starts\t\t: 0\nNot implemented yet!conflicts\t\t: 0\nNot implemented yet!decisions\t\t: 0\nNot implemented yet!propagations\t\t: 0\nNot implemented yet!inspects\t\t: 0\nNot implemented yet!shortcuts\t\t: 0\nNot implemented yet!learnt literals\t: 0\nNot implemented yet!learnt binary clauses\t: 0\nNot implemented yet!learnt ternary clauses\t: 0\nNot implemented yet!learnt constraints\t: 0\nNot implemented yet!ignored constraints\t: 0\nNot implemented yet!root simplifications\t: 0\nNot implemented yet!removed literals (reason simplification)\t: 0\nNot implemented yet!reason swapping (by a shorter reason)\t: 0\nNot implemented yet!Calls to reduceDB\t: 0\nNot implemented yet!Number of update (reduction) of LBD\t: 0\nNot implemented yet!Imported unit clauses\t: 0\nNot implemented yet!speed (assignments/second)\t: 0.0\nNot implemented yet!non guided choices\t: 0\n", stringWriter0.toString());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(3215);
      assertNotNull(fixedLengthLearning0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-20;
      doubleArray0[1] = (double) 3215;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(tabuListDecorator0);
      assertEquals(5, doubleArray0.length);
      
      tabuListDecorator0.updateVar(0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      String string0 = fixedLengthLearning0.toString();
      assertNotNull(string0);
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals("Limit learning to clauses of size smaller or equal to 3215", string0);
      
      FixedPeriodRestarts fixedPeriodRestarts0 = new FixedPeriodRestarts();
      assertNotNull(fixedPeriodRestarts0);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, fixedPeriodRestarts0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(5, doubleArray0.length);
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      double[] doubleArray1 = solver0.getVariableHeuristics();
      assertSame(doubleArray1, doubleArray0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray1, 0.01);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(5, doubleArray1.length);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3215, fixedLengthLearning0.getMaxLength());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, tabuListDecorator0, fixedPeriodRestarts0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      solver1.setNeedToReduceDB(true);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning1 = new PercentLengthLearning<MixedDataStructureDanielWL>(3215);
      assertNotNull(percentLengthLearning1);
      assertEquals(3215, percentLengthLearning1.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning1, mixedDataStructureDanielWL0, tabuListDecorator0, fixedPeriodRestarts0);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(solver2);
      assertEquals(5, doubleArray0.length);
      assertEquals(3215, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
      
      solver2.reset();
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {1.0E-20, 3215.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(5, doubleArray0.length);
      assertEquals(3215, percentLengthLearning1.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0L, fixedPeriodRestarts0.getPeriod());
      assertEquals(0L, fixedPeriodRestarts0.nextRestartNumberOfConflict());
      assertTrue(fixedPeriodRestarts0.shouldRestart());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LearningStrategy<ClausalDataStructureWL> learningStrategy0 = (LearningStrategy<ClausalDataStructureWL>) mock(LearningStrategy.class, new ViolatedAssumptionAnswer());
      ClausalDataStructureWL clausalDataStructureWL0 = mock(ClausalDataStructureWL.class, new ViolatedAssumptionAnswer());
      doReturn((ILits) null).when(clausalDataStructureWL0).getVocabulary();
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(learningStrategy0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(2365);
      assertNotNull(percentLengthLearning0);
      assertEquals(2365, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, (RestartStrategy) null);
      assertNotNull(solver1);
      assertEquals(2365, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      
      ISimplifier iSimplifier0 = solver1.EXPENSIVE_SIMPLIFICATION_WLONLY;
      assertNotNull(iSimplifier0);
      
      Solver<MixedDataStructureDanielHT>[] solverArray0 = (Solver<MixedDataStructureDanielHT>[]) Array.newInstance(Solver.class, 0);
      ManyCore<Solver<MixedDataStructureDanielHT>> manyCore0 = new ManyCore<Solver<MixedDataStructureDanielHT>>(solverArray0);
      assertNotNull(manyCore0);
      assertEquals(0, solverArray0.length);
      
      // Undeclared exception!
      try { 
        manyCore0.unsatExplanation();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      int[] intArray0 = new int[2];
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ClausalDataStructureWL clausalDataStructureWL1 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      
      ILits iLits0 = clausalDataStructureWL1.getVocabulary();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertNotNull(iLits0);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits0.realnVars());
      assertEquals(0, iLits0.nVars());
      
      ILits iLits1 = clausalDataStructureWL1.getVocabulary();
      assertNotSame(clausalDataStructureWL1, clausalDataStructureWL0);
      assertSame(iLits1, iLits0);
      assertNotNull(iLits1);
      assertFalse(clausalDataStructureWL1.equals((Object)clausalDataStructureWL0));
      assertEquals(0, iLits1.nVars());
      assertEquals(0, iLits1.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams(0.0, 0.0, 0.0, 353);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(353, searchParams1.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax2 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax2);
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax1));
      assertFalse(cardinalityDataStructureYanMax2.equals((Object)cardinalityDataStructureYanMax0));
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning1 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertNotNull(activeLearning1);
      assertEquals(0.0, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      assertNotNull(varOrderHeap0);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams2 = new SearchParams((-1.0), 11);
      assertNotNull(searchParams2);
      assertFalse(searchParams2.equals((Object)searchParams1));
      assertFalse(searchParams2.equals((Object)searchParams0));
      assertEquals(0.999, searchParams2.getClaDecay(), 0.01);
      assertEquals((-1.0), searchParams2.getConflictBoundIncFactor(), 0.01);
      assertEquals(11, searchParams2.getInitConflictBound());
      assertEquals(0.95, searchParams2.getVarDecay(), 0.01);
      
      lubyRestarts0.onRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int0 = solver0.nConstraints();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(0, int0);
      
      NoLearningButHeuristics<MixedDataStructureSingleWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureSingleWL>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      assertNotNull(mixedDataStructureSingleWL0);
      
      Solver<MixedDataStructureSingleWL> solver1 = new Solver<MixedDataStructureSingleWL>(noLearningButHeuristics0, mixedDataStructureSingleWL0, searchParams0, varOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertFalse(searchParams0.equals((Object)searchParams2));
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setOrder(varOrderHeap0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(5, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.backtrack(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 1.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      tabuListDecorator0.assignLiteral(4);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      SearchParams searchParams1 = new SearchParams(4);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(4, searchParams1.getInitConflictBound());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertNotSame(searchParams0, searchParams1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(miniSATRestarts0.shouldRestart());
      
      miniSATRestarts0.onRestart();
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(150L, miniSATRestarts0.nextRestartNumberOfConflict());
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.addAtMostOnTheFly((int[]) null, 100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int1 = 907;
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary1 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary1);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary1, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setVerbose(true);
      assertNotSame(mixedDataStructureDanielWLConciseBinary1, mixedDataStructureDanielWLConciseBinary0);
      assertFalse(mixedDataStructureDanielWLConciseBinary1.equals((Object)mixedDataStructureDanielWLConciseBinary0));
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(4, solver0.newVar());
      assertTrue(solver0.isVerbose());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>(907);
      assertNotNull(fixedLengthLearning0);
      assertEquals(907, fixedLengthLearning0.getMaxLength());
      
      SearchParams searchParams1 = new SearchParams();
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(100, searchParams1.getInitConflictBound());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning1);
      assertFalse(fixedLengthLearning1.equals((Object)fixedLengthLearning0));
      assertEquals(3, fixedLengthLearning1.getMaxLength());
      
      Solver<CardinalityDataStructureYanMin> solver1 = null;
      try {
        solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, (CardinalityDataStructureYanMin) null, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SearchParams searchParams0 = new SearchParams((-1.0), 11);
      assertNotNull(searchParams0);
      assertEquals((-1.0), searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(11, searchParams0.getInitConflictBound());
      
      lubyRestarts0.onRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, (SearchParams) null, naturalStaticOrder0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.decayActivities();
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      System.setCurrentTimeMillis((-2286L));
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-2286L));
      assertNotNull(activeLearning0);
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      
      solver0.clearLearntClauses();
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, naturalStaticOrder0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      double[] doubleArray0 = solver0.getVariableHeuristics();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1871.622316);
      assertNotNull(activeLearning0);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2189;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 476;
      intArray0[6] = 500;
      intArray0[7] = 476;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(randomWalkDecorator0);
      assertEquals(8, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setInitConflictBound(32);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      searchParams0.setInitConflictBound(32);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(32L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, miniSATRestarts0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(solver0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      long long0 = solver0.getTimeoutMs();
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(4, solver0.newVar());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(2147483647L, long0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(solver1);
      assertEquals(8, intArray0.length);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(8, intArray0.length);
      
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0, iLogAble0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertNotNull(solver2);
      assertEquals(8, intArray0.length);
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(5, solver2.newVar());
      assertEquals(4, solver2.realNumberOfVariables());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(4, solver2.nVars());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      solver2.setSimplifier(solver0.EXPENSIVE_SIMPLIFICATION_WLONLY);
      assertNotSame(solver1, solver2);
      assertNotSame(solver2, solver1);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertEquals(8, intArray0.length);
      assertFalse(solver1.equals((Object)solver2));
      assertFalse(solver2.equals((Object)solver1));
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(5, solver0.nVars());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(9, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(10, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(9, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(8, solver2.nVars());
      assertEquals(9, solver2.newVar());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(8, solver2.realNumberOfVariables());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      
      solver0.setSearchParams(searchParams0);
      assertArrayEquals(new int[] {2189, 0, 0, 0, 0, 476, 500, 476}, intArray0);
      assertEquals(8, intArray0.length);
      assertEquals(1871.622316, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(7, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(8, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(7, solver0.nVars());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(0.0, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(miniSATRestarts0.shouldRestart());
      assertEquals(48L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>((-1.0));
      assertNotNull(activeLearning0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      int int0 = 4;
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(levelBasedVarOrderHeap0, 4);
      assertNotNull(tabuListDecorator0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      RestartStrategy restartStrategy0 = null;
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      activeLearning0.setVarActivityListener(solver0);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      
      SearchParams searchParams0 = solver0.getSearchParams();
      assertNotNull(searchParams0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("5A@(YQ01_Dc");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, (RestartStrategy) null, basicLauncher0);
      assertNotNull(solver1);
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals(8, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(7, solver0.nVars());
      assertEquals(7, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      IVecInt iVecInt0 = solver1.unsatExplanation();
      assertNull(iVecInt0);
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, activeLearning0.getLimit());
      assertEquals((-1.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(9, solver0.realNumberOfVariables());
      assertEquals(10, solver0.newVar());
      assertEquals(9, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      ActiveLearning<MixedDataStructureDanielHT> activeLearning1 = new ActiveLearning<MixedDataStructureDanielHT>();
      assertNotNull(activeLearning1);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      doReturn((String) null).when(varOrderHeap0).toString();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielHT> solver2 = new Solver<MixedDataStructureDanielHT>(activeLearning1, mixedDataStructureDanielHT0, searchParams0, randomWalkDecorator0, (RestartStrategy) null, basicLauncher0);
      assertNotNull(solver2);
      assertEquals(0.95, activeLearning1.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning1.getLimit());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(12, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(11, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(11, solver0.realNumberOfVariables());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertFalse(basicLauncher0.isSilent());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      // Undeclared exception!
      try { 
        cardinalityDataStructure0.createClause((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      solver0.unset(32);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SolverStats solverStats0 = solver1.getStats();
      assertNotNull(solverStats0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      VarOrderHeap varOrderHeap1 = new VarOrderHeap();
      assertNotNull(varOrderHeap1);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap1, 1.0);
      assertNotNull(randomWalkDecorator0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = varOrderHeap1.getVariableHeuristics();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(2);
      assertNotNull(lubyRestarts0);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int[] intArray0 = solver0.findModel();
      assertArrayEquals(new int[] {}, intArray0);
      assertNotNull(intArray0);
      assertEquals(0, intArray0.length);
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams1 = new SearchParams(2, 0.0, (-2291.213638), 4);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals((-2291.213638), searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.0, searchParams1.getClaDecay(), 0.01);
      assertEquals(2.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(4, searchParams1.getInitConflictBound());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax1, searchParams0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(searchParams0, searchParams1);
      assertNotNull(iLogAble0);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.nVars());
      assertEquals(4, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-3106.030594559196));
      assertNotNull(activeLearning0);
      assertEquals((-3106.030594559196), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(varOrderHeap1.equals((Object)varOrderHeap0));
      assertFalse(searchParams0.equals((Object)searchParams1));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.nVars());
      assertEquals(0, varOrderHeap1.numberOfInterestingVariables());
      assertEquals(1.0, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals((-3106.030594559196), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(lubyRestarts0.shouldRestart());
      assertEquals(2L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver2.forget(99);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver1.decayActivities();
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.unset(32);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(252.81);
      assertNotNull(activeLearning0);
      assertEquals(252.81, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver2);
      assertEquals(252.81, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(2, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SolverStats solverStats0 = solver2.getStats();
      assertNotNull(solverStats0);
      assertEquals(252.81, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(4, solver2.newVar());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.fixedSize((-1));
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      
      Map<String, Number> map0 = solver0.getStat();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(map0);
      assertEquals(2, intArray0.length);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning1);
      assertEquals(10, percentLengthLearning1.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, subsetVarOrder0, miniSATRestarts0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver1);
      assertEquals(2, intArray0.length);
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      ILogAble iLogAble0 = solver1.out;
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(2, intArray0.length);
      
      solver1.setLogger(iLogAble0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning1, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, miniSATRestarts0, iLogAble0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver2);
      assertEquals(2, intArray0.length);
      assertEquals(5, solver1.nVars());
      assertEquals(6, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(1, solver2.nVars());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      activeLearning0.setLimit((-2733));
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2733), activeLearning0.getLimit());
      
      solver2.unset(33);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isSolverKeptHot());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(10, percentLengthLearning1.getLimit());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals((-2733), activeLearning0.getLimit());
      
      // Undeclared exception!
      try { 
        solver2.isSatisfiable();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -908
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals((-1.0), double0, 0.01);
      
      tabuListDecorator0.setVarDecay((-1.0));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 6);
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean1 = solver0.simplifyDB();
      assertTrue(boolean1 == boolean0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean1);
      
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams((-3258));
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      double double1 = searchParams0.getVarDecay();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, double1, 0.01);
      
      double double2 = searchParams0.getClaDecay();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.999, double2, 0.01);
      
      Solver<ClausalDataStructureWL> solver1 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals((-3258), searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver1.suggestNextLiteralToBranchOn(512);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      miniSATRestarts0.onBackjumpToRootLevel();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      miniSATRestarts0.newConflict();
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(1463);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, tabuListDecorator0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      MiniSATRestarts miniSATRestarts1 = (MiniSATRestarts)solver0.getRestartStrategy();
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertSame(miniSATRestarts1, miniSATRestarts0);
      assertNotNull(miniSATRestarts1);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertTrue(miniSATRestarts1.shouldRestart());
      assertEquals(0L, miniSATRestarts1.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts1.toString());
      
      Constr constr0 = solver0.propagate();
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNull(constr0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(6, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, miniSATRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.nVars());
      assertFalse(solver1.isVerbose());
      assertEquals(7, solver1.realNumberOfVariables());
      assertEquals(8, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.decisionLevel());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      
      solver0.setLogger((ILogAble) null);
      assertSame(miniSATRestarts0, miniSATRestarts1);
      assertNotSame(solver0, solver1);
      assertFalse(solver0.equals((Object)solver1));
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(9, solver0.realNumberOfVariables());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(9, solver0.nVars());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(10, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      SearchParams searchParams0 = new SearchParams(0.95, 0.95, 0.0, 7);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(7);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      boolean boolean1 = noRestarts0.shouldRestart();
      assertFalse(boolean1 == boolean0);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(boolean1);
      
      noRestarts0.onBackjumpToRootLevel();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("L`,ooB'@DD");
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log((String) null);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(noLearningNoHeuristics0);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(noLearningNoHeuristics0, mixedDataStructureDanielWLConciseBinary0, searchParams0, naturalStaticOrder0, noRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getClaDecay(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = solver0.unsatExplanation();
      assertNull(iVecInt1);
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(4, solver0.newVar());
      assertEquals(3, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(7, searchParams0.getInitConflictBound());
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getClaDecay(), 0.01);
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      iVecInt0.growTo(1468, 11);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      // Undeclared exception!
      try { 
        solver0.fromLastDecisionLevel((IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(5);
      assertNotNull(percentLengthLearning0);
      assertEquals(5, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      NoRestarts noRestarts0 = new NoRestarts();
      assertNotNull(noRestarts0);
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      boolean boolean0 = noRestarts0.shouldRestart();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertFalse(boolean0);
      
      noRestarts0.onBackjumpToRootLevel();
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, noRestarts0);
      assertNotNull(solver0);
      assertEquals(5, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("NoRestarts", noRestarts0.toString());
      assertFalse(noRestarts0.shouldRestart());
      assertEquals(9223372036854775807L, noRestarts0.nextRestartNumberOfConflict());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      
      int int0 = (-529);
      // Undeclared exception!
      try { 
        solver0.cancelUntil((-529));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(1451.5, 3);
      assertNotNull(searchParams0);
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1451.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1451.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean1 = solver0.isNeedToReduceDB();
      assertFalse(boolean1 == boolean0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(3, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1451.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics0);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      solver0.unset(32);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(4, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(3, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(1, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      SolverStats solverStats0 = solver1.getStats();
      assertNotNull(solverStats0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, solverStats0.getUpdateLBD());
      assertEquals(0, solverStats0.getStarts());
      assertEquals(0L, solverStats0.getIgnoredclauses());
      assertEquals(0L, solverStats0.getDecisions());
      assertEquals(0, solverStats0.getShortcuts());
      assertEquals(0L, solverStats0.getPropagations());
      assertEquals(0L, solverStats0.getRootSimplifications());
      assertEquals(0L, solverStats0.getLearnedternaryclauses());
      assertEquals(0L, solverStats0.getChangedreason());
      assertEquals(0L, solverStats0.getLearnedliterals());
      assertEquals(0L, solverStats0.getReducedliterals());
      assertEquals(0L, solverStats0.getConflicts());
      assertEquals(0, solverStats0.getReduceddb());
      assertEquals(0L, solverStats0.getInspects());
      assertEquals(0L, solverStats0.getLearnedclauses());
      assertEquals(0L, solverStats0.getLearnedbinaryclauses());
      assertEquals(0, solverStats0.getImportedUnits());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<CardinalityDataStructureYanMin> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMin>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams(907);
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(907, searchParams1.getInitConflictBound());
      
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(miniSATLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver2);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1, lubyRestarts0.luby());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(907, searchParams1.getInitConflictBound());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertFalse(solver2.isVerbose());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(0, solver2.nConstraints());
      assertEquals(1, solver2.realNumberOfVariables());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver2.addParity(iVecInt0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.minisat.constraints.xor.Xor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      assertNotNull(rSATPhaseSelectionStrategy0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      assertNotNull(varOrderHeap0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      varOrderHeap0.updateVarAtDecisionLevel(3123);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, tabuListDecorator0, (RestartStrategy) null);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals("lightweight component caching from RSAT", rSATPhaseSelectionStrategy0.toString());
      assertEquals(0, varOrderHeap0.numberOfInterestingVariables());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>(0.0);
      assertNotNull(activeLearning0);
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1952.9756475241447, 1952.9756475241447, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1952.9756475241447, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1952.9756475241447, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(4, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax1);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax1, searchParams0, subsetVarOrder0, (RestartStrategy) null);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(solver1);
      assertEquals(4, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1952.9756475241447, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1952.9756475241447, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(iLogAble0);
      assertEquals(4, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(4, solver1.newVar());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(3, solver1.nVars());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1952.9756475241447, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1952.9756475241447, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      Solver<CardinalityDataStructure> solver2 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, subsetVarOrder0, (RestartStrategy) null, iLogAble0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(solver2);
      assertEquals(4, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(6, solver1.newVar());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.nVars());
      assertEquals(0, solver2.nConstraints());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1952.9756475241447, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1952.9756475241447, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      IVecInt iVecInt0 = solver2.createBlockingClauseForCurrentModel();
      assertNotSame(cardinalityDataStructureYanMax1, cardinalityDataStructureYanMax0);
      assertNotSame(solver1, solver0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(iVecInt0);
      assertEquals(4, intArray0.length);
      assertFalse(cardinalityDataStructureYanMax1.equals((Object)cardinalityDataStructureYanMax0));
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(7, solver1.nVars());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver2.getTimeout());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(4, solver2.newVar());
      assertEquals(0, solver2.getPropagationLevel());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.nConstraints());
      assertEquals(3, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(3, solver2.realNumberOfVariables());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0.0, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1952.9756475241447, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1952.9756475241447, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      // Undeclared exception!
      try { 
        iVecInt0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      
      eMARestarts0.newLearnedClause(unitClause0, 0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertTrue(unitClause0.isSatisfied());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertEquals(1, unitClause0.size());
      assertFalse(unitClause0.simplify());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertFalse(unitClause0.learnt());
      
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      assertNotNull(activeLearning0);
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      assertNotNull(cardinalityDataStructure0);
      
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      assertNotNull(basicLauncher0);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("5S@(YQ01_Dc");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      basicLauncher0.log("M/%r=Hi@>3pp|");
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, eMARestarts0, basicLauncher0);
      assertNotNull(solver0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0.95, activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0.95, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(37, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(basicLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, basicLauncher0.getExitCode());
      assertEquals(0L, basicLauncher0.getBeginTime());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.getPropagationLevel());
      
      // Undeclared exception!
      try { 
        solver0.record(unitClause0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NoLearningButHeuristics<ClausalDataStructureWL> noLearningButHeuristics0 = new NoLearningButHeuristics<ClausalDataStructureWL>();
      assertNotNull(noLearningButHeuristics0);
      
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      assertNotNull(clausalDataStructureWL0);
      
      ILits iLits0 = clausalDataStructureWL0.getVocabulary();
      assertNotNull(iLits0);
      assertEquals(0, iLits0.nVars());
      assertEquals(0, iLits0.realnVars());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      ArminRestarts arminRestarts0 = new ArminRestarts();
      assertNotNull(arminRestarts0);
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(noLearningButHeuristics0, clausalDataStructureWL0, searchParams0, subsetVarOrder0, arminRestarts0, mUSLauncher0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.nVars());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      Map<String, Number> map0 = solver0.getStat();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(map0);
      assertEquals(2, intArray0.length);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals("Armin Biere (Picosat) restarts strategy", arminRestarts0.toString());
      assertEquals(0L, arminRestarts0.nextRestartNumberOfConflict());
      assertTrue(arminRestarts0.shouldRestart());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertFalse(map0.isEmpty());
      assertEquals(17, map0.size());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      assertNotNull(percentLengthLearning0);
      assertEquals(10, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int0);
      
      int int1 = searchParams0.getInitConflictBound();
      assertTrue(int1 == int0);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(100, int1);
      
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals(10, percentLengthLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      
      VecInt vecInt0 = (VecInt)solver0.implied;
      assertNotNull(vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver1);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(1, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      
      solver1.expireTimeout();
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.01;
      doubleArray0[4] = (-2702.8847357);
      doubleArray0[5] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.01, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.01, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.01, (-2702.8847357), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      assertNotNull(glucose21Restarts0);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      
      randomWalkDecorator0.assignLiteral(0);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.01, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, randomWalkDecorator0, glucose21Restarts0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.01, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals("Glucose 2.1 dynamic restart strategy", glucose21Restarts0.toString());
      assertEquals(0L, glucose21Restarts0.nextRestartNumberOfConflict());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.getPropagationLevel());
      
      int int0 = 12;
      // Undeclared exception!
      try { 
        solver0.model();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      assertNotNull(clauseOnlyLearning0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      assertNotNull(searchParams0);
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      
      int int0 = searchParams0.getInitConflictBound();
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, int0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      boolean boolean0 = lubyRestarts0.shouldRestart();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertTrue(boolean0);
      
      lubyRestarts0.onBackjumpToRootLevel();
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("\"=OjtPT]");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      mUSLauncher0.log("");
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      assertNotNull(solver0);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      IVecInt iVecInt0 = VecInt.EMPTY;
      assertNotNull(iVecInt0);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      IVecInt iVecInt1 = solver0.unsatExplanation();
      assertNull(iVecInt1);
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertEquals(3, solver0.realNumberOfVariables());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      iVecInt0.growTo(11, 11);
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      
      Set<Integer> set0 = solver0.fromLastDecisionLevel(iVecInt0);
      assertFalse(set0.contains(int0));
      assertNotNull(set0);
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("Limit learning to clauses using watched literals only", clauseOnlyLearning0.toString());
      assertEquals(0.0, searchParams0.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1.0E-20, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.nConstraints());
      assertFalse(solver0.isVerbose());
      assertEquals(0, solver0.getPropagationLevel());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(5, solver0.nVars());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(5, solver0.realNumberOfVariables());
      assertEquals(6, solver0.newVar());
      assertEquals("c ", solver0.getLogPrefix());
      assertTrue(iVecInt0.isEmpty());
      assertEquals(0, iVecInt0.size());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      assertNotNull(miniSATLearning0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((double[]) null).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertNotNull(randomWalkDecorator0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray0 = randomWalkDecorator0.getVariableHeuristics();
      assertNull(doubleArray0);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      int int1 = solver1.realNumberOfVariables();
      assertFalse(int1 == int0);
      assertEquals("Learn all clauses as in MiniSAT", miniSATLearning0.toString());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(3, solver1.nVars());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>(0);
      assertNotNull(fixedLengthLearning0);
      assertEquals(0, fixedLengthLearning0.getMaxLength());
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[1] = 0.01;
      doubleArray0[4] = (-2702.8847357);
      doubleArray0[5] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(randomWalkDecorator0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      double[] doubleArray1 = randomWalkDecorator0.getVariableHeuristics();
      assertSame(doubleArray0, doubleArray1);
      assertSame(doubleArray1, doubleArray0);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(6, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      
      PercentLengthLearning<MixedDataStructureDanielWLConciseBinary> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWLConciseBinary>(0);
      assertNotNull(percentLengthLearning0);
      assertEquals(0, percentLengthLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      assertNotNull(lubyRestarts0);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(percentLengthLearning0, mixedDataStructureDanielWLConciseBinary0, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver0);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver0.setVerbose(true);
      assertSame(doubleArray0, doubleArray1);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, percentLengthLearning0.getLimit());
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(3, solver0.nVars());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      assertTrue(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning1 = new FixedLengthLearning<CardinalityDataStructureYanMin>(32);
      assertNotNull(fixedLengthLearning1);
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      
      SearchParams searchParams0 = new SearchParams();
      assertNotNull(searchParams0);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      assertEquals(100, searchParams0.getInitConflictBound());
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      assertNotNull(naturalStaticOrder0);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      naturalStaticOrder0.undo(180);
      assertEquals("Natural static ordering", naturalStaticOrder0.toString());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams(0.0, 1.0E-20, 1.0E-20, (-1897));
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals((-1897), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      int int0 = searchParams1.getInitConflictBound();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals((-1897), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals((-1897), int0);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning1, cardinalityDataStructureYanMin0, searchParams1, randomWalkDecorator0, lubyRestarts0);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertNotNull(solver1);
      assertEquals(6, doubleArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      assertEquals((-1897), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(2, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(1, solver1.nVars());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      solver1.sortOnActivity();
      assertSame(doubleArray0, doubleArray1);
      assertNotSame(searchParams1, searchParams0);
      assertArrayEquals(new double[] {0.0, 0.01, 0.0, 0.0, (-2702.8847357), 0.0}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(32, fixedLengthLearning1.getMaxLength());
      assertEquals((-1897), searchParams1.getInitConflictBound());
      assertEquals(0.0, searchParams1.getVarDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.0E-20, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.nConstraints());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(3, solver1.nVars());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(1466.2321, randomWalkDecorator0.getProbability(), 0.01);
      assertEquals(0, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningNoHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      assertNotNull(tabuListDecorator0);
      
      double double0 = tabuListDecorator0.varActivity(0);
      assertEquals(0.0, double0, 0.01);
      
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      assertNotNull(lubyRestarts0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(2, 32);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      assertNotNull(fixedLengthLearning0);
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      assertNotNull(mixedDataStructureDanielWL0);
      
      SearchParams searchParams0 = new SearchParams(860.14620979511, 1210.4009528119652, 0.0, 32);
      assertNotNull(searchParams0);
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(860.14620979511, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1210.4009528119652, searchParams0.getClaDecay(), 0.01);
      
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      assertNotNull(noLearningNoHeuristics1);
      
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      assertNotNull(cardinalityDataStructureYanMax0);
      
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver0);
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(860.14620979511, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1210.4009528119652, searchParams0.getClaDecay(), 0.01);
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertEquals(0, solver0.decisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      assertNotNull(solver1);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(3, solver1.nVars());
      assertEquals(3, solver1.realNumberOfVariables());
      assertEquals(4, solver1.newVar());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      ILogAble iLogAble0 = solver1.getLogger();
      assertNotSame(solver1, solver0);
      assertNotNull(iLogAble0);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals(5, solver1.realNumberOfVariables());
      assertEquals(6, solver1.newVar());
      assertEquals(5, solver1.nVars());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
      assertNotNull(solver2);
      assertFalse(solver1.equals((Object)solver0));
      assertEquals(2147483, solver2.getTimeout());
      assertEquals(0, solver2.nConstraints());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(0, solver2.decisionLevel());
      assertEquals(0, solver2.getPropagationLevel());
      assertFalse(solver2.isVerbose());
      assertFalse(solver2.isDBSimplificationAllowed());
      assertEquals(0, solver2.currentDecisionLevel());
      assertEquals(1, solver2.nVars());
      assertEquals("c ", solver2.getLogPrefix());
      assertEquals(2, solver2.newVar());
      assertEquals(1, solver2.realNumberOfVariables());
      assertEquals(0L, lubyRestarts0.nextRestartNumberOfConflict());
      assertTrue(lubyRestarts0.shouldRestart());
      assertEquals(32, lubyRestarts0.getFactor());
      assertEquals(1, lubyRestarts0.luby());
      assertEquals(3, fixedLengthLearning0.getMaxLength());
      assertEquals(32, searchParams0.getInitConflictBound());
      assertEquals(860.14620979511, searchParams0.getVarDecay(), 0.01);
      assertEquals(0.0, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(1210.4009528119652, searchParams0.getClaDecay(), 0.01);
      assertEquals(7, solver1.nVars());
      assertEquals(7, solver1.realNumberOfVariables());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(8, solver1.newVar());
      assertEquals(0, solver1.nConstraints());
      assertEquals(0, solver1.getPropagationLevel());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(0, solver1.decisionLevel());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(32, LubyRestarts.DEFAULT_LUBY_FACTOR);
      
      // Undeclared exception!
      try { 
        solver2.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielHT> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielHT>();
      assertNotNull(noLearningButHeuristics0);
      
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      assertNotNull(mixedDataStructureDanielHT0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(subsetVarOrder0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      subsetVarOrder0.varDecayActivity();
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      assertNotNull(mUSLauncher0);
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("%d %d %d %d %d %d %d %.2f %d %d %.2f ");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      mUSLauncher0.log("ACTIVITY");
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      
      EMARestarts eMARestarts0 = new EMARestarts();
      assertNotNull(eMARestarts0);
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      eMARestarts0.onBackjumpToRootLevel();
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      
      UnitClause unitClause0 = new UnitClause(0);
      assertNotNull(unitClause0);
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      
      eMARestarts0.newLearnedClause(unitClause0, (-908));
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(1, unitClause0.requiredNumberOfSatisfiedLiterals());
      assertEquals(1, unitClause0.size());
      assertEquals(0.0, unitClause0.getActivity(), 0.01);
      assertTrue(unitClause0.isSatisfied());
      assertFalse(unitClause0.canBePropagatedMultipleTimes());
      assertTrue(unitClause0.canBeSatisfiedByCountingLiterals());
      assertFalse(unitClause0.simplify());
      assertFalse(unitClause0.learnt());
      
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningButHeuristics0, mixedDataStructureDanielHT0, (SearchParams) null, subsetVarOrder0, eMARestarts0, mUSLauncher0);
      assertArrayEquals(new int[] {(-908), 1326}, intArray0);
      assertNotNull(solver0);
      assertEquals(2, intArray0.length);
      assertEquals(0, subsetVarOrder0.numberOfInterestingVariables());
      assertEquals(ExitCode.UNKNOWN, mUSLauncher0.getExitCode());
      assertEquals(0L, mUSLauncher0.getBeginTime());
      assertFalse(mUSLauncher0.isSilent());
      assertEquals(0L, eMARestarts0.nextRestartNumberOfConflict());
      assertEquals("Exponential Moving Average (EMA, Biere) restarts strategy", eMARestarts0.toString());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(1, solver0.nVars());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(0, solver0.nConstraints());
      assertEquals(2, solver0.newVar());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      
      // Undeclared exception!
      try { 
        solver0.modelWithInternalVariables();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      System.setCurrentTimeMillis((-2286L));
      ActiveLearning<MixedDataStructureDanielWLConciseBinary> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWLConciseBinary>((-2286L));
      assertNotNull(activeLearning0);
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      assertNotNull(mixedDataStructureDanielWLConciseBinary0);
      
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      assertNotNull(levelBasedVarOrderHeap0);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      levelBasedVarOrderHeap0.assignLiteral(907);
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      assertNotNull(miniSATRestarts0);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      SearchParams searchParams0 = new SearchParams(0);
      assertNotNull(searchParams0);
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.onBackjumpToRootLevel();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(0, searchParams0.getInitConflictBound());
      assertEquals(1.5, searchParams0.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, searchParams0.getClaDecay(), 0.01);
      assertEquals(0.95, searchParams0.getVarDecay(), 0.01);
      
      miniSATRestarts0.onRestart();
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(activeLearning0, mixedDataStructureDanielWLConciseBinary0, levelBasedVarOrderHeap0, miniSATRestarts0);
      assertNotNull(solver0);
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(1, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(2, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertEquals(1, solver0.realNumberOfVariables());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      
      solver0.clearLearntClauses();
      assertEquals((-2286.0), activeLearning0.getActivityPercent(), 0.01);
      assertEquals(0, activeLearning0.getLimit());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(3, solver0.nVars());
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertEquals(0, solver0.decisionLevel());
      assertEquals(4, solver0.newVar());
      assertEquals(0, solver0.getPropagationLevel());
      assertEquals(0, solver0.nConstraints());
      assertEquals(0, solver0.currentDecisionLevel());
      assertFalse(solver0.isVerbose());
      assertEquals("c ", solver0.getLogPrefix());
      assertEquals(3, solver0.realNumberOfVariables());
      
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>(907);
      assertNotNull(percentLengthLearning0);
      assertEquals(907, percentLengthLearning0.getLimit());
      
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      assertNotNull(cardinalityDataStructureYanMin0);
      
      SearchParams searchParams1 = new SearchParams((-3258));
      assertNotNull(searchParams1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      double double0 = searchParams1.getVarDecay();
      assertNotSame(searchParams1, searchParams0);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.95, double0, 0.01);
      
      double double1 = searchParams1.getClaDecay();
      assertNotSame(searchParams1, searchParams0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      assertEquals(0.999, double1, 0.01);
      
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, (ILogAble) null);
      assertNotNull(solver1);
      assertFalse(searchParams1.equals((Object)searchParams0));
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(0, solver1.nConstraints());
      assertEquals("c ", solver1.getLogPrefix());
      assertEquals(0, solver1.currentDecisionLevel());
      assertEquals(1, solver1.nVars());
      assertEquals(1, solver1.realNumberOfVariables());
      assertEquals(2, solver1.newVar());
      assertFalse(solver1.isVerbose());
      assertEquals(0, solver1.getPropagationLevel());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertEquals(2147483, solver1.getTimeout());
      assertEquals(0, solver1.decisionLevel());
      assertEquals(0, levelBasedVarOrderHeap0.numberOfInterestingVariables());
      assertTrue(miniSATRestarts0.shouldRestart());
      assertEquals(0L, miniSATRestarts0.nextRestartNumberOfConflict());
      assertEquals("MiniSAT restarts strategy", miniSATRestarts0.toString());
      assertEquals(907, percentLengthLearning0.getLimit());
      assertEquals(0.95, searchParams1.getVarDecay(), 0.01);
      assertEquals((-3258), searchParams1.getInitConflictBound());
      assertEquals(0.999, searchParams1.getClaDecay(), 0.01);
      assertEquals(1.5, searchParams1.getConflictBoundIncFactor(), 0.01);
      
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      assertNotNull(dimacsStringSolver0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      
      VecInt vecInt0 = new VecInt(0, 0);
      assertNotNull(vecInt0);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      
      IVecInt iVecInt0 = vecInt0.push((-3761));
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, vecInt0);
      assertNotNull(iVecInt0);
      assertEquals((-3761), vecInt0.last());
      assertEquals(1, vecInt0.size());
      assertFalse(vecInt0.isEmpty());
      assertEquals(1, iVecInt0.size());
      assertEquals((-3761), iVecInt0.last());
      assertFalse(iVecInt0.isEmpty());
      
      IVecInt iVecInt1 = iVecInt0.pop();
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertNotNull(iVecInt1);
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      IConstr iConstr0 = dimacsStringSolver0.addAtMost(iVecInt1, (-3761));
      assertSame(vecInt0, iVecInt1);
      assertSame(vecInt0, iVecInt0);
      assertSame(iVecInt0, iVecInt1);
      assertSame(iVecInt0, vecInt0);
      assertSame(iVecInt1, vecInt0);
      assertSame(iVecInt1, iVecInt0);
      assertNull(iConstr0);
      assertEquals(0, dimacsStringSolver0.realNumberOfVariables());
      assertEquals(0, dimacsStringSolver0.nConstraints());
      assertEquals(0, dimacsStringSolver0.getTimeout());
      assertFalse(dimacsStringSolver0.isVerbose());
      assertFalse(dimacsStringSolver0.isDBSimplificationAllowed());
      assertFalse(dimacsStringSolver0.isSolverKeptHot());
      assertEquals(0, dimacsStringSolver0.newVar());
      assertEquals("", dimacsStringSolver0.getLogPrefix());
      assertEquals(0, dimacsStringSolver0.nVars());
      assertEquals(0L, dimacsStringSolver0.getTimeoutMs());
      assertTrue(vecInt0.isEmpty());
      assertEquals(0, vecInt0.size());
      assertEquals(0, iVecInt0.size());
      assertTrue(iVecInt0.isEmpty());
      assertTrue(iVecInt1.isEmpty());
      assertEquals(0, iVecInt1.size());
      
      // Undeclared exception!
      try { 
        solver1.removeSubsumedConstr((IConstr) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Reference to the constraint to remove needed!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      searchParams0.getInitConflictBound();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(907);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      lubyRestarts0.onBackjumpToRootLevel();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("\"=OjtPT]");
      mUSLauncher0.log("c ");
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      iVecInt0.growTo(11, 11);
      solver0.fromLastDecisionLevel(iVecInt0);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      double[] doubleArray0 = new double[0];
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      randomWalkDecorator0.getVariableHeuristics();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      solver1.realNumberOfVariables();
      NoLearningNoHeuristics<CardinalityDataStructureYanMin> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(noLearningNoHeuristics0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0);
      solver2.setTimeout((-964));
      assertEquals((-964), solver2.getTimeout());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ActiveLearning<MixedDataStructureSingleWL> activeLearning0 = new ActiveLearning<MixedDataStructureSingleWL>();
      MixedDataStructureSingleWL mixedDataStructureSingleWL0 = new MixedDataStructureSingleWL();
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      subsetVarOrder0.varDecayActivity();
      Solver<MixedDataStructureSingleWL> solver0 = new Solver<MixedDataStructureSingleWL>(activeLearning0, mixedDataStructureSingleWL0, subsetVarOrder0, (RestartStrategy) null);
      solver0.nextFreeVarId(false);
      assertEquals(2, solver0.newVar());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      naturalStaticOrder0.init();
      fixedLengthLearning0.init();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      naturalStaticOrder0.select();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      try { 
        solver1.discardCurrentModel();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      UnitClause unitClause0 = new UnitClause(1642);
      lubyRestarts0.newLearnedClause(unitClause0, 1000);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(37, 37);
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>((ASolverFactory<Solver<CardinalityDataStructureYanMin>>) null);
      basicLauncher0.log("5S@(YQ01_Dc");
      basicLauncher0.log("5S@(YQ01_Dc");
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, lubyRestarts0, basicLauncher0);
      ILogAble iLogAble0 = solver0.getLogger();
      iLogAble0.log((String) null);
      SearchParams searchParams1 = new SearchParams();
      cardinalityDataStructure0.setUnitPropagationListener(solver0);
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      randomLiteralSelectionStrategy0.select((-222));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(activeLearning0, cardinalityDataStructure0, searchParams1, varOrderHeap0, lubyRestarts0, basicLauncher0);
      // Undeclared exception!
      try { 
        solver1.record(unitClause0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1643
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Lits", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      naturalStaticOrder0.init();
      fixedLengthLearning0.init();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      naturalStaticOrder0.select();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, naturalStaticOrder0, lubyRestarts0);
      UnitClause unitClause0 = new UnitClause((-2276));
      unitClause0.getActivity();
      // Undeclared exception!
      try { 
        solver1.learn(unitClause0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.cnf.UnitClause", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>(0);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = null;
      IOrder iOrder0 = null;
      NoRestarts noRestarts0 = new NoRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      String string0 = "\\\"=OjtPT]";
      String[] stringArray0 = new String[2];
      mUSLauncher0.displayLicense();
      stringArray0[0] = "\"=OjtPT]";
      stringArray0[1] = "c ";
      // Undeclared exception!
      try { 
        mUSLauncher0.run(stringArray0);
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>(3);
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.getInitConflictBound();
      searchParams0.getInitConflictBound();
      PercentLengthLearning<CardinalityDataStructureYanMax> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams1 = new SearchParams(809.5797, 1);
      PureOrder pureOrder0 = new PureOrder((-336));
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(percentLengthLearning0, cardinalityDataStructureYanMax0, searchParams1, pureOrder0, eMARestarts0);
      // Undeclared exception!
      try { 
        solver0.varBumpActivity((-336));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -168
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>(1871.622316);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      int[] intArray0 = new int[8];
      intArray0[0] = 2205;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-4266);
      intArray0[5] = 476;
      intArray0[6] = 500;
      intArray0[7] = 2401;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(subsetVarOrder0, 0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams0 = new SearchParams(0);
      searchParams0.setInitConflictBound(32);
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      miniSATRestarts0.onRestart();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, miniSATRestarts0);
      long long0 = solver0.getTimeoutMs();
      assertEquals(2147483647L, long0);
      
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0);
      ILogAble iLogAble0 = solver1.out;
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, searchParams0, randomWalkDecorator0, miniSATRestarts0, iLogAble0);
      solver2.setSimplifier(solver0.EXPENSIVE_SIMPLIFICATION_WLONLY);
      assertFalse(solver2.isDBSimplificationAllowed());
      assertFalse(solver2.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver2.isVerbose());
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-3258));
      searchParams0.getVarDecay();
      searchParams0.getClaDecay();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(907);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams1 = new SearchParams(0);
      miniSATRestarts0.init(searchParams1, (SolverStats) null);
      miniSATRestarts0.onRestart();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      int[] intArray0 = new int[0];
      solver0.addAtMostOnTheFly(intArray0, 907);
      FixedLengthLearning<CardinalityDataStructureYanMax> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      miniSATRestarts0.reset();
      miniSATRestarts0.reset();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(fixedLengthLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, miniSATRestarts0);
      // Undeclared exception!
      try { 
        solver1.primeImplicant((-3258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Use a valid Dimacs var id as argument!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      tabuListDecorator0.varActivity(0);
      tabuListDecorator0.setVarDecay(0.0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 880);
      FixedLengthLearning<MixedDataStructureDanielWL> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(47, 860.14620979511, 0.0, 2);
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics1 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, searchParams0, tabuListDecorator0, lubyRestarts0);
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics1, cardinalityDataStructureYanMax0, tabuListDecorator0, lubyRestarts0);
      ILogAble iLogAble0 = solver1.getLogger();
      Solver<MixedDataStructureDanielWL> solver2 = new Solver<MixedDataStructureDanielWL>(fixedLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0, iLogAble0);
      // Undeclared exception!
      try { 
        solver2.forget(0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause((-1663));
      fixedLengthLearning0.setMaxLength((-1663));
      eMARestarts0.newLearnedClause(unitClause0, 37);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts0);
      solver0.assume(37);
      solver0.truthValue(58);
      assertEquals(1, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams((-3258));
      searchParams0.getVarDecay();
      searchParams0.getClaDecay();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(907);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, levelBasedVarOrderHeap0, miniSATRestarts0);
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("\"=OjtPT]");
      mUSLauncher0.log("\"=OjtPT]");
      SearchParams searchParams1 = new SearchParams();
      searchParams1.getInitConflictBound();
      searchParams1.getInitConflictBound();
      searchParams1.getConflictBoundIncFactor();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(percentLengthLearning0, cardinalityDataStructureYanMin0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0);
      VecInt vecInt0 = (VecInt)solver1.implied;
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams1, levelBasedVarOrderHeap0, miniSATRestarts0, mUSLauncher0);
      try { 
        solver2.addExactly(vecInt0, 2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating trivially inconsistent constraint
         //
         verifyException("org.sat4j.minisat.constraints.card.MaxWatchCard", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      subsetVarOrder0.varDecayActivity();
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams0 = new SearchParams(0);
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      miniSATRestarts0.onRestart();
      Solver<CardinalityDataStructure> solver0 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure0, subsetVarOrder0, miniSATRestarts0);
      solver0.getStat();
      PercentLengthLearning<CardinalityDataStructureYanMin> percentLengthLearning1 = new PercentLengthLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      PureOrder pureOrder0 = new PureOrder();
      Solver<CardinalityDataStructureYanMax> solver1 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax0, pureOrder0, miniSATRestarts0);
      clauseOnlyLearning0.setSolver(solver1);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax1 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver2 = new Solver<CardinalityDataStructureYanMax>(clauseOnlyLearning0, cardinalityDataStructureYanMax1, searchParams0, subsetVarOrder0, miniSATRestarts0);
      solver2.getVariableHeuristics();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning2 = new PercentLengthLearning<CardinalityDataStructure>(15);
      CardinalityDataStructure cardinalityDataStructure1 = new CardinalityDataStructure();
      Solver<CardinalityDataStructure> solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning0, cardinalityDataStructure1, subsetVarOrder0, miniSATRestarts0);
      solver3.setNeedToReduceDB(true);
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning3 = new PercentLengthLearning<MixedDataStructureDanielWL>(2147);
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver4 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning3, mixedDataStructureDanielWL0, subsetVarOrder0, miniSATRestarts0);
      solver4.reset();
      assertEquals(0, solver4.nVars());
      
      solver0.decisionLevel();
      assertFalse(solver0.isVerbose());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts0);
      solver0.assume(37);
      assertEquals(1, solver0.getPropagationLevel());
      
      MiniSATLearning<CardinalityDataStructure> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams((-782.341931), 37, (-1663), 0);
      Solver<CardinalityDataStructure> solver1 = new Solver<CardinalityDataStructure>(miniSATLearning0, cardinalityDataStructure0, searchParams0, naturalStaticOrder0, eMARestarts0);
      solver1.getDSFactory();
      assertEquals(2147483, solver1.getTimeout());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      NoLearningButHeuristics<MixedDataStructureDanielWL> noLearningButHeuristics0 = new NoLearningButHeuristics<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      EMARestarts eMARestarts0 = new EMARestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(noLearningButHeuristics0, mixedDataStructureDanielWL0, varOrderHeap0, eMARestarts0);
      solver0.isSatisfiable(false);
      //  // Unstable assertion: assertEquals(1, solver0.nVars());
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWLConciseBinary>();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      SearchParams searchParams0 = new SearchParams(0.0, 1.0E-20, 1.0E-20, 0);
      searchParams0.getInitConflictBound();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(907);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      lubyRestarts0.onBackjumpToRootLevel();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      mUSLauncher0.log("\"=OjtPT]");
      mUSLauncher0.log("");
      Solver<MixedDataStructureDanielWLConciseBinary> solver0 = new Solver<MixedDataStructureDanielWLConciseBinary>(clauseOnlyLearning0, mixedDataStructureDanielWLConciseBinary0, searchParams0, levelBasedVarOrderHeap0, lubyRestarts0, mUSLauncher0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      iVecInt0.growTo(11, 11);
      solver0.fromLastDecisionLevel(iVecInt0);
      MiniSATLearning<MixedDataStructureDanielWL> miniSATLearning0 = new MiniSATLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn(doubleArray0).when(varOrderHeap0).getVariableHeuristics();
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(varOrderHeap0, 1466.2321);
      randomWalkDecorator0.getVariableHeuristics();
      Solver<MixedDataStructureDanielWL> solver1 = new Solver<MixedDataStructureDanielWL>(miniSATLearning0, mixedDataStructureDanielWL0, randomWalkDecorator0, lubyRestarts0);
      solver1.realNumberOfVariables();
      PercentLengthLearning<ClausalDataStructureWL> percentLengthLearning0 = new PercentLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      Solver<ClausalDataStructureWL> solver2 = new Solver<ClausalDataStructureWL>(percentLengthLearning0, clausalDataStructureWL0, levelBasedVarOrderHeap0, lubyRestarts0);
      StringWriter stringWriter0 = new StringWriter(0);
      PrintWriter printWriter0 = new PrintWriter(stringWriter0);
      solver2.printStat(printWriter0, "Not implemented yet!");
      assertEquals("Not implemented yet!starts\t\t: 0\nNot implemented yet!conflicts\t\t: 0\nNot implemented yet!decisions\t\t: 0\nNot implemented yet!propagations\t\t: 0\nNot implemented yet!inspects\t\t: 0\nNot implemented yet!shortcuts\t\t: 0\nNot implemented yet!learnt literals\t: 0\nNot implemented yet!learnt binary clauses\t: 0\nNot implemented yet!learnt ternary clauses\t: 0\nNot implemented yet!learnt constraints\t: 0\nNot implemented yet!ignored constraints\t: 0\nNot implemented yet!root simplifications\t: 0\nNot implemented yet!removed literals (reason simplification)\t: 0\nNot implemented yet!reason swapping (by a shorter reason)\t: 0\nNot implemented yet!Calls to reduceDB\t: 0\nNot implemented yet!Number of update (reduction) of LBD\t: 0\nNot implemented yet!Imported unit clauses\t: 0\nNot implemented yet!speed (assignments/second)\t: 0.0\nNot implemented yet!non guided choices\t: 0\n", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts(0);
      naturalStaticOrder0.getVariableHeuristics();
      Glucose21Restarts glucose21Restarts0 = new Glucose21Restarts();
      LevelBasedVarOrderHeap levelBasedVarOrderHeap0 = new LevelBasedVarOrderHeap();
      levelBasedVarOrderHeap0.assignLiteral(907);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, levelBasedVarOrderHeap0, glucose21Restarts0);
      // Undeclared exception!
      try { 
        solver0.setLearningStrategy(activeLearning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      FixedLengthLearning<CardinalityDataStructureYanMin> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructureYanMin>((-991));
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      SearchParams searchParams0 = new SearchParams();
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      subsetVarOrder0.varDecayActivity();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, subsetVarOrder0, eMARestarts0);
      RestartStrategy restartStrategy0 = solver0.getRestartStrategy();
      Solver<CardinalityDataStructureYanMin> solver1 = new Solver<CardinalityDataStructureYanMin>(fixedLengthLearning0, cardinalityDataStructureYanMin0, searchParams0, subsetVarOrder0, restartStrategy0, (ILogAble) null);
      solver1.setLogger((ILogAble) null);
      assertFalse(solver1.isVerbose());
      assertEquals(2147483, solver1.getTimeout());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      basicLauncher0.log("5S@(YQ01_Dc");
      basicLauncher0.log("5S@(YQ01_Dc");
      basicLauncher0.log("");
      basicLauncher0.log("5S@(YQ01_Dc");
      basicLauncher0.log((String) null);
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, naturalStaticOrder0, eMARestarts0, basicLauncher0);
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, naturalStaticOrder0, eMARestarts0);
      solver1.cancelUntilTrailLevel(37);
      assertFalse(solver1.isVerbose());
      assertFalse(solver1.isDBSimplificationAllowed());
      assertFalse(solver1.isSolverKeptHot());
      assertEquals(2147483, solver1.getTimeout());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>(0.999);
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams();
      searchParams0.getInitConflictBound();
      searchParams0.getInitConflictBound();
      searchParams0.getConflictBoundIncFactor();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      NoRestarts noRestarts0 = new NoRestarts();
      noRestarts0.shouldRestart();
      noRestarts0.onBackjumpToRootLevel();
      MixedDataStructureDanielWLConciseBinary mixedDataStructureDanielWLConciseBinary0 = new MixedDataStructureDanielWLConciseBinary();
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      basicLauncher0.log("5A@(YQ01_Dc");
      basicLauncher0.log("5A@(YQ01_Dc");
      basicLauncher0.log("M/%r=Hi@>3pp|");
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, noRestarts0, basicLauncher0);
      // Undeclared exception!
      try { 
        solver0.setLearner(activeLearning0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.learning.ActiveLearning", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      lubyRestarts0.shouldRestart();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(fixedLengthLearning0, clausalDataStructureWL0, naturalStaticOrder0, lubyRestarts0);
      naturalStaticOrder0.init();
      fixedLengthLearning0.init();
      ClauseOnlyLearning<CardinalityDataStructureYanMax> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMax>();
      naturalStaticOrder0.select();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      // Undeclared exception!
      try { 
        solver0.primeImplicant();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.WatcherBasedPrimeImplicantStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FixedLengthLearning<ClausalDataStructureWL> fixedLengthLearning0 = new FixedLengthLearning<ClausalDataStructureWL>((-1663));
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      clausalDataStructureWL0.getVocabulary();
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause((-1663));
      eMARestarts0.newLearnedClause(unitClause0, 0);
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, naturalStaticOrder0, eMARestarts0);
      // Undeclared exception!
      try { 
        solver0.assume((-1663));
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      ASolverFactory<Solver<CardinalityDataStructureYanMin>> aSolverFactory0 = (ASolverFactory<Solver<CardinalityDataStructureYanMin>>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      BasicLauncher<Solver<CardinalityDataStructureYanMin>> basicLauncher0 = new BasicLauncher<Solver<CardinalityDataStructureYanMin>>(aSolverFactory0);
      basicLauncher0.log("c ");
      basicLauncher0.log("c ");
      basicLauncher0.log("!CKC>pVME*Xl>wt=h");
      NoLearningNoHeuristics<CardinalityDataStructureYanMax> noLearningNoHeuristics0 = new NoLearningNoHeuristics<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(noLearningNoHeuristics0, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, eMARestarts0, basicLauncher0);
      Lbool lbool0 = solver0.truthValue(37);
      assertEquals("U", lbool0.toString());
      
      solver0.getPropagationLevel();
      assertFalse(solver0.isSolverKeptHot());
      assertEquals(2147483, solver0.getTimeout());
      assertFalse(solver0.isDBSimplificationAllowed());
      assertFalse(solver0.isVerbose());
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      NaturalStaticOrder naturalStaticOrder0 = new NaturalStaticOrder();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      ActiveLearning<CardinalityDataStructure> activeLearning0 = new ActiveLearning<CardinalityDataStructure>();
      CardinalityDataStructure cardinalityDataStructure0 = new CardinalityDataStructure();
      int int0 = 37;
      SearchParams searchParams0 = new SearchParams(0.95, 37);
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning1 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning1, cardinalityDataStructureYanMax0, searchParams0, naturalStaticOrder0, eMARestarts0);
      solver0.varBumpActivity((-731));
      FixedLengthLearning<CardinalityDataStructure> fixedLengthLearning0 = new FixedLengthLearning<CardinalityDataStructure>();
      fixedLengthLearning0.setVarActivityListener(solver0);
      searchParams0.getConflictBoundIncFactor();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      // Undeclared exception!
      try { 
        varOrderHeap0.init();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.orders.VarOrderHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ActiveLearning<CardinalityDataStructureYanMax> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      SearchParams searchParams0 = new SearchParams((-3603));
      int[] intArray0 = new int[2];
      intArray0[0] = (-908);
      intArray0[1] = 1326;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      subsetVarOrder0.varDecayActivity();
      EMARestarts eMARestarts0 = new EMARestarts();
      eMARestarts0.onBackjumpToRootLevel();
      UnitClause unitClause0 = new UnitClause(0);
      eMARestarts0.newLearnedClause(unitClause0, 0);
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(activeLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, eMARestarts0, (ILogAble) null);
      // Undeclared exception!
      try { 
        solver0.toString();
       //  fail("Expecting exception: NoSuchFieldError");
       // Unstable assertion
      } catch(NoSuchFieldError e) {
         //
         // glucose
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      int[] intArray0 = new int[8];
      intArray0[0] = 476;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 2401;
      intArray0[5] = 2401;
      intArray0[6] = (-4266);
      intArray0[7] = (-4266);
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      SearchParams searchParams0 = new SearchParams((-4266));
      searchParams0.setInitConflictBound((-1));
      miniSATRestarts0.init(searchParams0, (SolverStats) null);
      miniSATRestarts0.onRestart();
      MiniSATLearning<CardinalityDataStructureYanMax> miniSATLearning0 = new MiniSATLearning<CardinalityDataStructureYanMax>();
      CardinalityDataStructureYanMax cardinalityDataStructureYanMax0 = new CardinalityDataStructureYanMax();
      Solver<CardinalityDataStructureYanMax> solver0 = new Solver<CardinalityDataStructureYanMax>(miniSATLearning0, cardinalityDataStructureYanMax0, searchParams0, subsetVarOrder0, miniSATRestarts0, (ILogAble) null);
      // Undeclared exception!
      try { 
        solver0.addExactly((IVecInt) null, 1985);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(varOrderHeap0).toString();
      doReturn((-1.0)).when(varOrderHeap0).varActivity(anyInt());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      tabuListDecorator0.varActivity(0);
      tabuListDecorator0.setVarDecay((-1.0));
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      mixedDataStructureDanielHT0.conflictDetectedInWatchesFor(47, 880);
      lubyRestarts0.shouldRestart();
      lubyRestarts0.onBackjumpToRootLevel();
      SearchParams searchParams0 = new SearchParams();
      ActiveLearning<CardinalityDataStructureYanMin> activeLearning0 = new ActiveLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin0 = new CardinalityDataStructureYanMin();
      Solver<CardinalityDataStructureYanMin> solver0 = new Solver<CardinalityDataStructureYanMin>(activeLearning0, cardinalityDataStructureYanMin0, searchParams0, tabuListDecorator0, lubyRestarts0);
      solver0.sortOnActivity();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver1 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, tabuListDecorator0, lubyRestarts0, mUSLauncher0);
      ClauseOnlyLearning<CardinalityDataStructureYanMin> clauseOnlyLearning0 = new ClauseOnlyLearning<CardinalityDataStructureYanMin>();
      CardinalityDataStructureYanMin cardinalityDataStructureYanMin1 = new CardinalityDataStructureYanMin();
      SearchParams searchParams1 = new SearchParams(0.0, 878);
      PureOrder pureOrder0 = new PureOrder(878);
      RandomWalkDecorator randomWalkDecorator0 = new RandomWalkDecorator(pureOrder0, 0.0);
      Solver<CardinalityDataStructureYanMin> solver2 = new Solver<CardinalityDataStructureYanMin>(clauseOnlyLearning0, cardinalityDataStructureYanMin1, searchParams1, randomWalkDecorator0, (RestartStrategy) null);
      SolverStats solverStats0 = solver2.stats;
      solverStats0.incStarts();
      solverStats0.incRootSimplifications();
      solverStats0.incDecisions();
      PercentLengthLearning<CardinalityDataStructure> percentLengthLearning0 = new PercentLengthLearning<CardinalityDataStructure>();
      Solver<CardinalityDataStructure> solver3 = null;
      try {
        solver3 = new Solver<CardinalityDataStructure>(percentLengthLearning0, (CardinalityDataStructure) null, randomWalkDecorator0, (RestartStrategy) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }
}
