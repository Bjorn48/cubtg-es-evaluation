/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 16:00:32 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.MUSLauncher;
import org.sat4j.core.ASolverFactory;
import org.sat4j.core.ReadOnlyVecInt;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielHT;
import org.sat4j.minisat.constraints.cnf.Lits;
import org.sat4j.minisat.core.IPhaseSelectionStrategy;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.FixedLengthLearning;
import org.sat4j.minisat.learning.NoLearningNoHeuristics;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.minisat.restarts.MiniSATRestarts;
import org.sat4j.opt.MaxSatDecorator;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ILogAble;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.CheckMUSSolutionListener;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams((-1091));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      LubyRestarts lubyRestarts1 = new LubyRestarts();
      MUSLauncher mUSLauncher1 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts1, mUSLauncher1);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1091);
      intArray0[1] = 32;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      intArray0[5] = 32;
      intArray0[6] = 32;
      intArray0[7] = (-1091);
      intArray0[8] = (-1091);
      VecInt vecInt0 = new VecInt(intArray0);
      Commander commander1 = new Commander();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(abstractMinimalModel0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>(maxSatDecorator0, false);
      // Undeclared exception!
      try { 
        commander1.addExactlyOne(fullClauseSelectorSolver0, vecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      VecInt vecInt0 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel((ISolver) null, vecInt0, solutionFoundListener0);
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(minimal4InclusionModel0, true);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        commander0.addExactly(negationDecorator0, vecInt0, 3319);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(iSolver0);
      VecInt vecInt0 = new VecInt();
      IConstr iConstr0 = commander0.addExactlyOne(maxSatDecorator0, vecInt0);
      // Undeclared exception!
      try { 
        maxSatDecorator0.removeConstr(iConstr0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.sat4j.core.ConstrGroup cannot be cast to org.sat4j.specs.Constr
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector((ISolver) null);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(singleSolutionDetector0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(20, 20);
      Commander commander0 = new Commander();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      IVecInt iVecInt0 = vecInt0.push(20);
      commander0.addExactlyOne(maxSatDecorator0, iVecInt0);
      assertEquals(84, dimacsOutputSolver0.nVars());
      assertEquals(84, dimacsOutputSolver0.realNumberOfVariables());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-861.0));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams((-1));
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, lubyRestarts0, iLogAble0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      pureOrder0.setVarDecay((-3477.01769));
      int[] intArray0 = new int[4];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0, (-1));
      try { 
        commander0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      FixedLengthLearning<MixedDataStructureDanielHT> fixedLengthLearning0 = new FixedLengthLearning<MixedDataStructureDanielHT>(2);
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap((IPhaseSelectionStrategy) null);
      MiniSATRestarts miniSATRestarts0 = new MiniSATRestarts();
      Lits lits0 = new Lits();
      varOrderHeap0.setLits(lits0);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(fixedLengthLearning0, mixedDataStructureDanielHT0, varOrderHeap0, miniSATRestarts0);
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(solver0);
      try { 
        commander0.addExactly(solver0, iVecInt0, 1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      searchParams0.setConflictBoundIncFactor((-734.49234));
      RestartStrategy restartStrategy0 = null;
      ILogAble iLogAble0 = ILogAble.CONSOLE;
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, (RestartStrategy) null, iLogAble0);
      // Undeclared exception!
      try { 
        solver0.isSatisfiable();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      commander0.toString();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0, solutionFoundListener0);
      FullClauseSelectorSolver<MaxSatDecorator> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<MaxSatDecorator>((MaxSatDecorator) null, false);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      try { 
        commander0.addExactlyOne(minimal4CardinalityModel0, iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(3);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      VecInt vecInt0 = new VecInt(3);
      Commander commander1 = new Commander();
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(statisticsSolver0);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      OptToSatAdapter optToSatAdapter0 = new OptToSatAdapter(maxSatDecorator0, solutionFoundListener0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(optToSatAdapter0, vecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(abstractMinimalModel0);
      MaxSatDecorator maxSatDecorator1 = new MaxSatDecorator(minimal4CardinalityModel0);
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator1, commander1);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(clausalCardinalitiesDecorator0, vecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.StatisticsSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      lightFactory0.createSolverByName("org.sat4j.tools.encoding.Commander");
      VecInt vecInt0 = new VecInt(1116, 1116);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, vecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      VecInt vecInt0 = new VecInt(20);
      Commander commander0 = new Commander();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsOutputSolver0);
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>(maxSatDecorator0, commander0);
      IConstr iConstr0 = commander0.addExactlyOne(clausalCardinalitiesDecorator0, vecInt0);
      assertEquals(0.0, iConstr0.getActivity(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, (IVecInt) null, 1225);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      ReadOnlyVecInt readOnlyVecInt0 = new ReadOnlyVecInt(iVecInt0);
      ASolverFactory<MaxSatDecorator> aSolverFactory0 = (ASolverFactory<MaxSatDecorator>) mock(ASolverFactory.class, new ViolatedAssumptionAnswer());
      CheckMUSSolutionListener checkMUSSolutionListener0 = new CheckMUSSolutionListener(aSolverFactory0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(dimacsStringSolver0, readOnlyVecInt0, checkMUSSolutionListener0);
      ModelIterator modelIterator0 = new ModelIterator(abstractMinimalModel0);
      AbstractMinimalModel abstractMinimalModel1 = new AbstractMinimalModel(modelIterator0, checkMUSSolutionListener0);
      // Undeclared exception!
      try { 
        commander0.addExactly(abstractMinimalModel1, iVecInt0, 1865);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 1865
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1375.612400657));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(2818);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[5];
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, vecInt0, 123456789L);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Random.setNextRandom(5);
      System.setCurrentTimeMillis(5);
      Commander commander0 = new Commander();
      System.setCurrentTimeMillis(0L);
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      int int0 = 3676;
      VecInt vecInt0 = new VecInt(3676, 5);
      // Undeclared exception!
      commander0.addAtMostOne(dimacsStringSolver0, vecInt0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Commander commander0 = new Commander();
      ClausalCardinalitiesDecorator<MaxSatDecorator> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<MaxSatDecorator>((MaxSatDecorator) null);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(clausalCardinalitiesDecorator0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Commander commander0 = new Commander();
      MaxSatDecorator[] maxSatDecoratorArray0 = new MaxSatDecorator[0];
      ManyCore<MaxSatDecorator> manyCore0 = new ManyCore<MaxSatDecorator>(true, maxSatDecoratorArray0);
      VecInt vecInt0 = new VecInt(3);
      IConstr iConstr0 = commander0.addExactly(manyCore0, vecInt0, 404);
      assertFalse(iConstr0.canBePropagatedMultipleTimes());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Commander commander0 = new Commander();
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams((-1091));
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      NoLearningNoHeuristics<MixedDataStructureDanielHT> noLearningNoHeuristics0 = new NoLearningNoHeuristics<MixedDataStructureDanielHT>();
      SearchParams searchParams1 = new SearchParams();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(noLearningNoHeuristics0, mixedDataStructureDanielHT0, searchParams1, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[7];
      intArray0[0] = 32;
      intArray0[1] = 32;
      intArray0[2] = (-1091);
      intArray0[3] = (-1091);
      intArray0[4] = 32;
      intArray0[5] = 1;
      intArray0[6] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(abstractMinimalModel0, vecInt0, 32);
      IConstr iConstr0 = commander0.addAtMostOne(abstractMinimalModel0, vecInt0);
      assertEquals(1091, solver0.realNumberOfVariables());
      assertEquals(17, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Commander commander0 = new Commander();
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        commander0.addExactlyOne((ISolver) null, iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1375.612400657));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(2818);
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, pureOrder0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2818;
      int[] intArray1 = new int[6];
      intArray1[0] = (-4332);
      intArray1[1] = 2818;
      intArray1[2] = 3;
      intArray1[3] = 2818;
      VecInt vecInt0 = new VecInt(intArray0);
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addExactly(solver0, vecInt0, (-4332));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1375.612400657));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(2818);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2818;
      intArray0[1] = 2818;
      intArray0[2] = 32;
      intArray0[3] = 32;
      intArray0[4] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      SubModelIterator subModelIterator0 = new SubModelIterator(abstractMinimalModel0, vecInt0, 32);
      commander0.addAtMostOne(subModelIterator0, vecInt0);
      assertEquals(2818, solver0.nVars());
      assertEquals(5, solver0.nConstraints());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      AbstractMinimalModel.negativeLiterals(dimacsStringSolver0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3;
      intArray0[1] = (-3599);
      intArray0[2] = (-1695);
      intArray0[3] = 3;
      intArray0[4] = 5;
      intArray0[5] = 3;
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.pop();
      MaxSatDecorator maxSatDecorator0 = new MaxSatDecorator(dimacsStringSolver0);
      maxSatDecorator0.setTimeoutOnConflicts(9);
      NegationDecorator<MaxSatDecorator> negationDecorator0 = new NegationDecorator<MaxSatDecorator>(maxSatDecorator0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(negationDecorator0, iVecInt0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Please call newVar(int) before adding constraints!!!
         //
         verifyException("org.sat4j.tools.AbstractClauseSelectorSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      SolutionCounter solutionCounter0 = new SolutionCounter(dimacsOutputSolver0);
      dimacsOutputSolver0.getStat();
      int[] intArray0 = new int[3];
      intArray0[0] = 20;
      intArray0[1] = 20;
      intArray0[2] = 20;
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.shrink(20);
      SubModelIterator subModelIterator0 = new SubModelIterator(dimacsOutputSolver0, vecInt0, 20);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(dimacsOutputSolver0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1375.612400657));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      SearchParams searchParams0 = new SearchParams(2818);
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(activeLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2818;
      intArray0[2] = 32;
      intArray0[1] = 32;
      VecInt vecInt0 = new VecInt(intArray0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory.instance();
      String string0 = "org.sat4j.tools.encoding.Commander";
      ISolver iSolver0 = null;
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        commander0.addExactly((ISolver) null, vecInt0, 372);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Commander commander0 = new Commander();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(838);
      VecInt vecInt0 = new VecInt(8, (-408));
      // Undeclared exception!
      try { 
        commander0.addExactly(dimacsStringSolver0, vecInt0, 838);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 838
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Commander commander0 = new Commander();
      ActiveLearning<MixedDataStructureDanielHT> activeLearning0 = new ActiveLearning<MixedDataStructureDanielHT>((-1375.612400657));
      MixedDataStructureDanielHT mixedDataStructureDanielHT0 = new MixedDataStructureDanielHT();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      MUSLauncher mUSLauncher0 = new MUSLauncher();
      PercentLengthLearning<MixedDataStructureDanielHT> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielHT>();
      SearchParams searchParams0 = new SearchParams(1.0, 0.0, 0.0, Integer.MIN_VALUE);
      Solver<MixedDataStructureDanielHT> solver0 = new Solver<MixedDataStructureDanielHT>(percentLengthLearning0, mixedDataStructureDanielHT0, searchParams0, varOrderHeap0, lubyRestarts0, mUSLauncher0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(solver0);
      int[] intArray0 = new int[6];
      intArray0[0] = 32;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = Integer.MIN_VALUE;
      intArray0[5] = Integer.MIN_VALUE;
      VecInt vecInt0 = new VecInt(intArray0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      IVecInt iVecInt0 = minOneDecorator0.createBlockingClauseForCurrentModel();
      SubModelIterator subModelIterator0 = new SubModelIterator(solver0, iVecInt0, Integer.MIN_VALUE);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(abstractMinimalModel0, vecInt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Commander commander0 = new Commander();
      // Undeclared exception!
      try { 
        commander0.addAtMostOne((ISolver) null, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }
}
