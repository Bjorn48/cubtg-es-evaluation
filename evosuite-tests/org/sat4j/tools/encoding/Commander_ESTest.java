/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:25:08 GMT 2019
 */

package org.sat4j.tools.encoding;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.RestartStrategy;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.orders.RandomLiteralSelectionStrategy;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.OptToSatAdapter;
import org.sat4j.tools.SingleSolutionDetector;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.encoding.Commander;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Commander_ESTest extends Commander_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Commander commander0 = new Commander();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "Yt|;042C";
      stringArray0[2] = "";
      OptToSatAdapter[] optToSatAdapterArray0 = new OptToSatAdapter[6];
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(optToSatAdapter0).nVars();
      doReturn((IVecInt) null).when(optToSatAdapter0).unsatExplanation();
      optToSatAdapterArray0[0] = optToSatAdapter0;
      optToSatAdapterArray0[1] = optToSatAdapter0;
      optToSatAdapterArray0[2] = optToSatAdapter0;
      optToSatAdapterArray0[3] = optToSatAdapter0;
      optToSatAdapterArray0[4] = optToSatAdapter0;
      optToSatAdapterArray0[5] = optToSatAdapter0;
      ManyCore<OptToSatAdapter> manyCore0 = new ManyCore<OptToSatAdapter>(true, stringArray0, optToSatAdapterArray0);
      SingleSolutionDetector singleSolutionDetector0 = new SingleSolutionDetector(manyCore0);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(singleSolutionDetector0, solutionFoundListener0);
      manyCore0.unsatExplanation();
      Minimal4InclusionModel minimal4InclusionModel0 = null;
      try {
        minimal4InclusionModel0 = new Minimal4InclusionModel(abstractMinimalModel0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractMinimalModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(optToSatAdapter0).modelWithInternalVariables();
      doReturn((IConstr) null).when(optToSatAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IVecInt) null).when(optToSatAdapter0).createBlockingClauseForCurrentModel();
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0);
      groupClauseSelectorSolver0.createBlockingClauseForCurrentModel();
      groupClauseSelectorSolver0.model();
      groupClauseSelectorSolver0.addBlockingClause((IVecInt) null);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(groupClauseSelectorSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-2422);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1992;
      intArray0[5] = (-1873);
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.iterator();
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(0);
      iVecInt1.push(0);
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(iSolver0, iVecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(optToSatAdapter0).isSatisfiable();
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(optToSatAdapter0).getLogPrefix();
      doReturn(false, false).when(optToSatAdapter0).isVerbose();
      doReturn(0).when(optToSatAdapter0).nConstraints();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      VecInt vecInt0 = new VecInt(2585);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(clausalCardinalitiesDecorator0, vecInt0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(abstractMinimalModel0);
      solutionCounter0.nConstraints();
      solutionCounter0.isSatisfiable();
      clausalCardinalitiesDecorator0.isSatisfiable();
      clausalCardinalitiesDecorator0.isVerbose();
      clausalCardinalitiesDecorator0.getLogPrefix();
      abstractMinimalModel0.isVerbose();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(solutionCounter0, vecInt0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Commander commander0 = new Commander();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      varOrderHeap0.toString();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      int[] intArray0 = iVecInt0.toArray();
      iVecInt0.clear();
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt1 = iVecInt0.clone();
      iVecInt1.sort();
      iVecInt1.size();
      iVecInt1.iterator();
      iVecInt0.clear();
      iVecInt0.push(0);
      iVecInt1.push(645);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      int[] intArray0 = new int[0];
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      vecInt0.sort();
      vecInt0.size();
      iVecInt0.iterator();
      iVecInt0.clear();
      IVecInt iVecInt1 = vecInt0.push(0);
      IVecInt iVecInt2 = iVecInt1.push(0);
      IConstr iConstr0 = commander0.addAtMostOne(clausalCardinalitiesDecorator0, iVecInt2);
      assertEquals(2, iVecInt1.size());
      assertEquals(1, iConstr0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-2422);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1992;
      intArray0[5] = (-1873);
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.iterator();
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(0);
      IVecInt iVecInt2 = iVecInt1.push(0);
      iVecInt1.sortUnique();
      commander0.addAtMostOne(iSolver0, iVecInt2);
      // Undeclared exception!
      try { 
        commander0.addExactly(iSolver0, iVecInt2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(optToSatAdapter0).modelWithInternalVariables();
      doReturn((IConstr) null).when(optToSatAdapter0).addBlockingClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IVecInt) null).when(optToSatAdapter0).createBlockingClauseForCurrentModel();
      doReturn(0).when(optToSatAdapter0).nextFreeVarId(anyBoolean());
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0);
      groupClauseSelectorSolver0.createBlockingClauseForCurrentModel();
      groupClauseSelectorSolver0.model();
      groupClauseSelectorSolver0.nextFreeVarId(true);
      groupClauseSelectorSolver0.addBlockingClause((IVecInt) null);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(groupClauseSelectorSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Commander commander0 = new Commander();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      varOrderHeap0.toString();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      int[] intArray0 = iVecInt0.toArray();
      iVecInt0.clear();
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt1 = iVecInt0.clone();
      iVecInt1.sort();
      iVecInt1.size();
      iVecInt1.iterator();
      solver0.getLogPrefix();
      solver0.isVerbose();
      Commander commander1 = new Commander();
      try { 
        commander1.addExactlyOne(solver0, iVecInt1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Creating Empty clause ?
         //
         verifyException("org.sat4j.minisat.constraints.cnf.Clauses", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(optToSatAdapter0).primeImplicant();
      NegationDecorator<OptToSatAdapter> negationDecorator0 = new NegationDecorator<OptToSatAdapter>(optToSatAdapter0);
      negationDecorator0.primeImplicant();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      iVecInt0.toArray();
      iVecInt0.clear();
      // Undeclared exception!
      try { 
        commander0.addExactly(negationDecorator0, iVecInt0, 2346);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((int[]) null).when(optToSatAdapter0).modelWithInternalVariables();
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((IVecInt) null).when(optToSatAdapter0).createBlockingClauseForCurrentModel();
      doReturn((int[]) null).when(optToSatAdapter0).primeImplicant();
      GroupClauseSelectorSolver<OptToSatAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<OptToSatAdapter>(optToSatAdapter0);
      groupClauseSelectorSolver0.createBlockingClauseForCurrentModel();
      groupClauseSelectorSolver0.primeImplicant();
      groupClauseSelectorSolver0.model();
      // Undeclared exception!
      try { 
        commander0.addExactlyOne(groupClauseSelectorSolver0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.Commander", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Commander commander0 = new Commander();
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      RandomLiteralSelectionStrategy randomLiteralSelectionStrategy0 = new RandomLiteralSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(randomLiteralSelectionStrategy0);
      varOrderHeap0.toString();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, varOrderHeap0, (RestartStrategy) null);
      IVecInt iVecInt0 = solver0.getOutLearnt();
      int[] intArray0 = iVecInt0.toArray();
      iVecInt0.clear();
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt1 = iVecInt0.clone();
      iVecInt1.sort();
      iVecInt1.size();
      iVecInt1.iterator();
      iVecInt0.clear();
      iVecInt0.push(1);
      iVecInt1.push(645);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(solver0, vecInt0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is not a valid variable identifier
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Commander commander0 = new Commander();
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = null;
      lightFactory0.solverNames();
      int int0 = 0;
      // Undeclared exception!
      try { 
        commander0.addExactly(iSolver0, (IVecInt) null, 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.encoding.EncodingStrategyAdapter", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Commander commander0 = new Commander();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Uv$X1PqCb");
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(optToSatAdapter0).isSatisfiable();
      doReturn(false).when(optToSatAdapter0).model(anyInt());
      doReturn((IConstr) null, (IConstr) null).when(optToSatAdapter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(optToSatAdapter0).getLogPrefix();
      doReturn(false, false).when(optToSatAdapter0).isVerbose();
      doReturn(0).when(optToSatAdapter0).nConstraints();
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      VecInt vecInt0 = new VecInt(2585);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      vecInt0.unsafePush(2585);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(clausalCardinalitiesDecorator0, vecInt0, solutionFoundListener0);
      SolutionCounter solutionCounter0 = new SolutionCounter(abstractMinimalModel0);
      solutionCounter0.nConstraints();
      solutionCounter0.isSatisfiable();
      clausalCardinalitiesDecorator0.isSatisfiable();
      clausalCardinalitiesDecorator0.isVerbose();
      clausalCardinalitiesDecorator0.getLogPrefix();
      abstractMinimalModel0.isVerbose();
      clausalCardinalitiesDecorator0.model(1231);
      commander0.addExactly(solutionCounter0, vecInt0, 2585);
      commander0.addExactlyOne(clausalCardinalitiesDecorator0, vecInt0);
      System.setCurrentTimeMillis(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null).when(optToSatAdapter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0).when(optToSatAdapter0).nextFreeVarId(anyBoolean());
      ClausalCardinalitiesDecorator<OptToSatAdapter> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<OptToSatAdapter>(optToSatAdapter0);
      VecInt vecInt0 = new VecInt(2585);
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(clausalCardinalitiesDecorator0, vecInt0, solutionFoundListener0);
      int[] intArray0 = new int[5];
      intArray0[0] = 2585;
      intArray0[1] = (-1873);
      intArray0[2] = 2585;
      intArray0[3] = 2585;
      intArray0[4] = (-1873);
      VecInt vecInt1 = new VecInt(intArray0);
      vecInt0.clone();
      vecInt0.sort();
      vecInt1.size();
      vecInt1.iterator();
      vecInt0.clear();
      IVecInt iVecInt0 = vecInt0.push(5);
      IVecInt iVecInt1 = vecInt1.push(14);
      VecInt vecInt2 = new VecInt();
      vecInt2.sortUnique();
      IConstr iConstr0 = commander0.addAtMostOne(clausalCardinalitiesDecorator0, iVecInt1);
      IConstr iConstr1 = commander0.addExactly(abstractMinimalModel0, iVecInt0, 2937);
      assertFalse(iConstr1.equals((Object)iConstr0));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Commander commander0 = new Commander();
      OptToSatAdapter optToSatAdapter0 = mock(OptToSatAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null).when(optToSatAdapter0).addClause(any(org.sat4j.specs.IVecInt.class));
      doReturn(0, 0, 0).when(optToSatAdapter0).nextFreeVarId(anyBoolean());
      doReturn((int[]) null).when(optToSatAdapter0).primeImplicant();
      NegationDecorator<OptToSatAdapter> negationDecorator0 = new NegationDecorator<OptToSatAdapter>(optToSatAdapter0);
      negationDecorator0.primeImplicant();
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = (-2422);
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 1992;
      intArray0[5] = (-1873);
      VecInt vecInt0 = new VecInt(intArray0);
      IVecInt iVecInt0 = vecInt0.clone();
      iVecInt0.sort();
      iVecInt0.size();
      vecInt0.iterator();
      iVecInt0.clear();
      IVecInt iVecInt1 = iVecInt0.push(0);
      IVecInt iVecInt2 = iVecInt1.push(0);
      // Undeclared exception!
      try { 
        commander0.addAtMostOne(negationDecorator0, iVecInt2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The constraint you entered cannot be removed from the solver.
         //
         verifyException("org.sat4j.core.ConstrGroup", e);
      }
  }
}
