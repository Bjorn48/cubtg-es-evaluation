/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 25 15:48:16 GMT 2019
 */

package com.pmdesigns.jvc.tools;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.pmdesigns.jvc.tools.SimpleCharStream;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleCharStream_ESTest extends SimpleCharStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-699), (-699));
      simpleCharStream0.GetSuffix(32);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.bufpos = (-1883);
      int int0 = 0;
      simpleCharStream0.setTabSize(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.prevCharIsLF = false;
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 3841, 1, 1);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-1), (-728), (-728));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      InputStream inputStream0 = null;
      int int0 = 0;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = (-1716);
      simpleCharStream0.maxNextCharInd = (-1716);
      simpleCharStream0.available = (-1883);
      int int1 = 0;
      simpleCharStream0.setTabSize(0);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xW1b!!pV?S");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 120, 120);
      simpleCharStream0.ExpandBuff(false);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, (-3066));
      simpleCharStream0.ExpandBuff(false);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 8, (-1611));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.available = (-1883);
      int int0 = 0;
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          StringReader stringReader0 = new StringReader(" ).brrTG");
          stringReader0.read();
          stringReader0.close();
          stringReader0.close();
          SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
          simpleCharStream0.maxNextCharInd = (-1883);
          simpleCharStream0.setTabSize((-1883));
          simpleCharStream0.GetImage();
          simpleCharStream0.backup(1);
          simpleCharStream0.readChar();
          simpleCharStream0.adjustBeginLineColumn(0, (-1883));
          simpleCharStream0.GetSuffix(0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1313;
      int int1 = 1529;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "com.pmdesigns.jvc.tools.SimpleCharStream", 1313, 1529, (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-352), (-352));
      int int0 = (-1716);
      int int1 = 0;
      simpleCharStream0.setTabSize((-352));
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-352), (-352));
      pushbackInputStream0.skip((-1));
      String string0 = " ).brrTG";
      sequenceInputStream0.available();
      try { 
        simpleCharStream0.ReInit((InputStream) pushbackInputStream0, " ).brrTG", (-352), 0, (-352));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, (-1), (-728), (-728));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.adjustBeginLineColumn((-1826), 1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.BeginToken();
      simpleCharStream0.setTabSize(4561);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(4554);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -457
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1456);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-4712), 8);
      simpleCharStream0.getColumn();
      simpleCharStream0.adjustBeginLineColumn((-974), 4109);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.readChar();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1456);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-4712), 8);
      simpleCharStream0.getColumn();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      simpleCharStream0.ReInit((Reader) stringReader0, 8, 1456, 8);
      // Undeclared exception!
      try { 
        simpleCharStream0.getLine();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(pushbackInputStream0, (-1287), 2048, (-1287));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(450);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-1810), 9);
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      int int1 = 0;
      simpleCharStream0.adjustBeginLineColumn(int1, int1);
      simpleCharStream0.GetSuffix(int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 12;
      String string0 = " ).brrTG";
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      int int1 = 1;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1964), 1);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 32, 32);
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 0, 0, 1456);
      simpleCharStream0.available = 0;
      simpleCharStream0.backup(16);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1456);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-4712), 0);
      simpleCharStream0.getColumn();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      simpleCharStream0.ReInit((Reader) stringReader0, 0, 1456, 0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "a1rZR", (-7), (-7));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      byteArrayInputStream0.skip(1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.GetImage();
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)112;
      SimpleCharStream simpleCharStream1 = null;
      try {
        simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0, (String) null, (-1790), 2590, (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3276);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.readChar();
      simpleCharStream0.GetSuffix(178);
      simpleCharStream0.UpdateLineColumn('J');
      SimpleCharStream simpleCharStream1 = new SimpleCharStream((Reader) null);
      // Undeclared exception!
      try { 
        simpleCharStream1.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(stringReader0, 32, (-3534));
      simpleCharStream0.GetSuffix(2931);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.bufsize = (-747);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      int int0 = (-1883);
      simpleCharStream0.maxNextCharInd = 32;
      simpleCharStream0.available = (-1883);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.BeginToken();
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix(32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, 32);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(bufferedInputStream0);
      simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, 4093, (-1580), 4064);
      simpleCharStream0.getBeginColumn();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-47);
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 3276);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream2.readChar();
      simpleCharStream2.GetSuffix((byte)1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(4561);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(4554);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-1613), (-2797));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ws~=eU?]dX#(Uk");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.bufpos = (-1883);
      simpleCharStream0.setTabSize(0);
      stringReader0.markSupported();
      simpleCharStream0.adjustBeginLineColumn(10, 4076);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "ws~=eU?]dX#(Uk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.ReInit((InputStream) pipedInputStream0);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "", (-1), 8);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(4561);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(4554);
      simpleCharStream0.prevCharIsCR = true;
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-1613), (-2797));
      simpleCharStream0.getTabSize((-568));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      int int0 = (-3205);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, "com.pmdesigns.jvc.tools.SimpleCharStream", (-3205), (-3205), (-3205));
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(450);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1456);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-4712), 8);
      simpleCharStream0.getColumn();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, 0, 8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.setTabSize((-1883));
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.prevCharIsCR = false;
      int[] intArray0 = new int[9];
      intArray0[0] = (-1);
      intArray0[1] = 1534;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[4] = (-1);
      intArray0[5] = 1534;
      intArray0[6] = 8;
      intArray0[7] = 0;
      intArray0[8] = (-1);
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      char char0 = 'F';
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('F');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)1;
      byteArray1[2] = (byte) (-47);
      byteArray1[3] = (byte)112;
      byteArray1[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 3276);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.readChar();
      simpleCharStream0.setTabSize((byte)112);
      simpleCharStream0.readChar();
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.getEndColumn();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)38;
      sequenceInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-1), (-77));
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-352), (-352));
      pushbackInputStream0.skip((-1));
      sequenceInputStream0.available();
      simpleCharStream0.ReInit((Reader) null, (-2117), (-2549));
      byteArrayInputStream0.mark(0);
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.close();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      int int0 = (-1);
      simpleCharStream1.adjustBeginLineColumn(int0, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-119), (-699));
      // Undeclared exception!
      try { 
        simpleCharStream0.GetSuffix((-119));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pushbackInputStream0);
      int int0 = (-352);
      sequenceInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-352), (-352));
      sequenceInputStream0.available();
      simpleCharStream0.ReInit((Reader) null, (-1), 0);
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.close();
      pushbackInputStream0.mark((-352));
      stringReader0.close();
      try { 
        stringReader0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-142));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)112;
      simpleCharStream0.maxNextCharInd = (-1003);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 4096;
      simpleCharStream0.setTabSize(4096);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-1883));
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.setTabSize((-515));
      simpleCharStream0.adjustBeginLineColumn(741, 4076);
      int int0 = 8;
      int int1 = 13;
      simpleCharStream0.adjustBeginLineColumn(int0, int1);
      simpleCharStream0.getTabSize(int1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.available = (-1883);
      simpleCharStream0.setTabSize(0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      byte[] byteArray0 = new byte[0];
      mockFileInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      simpleCharStream0.prevCharIsLF = false;
      simpleCharStream0.adjustBeginLineColumn((-1681), 1037);
      simpleCharStream0.getTabSize(1037);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte)112;
      byteArray0[2] = (byte)112;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 2896);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream1.readChar();
      simpleCharStream1.readChar();
      simpleCharStream1.adjustBeginLineColumn(32, (-1));
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.BeginToken();
      simpleCharStream0.backup(9);
      simpleCharStream0.GetImage();
      simpleCharStream0.getEndLine();
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0, 4087, (-1327));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(byteArrayInputStream0, 3276);
      SimpleCharStream simpleCharStream2 = new SimpleCharStream(pushbackInputStream1);
      simpleCharStream0.readChar();
      simpleCharStream2.ExpandBuff(false);
      try { 
        simpleCharStream2.ReInit((InputStream) pipedInputStream0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-142));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)112;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 3276);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream1.readChar();
      simpleCharStream0.GetSuffix(1);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0, (-1856), 10, 275);
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.skip(1L);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-89);
      byteArray0[4] = (byte)38;
      sequenceInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-1), (-77));
      simpleCharStream0.ReInit((InputStream) sequenceInputStream0, (String) null, (-4170), (-478), (int) (byte)0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, 32, 32);
      // Undeclared exception!
      try { 
        simpleCharStream0.ExpandBuff(true);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.backup(1);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(0, 0);
      simpleCharStream0.GetSuffix(1);
      simpleCharStream0.getBeginLine();
      simpleCharStream0.UpdateLineColumn('\u0000');
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0);
      simpleCharStream0.GetImage();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      try { 
        pipedInputStream0.connect(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      InputStream inputStream0 = null;
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      simpleCharStream0.backup(0);
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 1456;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(450);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(1456);
      simpleCharStream0.BeginToken();
      simpleCharStream0.adjustBeginLineColumn((-4712), 8);
      simpleCharStream0.getColumn();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      try { 
        pipedInputStream0.read();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      StringReader stringReader0 = new StringReader("unzm)x`sJIE");
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = 1;
      simpleCharStream0.setTabSize(1);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn(int0, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "H F/^aWi_(*k)/+@");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "SKC#3nk+");
      PipedInputStream pipedInputStream0 = new PipedInputStream(4086);
      pipedInputStream0.markSupported();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, (String) null);
      simpleCharStream0.backup(4090);
      simpleCharStream0.readChar();
      simpleCharStream0.available = 4090;
      simpleCharStream0.UpdateLineColumn('\u0000');
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleCharStream0.getColumn();
      try { 
        pipedInputStream0.skip(4086);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-699), (-699));
      simpleCharStream0.GetSuffix(32);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.available = (-1883);
      simpleCharStream0.setTabSize(0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(0);
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream((InputStream) null, 1772, (-166), (-166));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.column = 1;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.GetImage();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 1525, 1525);
      // Undeclared exception!
      try { 
        simpleCharStream0.getEndColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(stringReader0, (-381), 1, (-381));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      simpleCharStream0.ReInit((Reader) stringReader0, 4093, 32);
      simpleCharStream0.setTabSize((-1));
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)0;
      sequenceInputStream0.read(byteArray0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, (-1), (-77));
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      simpleCharStream0.ReInit((Reader) stringReader0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(16);
      simpleCharStream0.tokenBegin = 16;
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.GetImage();
      simpleCharStream0.maxNextCharInd = 1;
      simpleCharStream0.backup(1456);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-4712), 8);
      simpleCharStream0.getColumn();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      simpleCharStream0.ReInit((Reader) stringReader0, 8, 1456, 8);
      simpleCharStream0.getBeginColumn();
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.ReInit((InputStream) pushbackInputStream0, (String) null, 8171, (-1964));
      simpleCharStream0.getBeginLine();
      simpleCharStream0.ReInit((InputStream) pipedInputStream0, (String) null);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream((Reader) null);
      // Undeclared exception!
      try { 
        simpleCharStream1.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-142));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)112;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 3288);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.BeginToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 8;
      int int1 = 1456;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      int int2 = (-1);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream0, "D", (-1), 8);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(dataInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, bufferedInputStream0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, 2937, (-1));
      simpleCharStream0.setTabSize((-1));
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      simpleCharStream0.Done();
      // Undeclared exception!
      try { 
        simpleCharStream0.readChar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      SimpleCharStream simpleCharStream0 = null;
      try {
        simpleCharStream0 = new SimpleCharStream(sequenceInputStream0, "W;>x");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
      }
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      int int0 = 1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.UpdateLineColumn('L');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.close();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1033), 32);
      simpleCharStream0.ExpandBuff(false);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(mockFileInputStream0, 0, 0, 0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(9);
      PipedInputStream pipedInputStream1 = new PipedInputStream(1456);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      try { 
        simpleCharStream0.ReInit((InputStream) pipedInputStream1, "", 9, 4067, 8);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte) (-47);
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte) (-45);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 3276);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn('\uFFFD', (-2681));
      simpleCharStream0.getEndLine();
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      Reader reader0 = null;
      int int0 = 8;
      SimpleCharStream simpleCharStream0 = new SimpleCharStream((Reader) null, 8, 8, 8);
      PipedInputStream pipedInputStream0 = null;
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, 1);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup((-142));
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-1);
      byteArray1[0] = (byte)1;
      byteArray1[3] = (byte)112;
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream1, 3276);
      SimpleCharStream simpleCharStream1 = new SimpleCharStream(pushbackInputStream0);
      simpleCharStream1.readChar();
      simpleCharStream1.ExpandBuff(true);
      simpleCharStream1.getBeginLine();
      try { 
        simpleCharStream1.readChar();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(mockFileInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(mockFileInputStream0, mockFileInputStream0);
      // Undeclared exception!
      try { 
        simpleCharStream0.ReInit((InputStream) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      byte byte1 = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)112;
      byteArray0[4] = (byte)0;
      byte byte2 = (byte) (-84);
      byteArray0[5] = (byte) (-84);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(byteArrayInputStream0);
      String string0 = "";
      try { 
        simpleCharStream0.ReInit((InputStream) byteArrayInputStream0, "", (int) (byte)29, 655);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(reader0).read(any(char[].class) , anyInt() , anyInt());
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(reader0, (-1964), (-1964));
      simpleCharStream0.BeginToken();
      int int0 = 9;
      simpleCharStream0.backup(9);
      simpleCharStream0.GetImage();
      simpleCharStream0.getEndLine();
      try { 
        pipedInputStream0.skip(9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(pipedInputStream0, 8, 8, 1456);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      simpleCharStream0.available = 8;
      simpleCharStream0.backup(9);
      simpleCharStream0.setTabSize(450);
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(8);
      simpleCharStream0.readChar();
      simpleCharStream0.adjustBeginLineColumn((-1810), 9);
      simpleCharStream0.ExpandBuff(false);
      simpleCharStream0.getBeginColumn();
      try { 
        simpleCharStream0.FillBuff();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0, (-1), 2912);
      // Undeclared exception!
      try { 
        simpleCharStream0.getColumn();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.pmdesigns.jvc.tools.SimpleCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      stringReader0.close();
      StringReader stringReader1 = new StringReader(" ).brrTG");
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader1);
      simpleCharStream0.setTabSize(32);
      simpleCharStream0.readChar();
      simpleCharStream0.ExpandBuff(false);
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      String string0 = " ).brrTG";
      StringReader stringReader0 = new StringReader(" ).brrTG");
      stringReader0.read();
      stringReader0.close();
      SimpleCharStream simpleCharStream0 = new SimpleCharStream(stringReader0);
      int int0 = (-1883);
      simpleCharStream0.maxNextCharInd = (-1883);
      simpleCharStream0.available = (-1883);
      simpleCharStream0.setTabSize(0);
      int int1 = 550;
      simpleCharStream0.tabSize = 550;
      simpleCharStream0.GetImage();
      simpleCharStream0.backup(0);
      simpleCharStream0.UpdateLineColumn('h');
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-1883));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }
}
