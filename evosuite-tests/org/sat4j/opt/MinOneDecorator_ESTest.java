/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 07:00:46 GMT 2019
 */

package org.sat4j.opt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.ClausalDataStructureWL;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.MiniSATLearning;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.FullClauseSelectorSolver;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinOneDecorator_ESTest extends MinOneDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      Integer integer0 = new Integer(100);
      minOneDecorator0.forceObjectiveValueTo(integer0);
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      minOneDecorator0.discard();
      assertTrue(minOneDecorator0.nonOptimalMeansSatisfiable());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      Number number0 = minOneDecorator0.calculateObjective();
      assertEquals(0, number0);
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 2292;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.modelWithInternalVariables();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.modelWithInternalVariables();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 2292;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.model();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.model();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, (SolutionFoundListener) null);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      minOneDecorator0.admitABetterSolution();
      assertTrue(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2343);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.forceObjectiveValueTo(32);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.forceObjectiveValueTo(902);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 2292;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      // Undeclared exception!
      minOneDecorator0.discardCurrentSolution();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, (SolutionFoundListener) null);
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(negationDecorator0);
      // Undeclared exception!
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MiniSATLearning<ClausalDataStructureWL> miniSATLearning0 = new MiniSATLearning<ClausalDataStructureWL>();
      ClausalDataStructureWL clausalDataStructureWL0 = new ClausalDataStructureWL();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap();
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(2343);
      Solver<ClausalDataStructureWL> solver0 = new Solver<ClausalDataStructureWL>(miniSATLearning0, clausalDataStructureWL0, tabuListDecorator0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.discard();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.AbstractDataStructureFactory", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 2292;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      minimal4CardinalityModel0.isSatisfiable();
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      // Undeclared exception!
      minOneDecorator0.admitABetterSolution((IVecInt) vecInt0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      FullClauseSelectorSolver<DimacsOutputSolver> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<DimacsOutputSolver>(dimacsOutputSolver0, true);
      IVecInt iVecInt0 = fullClauseSelectorSolver0.getLastClause();
      IVecInt iVecInt1 = iVecInt0.pop();
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution(iVecInt1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.registerLiteral((-3717));
      minOneDecorator0.admitABetterSolution();
      // Undeclared exception!
      minOneDecorator0.admitABetterSolution();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 104;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      Minimal4CardinalityModel minimal4CardinalityModel1 = new Minimal4CardinalityModel(iSolver0, vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel1, true);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Call the solve method first!!!
         //
         verifyException("org.sat4j.minisat.core.Solver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      minOneDecorator0.admitABetterSolution(iVecInt0);
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      Solver solver0 = (Solver)lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(solver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 104;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.discardCurrentSolution();
      minOneDecorator0.discardCurrentSolution();
      assertFalse(fullClauseSelectorSolver0.isSatisfiable());
      assertEquals(104, solver0.getPropagationLevel());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      int[] intArray0 = new int[3];
      intArray0[0] = 104;
      intArray0[1] = 1;
      intArray0[2] = 104;
      VecInt vecInt0 = new VecInt(intArray0);
      minimal4CardinalityModel0.addClause(vecInt0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      minOneDecorator0.admitABetterSolution();
      minOneDecorator0.discardCurrentSolution();
      boolean boolean0 = minOneDecorator0.admitABetterSolution((IVecInt) vecInt0);
      assertTrue(minOneDecorator0.isOptimal());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      boolean boolean0 = minOneDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      int[] intArray0 = minOneDecorator0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.reset();
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.calculateObjective();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MinOneDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      int[] intArray0 = minOneDecorator0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      try { 
        minOneDecorator0.discard();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.setTimeoutForFindingBetterSolution(3244);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.opt.MinOneDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      Integer integer0 = Integer.valueOf((-1526));
      try { 
        minOneDecorator0.forceObjectiveValueTo(integer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      Number number0 = minOneDecorator0.getObjectiveValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.lightSolver();
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(iSolver0);
      FullClauseSelectorSolver<Minimal4CardinalityModel> fullClauseSelectorSolver0 = new FullClauseSelectorSolver<Minimal4CardinalityModel>(minimal4CardinalityModel0, false);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(fullClauseSelectorSolver0);
      boolean boolean0 = minOneDecorator0.nonOptimalMeansSatisfiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      boolean boolean0 = minOneDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }
}
