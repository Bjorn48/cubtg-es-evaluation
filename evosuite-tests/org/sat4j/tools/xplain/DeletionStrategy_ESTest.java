/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 18 22:26:58 GMT 2019
 */

package org.sat4j.tools.xplain;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.core.VecInt;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.IVisualizationTool;
import org.sat4j.tools.Minimal4CardinalityModel;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionFoundListener;
import org.sat4j.tools.xplain.DeletionStrategy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeletionStrategy_ESTest extends DeletionStrategy_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2212);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(modelIteratorToSATAdapter0).getLogPrefix();
      doReturn(true).when(modelIteratorToSATAdapter0).isVerbose();
      doReturn(vecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      VecInt vecInt1 = new VecInt();
      SolutionFoundListener solutionFoundListener0 = mock(SolutionFoundListener.class, new ViolatedAssumptionAnswer());
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0, vecInt0, solutionFoundListener0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, 75L, (SolutionFoundListener) null);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter1);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(minimal4CardinalityModel0, map0, vecInt1);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2212, 2212);
      IVecInt iVecInt0 = vecInt0.clone();
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(modelIteratorToSATAdapter0).getLogPrefix();
      doReturn(true).when(modelIteratorToSATAdapter0).isVerbose();
      doReturn(vecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      deletionStrategy0.explain(negationDecorator0, hashMap0, iVecInt0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2212);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(vecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      VecInt vecInt1 = new VecInt();
      vecInt0.push(11);
      SolutionFoundListener solutionFoundListener0 = SolutionFoundListener.VOID;
      Minimal4CardinalityModel minimal4CardinalityModel0 = new Minimal4CardinalityModel(negationDecorator0, vecInt0, solutionFoundListener0);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter1 = new ModelIteratorToSATAdapter(minimal4CardinalityModel0, 9, (SolutionFoundListener) null);
      GroupClauseSelectorSolver<ModelIteratorToSATAdapter> groupClauseSelectorSolver0 = new GroupClauseSelectorSolver<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter1);
      Map<Integer, Integer> map0 = groupClauseSelectorSolver0.getVarToHighLevel();
      IVecInt iVecInt0 = deletionStrategy0.explain(modelIteratorToSATAdapter1, map0, vecInt1);
      assertEquals(1, vecInt0.size());
      assertFalse(iVecInt0.equals((Object)vecInt1));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver();
      HashMap<Integer, ModelIteratorToSATAdapter> hashMap0 = new HashMap<Integer, ModelIteratorToSATAdapter>();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(dimacsStringSolver0);
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(dimacsStringSolver0, hashMap0, iVecInt0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain((ISolver) null, hashMap0, (IVecInt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.xplain.DeletionStrategy", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      VecInt vecInt0 = new VecInt(2212);
      vecInt0.pop();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain((ISolver) null, hashMap0, vecInt0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      IVecInt iVecInt0 = VecInt.EMPTY;
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn((String) null).when(modelIteratorToSATAdapter0).getLogPrefix();
      doReturn(false, true).when(modelIteratorToSATAdapter0).isVerbose();
      doReturn(iVecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = IVisualizationTool.NOTGOOD;
      hashMap0.put(integer0, "");
      IVecInt iVecInt1 = deletionStrategy0.explain(modelIteratorToSATAdapter0, hashMap0, iVecInt0);
      assertFalse(iVecInt1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2212, 2212);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isVerbose();
      doReturn(vecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      VecInt vecInt1 = new VecInt();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      // Undeclared exception!
      try { 
        deletionStrategy0.explain(negationDecorator0, hashMap0, vecInt1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.sat4j.core.VecInt", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      VecInt vecInt0 = new VecInt(2212, 2212);
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(modelIteratorToSATAdapter0).isSatisfiable(any(org.sat4j.specs.IVecInt.class));
      doReturn(false, false).when(modelIteratorToSATAdapter0).isVerbose();
      doReturn(vecInt0).when(modelIteratorToSATAdapter0).unsatExplanation();
      NegationDecorator<ModelIteratorToSATAdapter> negationDecorator0 = new NegationDecorator<ModelIteratorToSATAdapter>(modelIteratorToSATAdapter0);
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      deletionStrategy0.explain(negationDecorator0, hashMap0, vecInt0);
      assertEquals(0, vecInt0.size());
      assertTrue(vecInt0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      String string0 = deletionStrategy0.toString();
      assertEquals("Deletion based minimization strategy", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DeletionStrategy deletionStrategy0 = new DeletionStrategy();
      deletionStrategy0.cancelExplanationComputation();
      assertEquals("Deletion based minimization strategy", deletionStrategy0.toString());
  }
}
