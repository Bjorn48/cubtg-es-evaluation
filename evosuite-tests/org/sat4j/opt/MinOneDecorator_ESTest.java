/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 19 15:18:52 GMT 2019
 */

package org.sat4j.opt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.sat4j.LightFactory;
import org.sat4j.core.VecInt;
import org.sat4j.minisat.constraints.MixedDataStructureDanielWL;
import org.sat4j.minisat.core.SearchParams;
import org.sat4j.minisat.core.Solver;
import org.sat4j.minisat.learning.ActiveLearning;
import org.sat4j.minisat.learning.ClauseOnlyLearning;
import org.sat4j.minisat.learning.PercentLengthLearning;
import org.sat4j.minisat.orders.PureOrder;
import org.sat4j.minisat.orders.RSATPhaseSelectionStrategy;
import org.sat4j.minisat.orders.SubsetVarOrder;
import org.sat4j.minisat.orders.TabuListDecorator;
import org.sat4j.minisat.orders.VarOrderHeap;
import org.sat4j.minisat.restarts.LubyRestarts;
import org.sat4j.opt.MinOneDecorator;
import org.sat4j.specs.IConstr;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.IVecInt;
import org.sat4j.tools.AbstractMinimalModel;
import org.sat4j.tools.ClausalCardinalitiesDecorator;
import org.sat4j.tools.DimacsOutputSolver;
import org.sat4j.tools.DimacsStringSolver;
import org.sat4j.tools.GroupClauseSelectorSolver;
import org.sat4j.tools.ManyCore;
import org.sat4j.tools.Minimal4InclusionModel;
import org.sat4j.tools.ModelIterator;
import org.sat4j.tools.ModelIteratorToSATAdapter;
import org.sat4j.tools.NegationDecorator;
import org.sat4j.tools.SolutionCounter;
import org.sat4j.tools.StatisticsSolver;
import org.sat4j.tools.SubModelIterator;
import org.sat4j.tools.encoding.EncodingStrategy;
import org.sat4j.tools.encoding.EncodingStrategyAdapter;
import org.sat4j.tools.encoding.Policy;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MinOneDecorator_ESTest extends MinOneDecorator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.nextFreeVarId(true);
      iSolver0.nextFreeVarId(true);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.nextFreeVarId(true);
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIterator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.admitABetterSolution(iVecInt0);
      IVecInt iVecInt1 = VecInt.EMPTY;
      minOneDecorator0.admitABetterSolution(iVecInt1);
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(iSolver0).nVars();
      doReturn((IConstr) null).when(iSolver0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.discardCurrentSolution();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ModelIteratorToSATAdapter[] modelIteratorToSATAdapterArray0 = new ModelIteratorToSATAdapter[9];
      ModelIteratorToSATAdapter modelIteratorToSATAdapter0 = mock(ModelIteratorToSATAdapter.class, new ViolatedAssumptionAnswer());
      doReturn((IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null, (IConstr) null).when(modelIteratorToSATAdapter0).addAtMost(any(org.sat4j.specs.IVecInt.class) , anyInt());
      doReturn(0).when(modelIteratorToSATAdapter0).nVars();
      modelIteratorToSATAdapterArray0[0] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[1] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[2] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[3] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[4] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[5] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[6] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[7] = modelIteratorToSATAdapter0;
      modelIteratorToSATAdapterArray0[8] = modelIteratorToSATAdapter0;
      ManyCore<ModelIteratorToSATAdapter> manyCore0 = new ManyCore<ModelIteratorToSATAdapter>(true, modelIteratorToSATAdapterArray0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(manyCore0);
      minOneDecorator0.discard();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams();
      VarOrderHeap varOrderHeap0 = mock(VarOrderHeap.class, new ViolatedAssumptionAnswer());
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(varOrderHeap0, 0);
      LubyRestarts lubyRestarts0 = new LubyRestarts(34);
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      minOneDecorator0.admitABetterSolution();
      Number number0 = minOneDecorator0.calculateObjective();
      assertFalse(minOneDecorator0.isOptimal());
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.nextFreeVarId(true);
      ModelIterator modelIterator0 = new ModelIterator(iSolver0);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(modelIterator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.admitABetterSolution(iVecInt0);
      minOneDecorator0.modelWithInternalVariables();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-566.66254406571));
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1000.0, 1293);
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      VecInt vecInt0 = new VecInt(1293, 1293);
      minOneDecorator0.admitABetterSolution((IVecInt) vecInt0);
      minOneDecorator0.model();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LightFactory lightFactory0 = LightFactory.instance();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      minOneDecorator0.admitABetterSolution(iVecInt0);
      minOneDecorator0.model();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISolver iSolver0 = mock(ISolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(iSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      minOneDecorator0.admitABetterSolution();
      assertTrue(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.reset();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      Integer integer0 = new Integer((-277));
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      try { 
        minOneDecorator0.forceObjectiveValueTo(integer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1739);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      Float float0 = new Float(898.0F);
      // Undeclared exception!
      try { 
        minOneDecorator0.forceObjectiveValueTo(float0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not a clausal problem! degree 898
         //
         verifyException("org.sat4j.tools.DimacsStringSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      Float float0 = new Float(0.0);
      // Undeclared exception!
      try { 
        minOneDecorator0.forceObjectiveValueTo(float0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      Minimal4InclusionModel minimal4InclusionModel0 = new Minimal4InclusionModel(dimacsOutputSolver0);
      NegationDecorator<AbstractMinimalModel> negationDecorator0 = new NegationDecorator<AbstractMinimalModel>(minimal4InclusionModel0);
      AbstractMinimalModel abstractMinimalModel0 = new AbstractMinimalModel(negationDecorator0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(abstractMinimalModel0);
      // Undeclared exception!
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // Not implemented yet!
         //
         verifyException("org.sat4j.tools.NegationDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.discardCurrentSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.discard();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DimacsOutputSolver dimacsOutputSolver0 = new DimacsOutputSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsOutputSolver0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      try { 
        minOneDecorator0.admitABetterSolution(iVecInt0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      IVecInt iVecInt0 = VecInt.EMPTY;
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution(iVecInt0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DimacsStringSolver dimacsStringSolver0 = new DimacsStringSolver(1751);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(dimacsStringSolver0);
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // There is no real solver behind!
         //
         verifyException("org.sat4j.tools.AbstractOutputSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SearchParams searchParams0 = new SearchParams(7);
      int[] intArray0 = new int[2];
      intArray0[0] = 7;
      SubsetVarOrder subsetVarOrder0 = new SubsetVarOrder(intArray0);
      TabuListDecorator tabuListDecorator0 = new TabuListDecorator(subsetVarOrder0, (-983));
      LubyRestarts lubyRestarts0 = new LubyRestarts(100);
      PercentLengthLearning<MixedDataStructureDanielWL> percentLengthLearning0 = new PercentLengthLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(percentLengthLearning0, mixedDataStructureDanielWL0, searchParams0, tabuListDecorator0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.sat4j.minisat.orders.SubsetVarOrder", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      iSolver0.nextFreeVarId(true);
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      IVecInt iVecInt1 = VecInt.EMPTY;
      minOneDecorator0.admitABetterSolution(iVecInt1);
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      minOneDecorator0.admitABetterSolution(iVecInt0);
      minOneDecorator0.modelWithInternalVariables();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GroupClauseSelectorSolver<SolutionCounter> groupClauseSelectorSolver0 = (GroupClauseSelectorSolver<SolutionCounter>) mock(GroupClauseSelectorSolver.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(groupClauseSelectorSolver0).isSatisfiable(any(org.sat4j.specs.IVecInt.class) , anyBoolean());
      EncodingStrategy encodingStrategy0 = EncodingStrategy.BINOMIAL;
      EncodingStrategyAdapter encodingStrategyAdapter0 = Policy.getAdapterFromEncodingName(encodingStrategy0);
      ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<SolutionCounter>> clausalCardinalitiesDecorator0 = new ClausalCardinalitiesDecorator<GroupClauseSelectorSolver<SolutionCounter>>(groupClauseSelectorSolver0, encodingStrategyAdapter0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(clausalCardinalitiesDecorator0);
      IVecInt iVecInt0 = VecInt.EMPTY;
      minOneDecorator0.admitABetterSolution(iVecInt0);
      assertTrue(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      boolean boolean0 = minOneDecorator0.isOptimal();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      int[] intArray0 = minOneDecorator0.modelWithInternalVariables();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ClauseOnlyLearning<MixedDataStructureDanielWL> clauseOnlyLearning0 = new ClauseOnlyLearning<MixedDataStructureDanielWL>();
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      RSATPhaseSelectionStrategy rSATPhaseSelectionStrategy0 = new RSATPhaseSelectionStrategy();
      VarOrderHeap varOrderHeap0 = new VarOrderHeap(rSATPhaseSelectionStrategy0);
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(clauseOnlyLearning0, mixedDataStructureDanielWL0, varOrderHeap0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      minOneDecorator0.reset();
      assertFalse(minOneDecorator0.isOptimal());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StatisticsSolver statisticsSolver0 = new StatisticsSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(statisticsSolver0);
      // Undeclared exception!
      try { 
        minOneDecorator0.calculateObjective();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.opt.MinOneDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ActiveLearning<MixedDataStructureDanielWL> activeLearning0 = new ActiveLearning<MixedDataStructureDanielWL>((-566.66254406571));
      MixedDataStructureDanielWL mixedDataStructureDanielWL0 = new MixedDataStructureDanielWL();
      SearchParams searchParams0 = new SearchParams(1000.0, 1293);
      PureOrder pureOrder0 = new PureOrder();
      LubyRestarts lubyRestarts0 = new LubyRestarts();
      Solver<MixedDataStructureDanielWL> solver0 = new Solver<MixedDataStructureDanielWL>(activeLearning0, mixedDataStructureDanielWL0, searchParams0, pureOrder0, lubyRestarts0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(solver0);
      int[] intArray0 = minOneDecorator0.model();
      assertNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(iSolver0);
      try { 
        minOneDecorator0.discard();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.minisat.constraints.card.AtLeast", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      // Undeclared exception!
      try { 
        minOneDecorator0.setTimeoutForFindingBetterSolution(2058);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // No implemented yet
         //
         verifyException("org.sat4j.opt.MinOneDecorator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LightFactory lightFactory0 = new LightFactory();
      ISolver iSolver0 = lightFactory0.defaultSolver();
      IVecInt iVecInt0 = AbstractMinimalModel.positiveLiterals(iSolver0);
      SubModelIterator subModelIterator0 = new SubModelIterator(iSolver0, iVecInt0);
      MinOneDecorator minOneDecorator0 = new MinOneDecorator(subModelIterator0);
      minOneDecorator0.forceObjectiveValueTo(32);
      assertFalse(minOneDecorator0.hasNoObjectiveFunction());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      Number number0 = minOneDecorator0.getObjectiveValue();
      assertEquals(0, number0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      boolean boolean0 = minOneDecorator0.nonOptimalMeansSatisfiable();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      boolean boolean0 = minOneDecorator0.hasNoObjectiveFunction();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MinOneDecorator minOneDecorator0 = new MinOneDecorator((ISolver) null);
      // Undeclared exception!
      try { 
        minOneDecorator0.admitABetterSolution();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.sat4j.tools.SolverDecorator", e);
      }
  }
}
