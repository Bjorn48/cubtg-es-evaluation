/*
 * This file was automatically generated by EvoSuite
 * Mon Oct 28 23:03:10 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      Set set0 = concurrentReaderHashMap0.keySet();
      concurrentReaderHashMap0.put(set0, set0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap1.new HashIterator();
      // Undeclared exception!
      try { 
        concurrentReaderHashMap_HashIterator0.remove();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap((-2724), (-2724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Load factor: -2724.0
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(16);
      concurrentReaderHashMap0.get("");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      BiFunction<Object, Object, ConcurrentReaderHashMap> biFunction0 = (BiFunction<Object, Object, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.replaceAll(biFunction0);
      concurrentReaderHashMap0.clear();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.entrySet();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap1.keySet();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap0.sput(32, " T&a,:m(CR?5|O", 32);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0, 750.55F);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(0, 1.0F);
      Integer integer0 = new Integer((-1017));
      concurrentReaderHashMap1.replace((Object) integer0, (Object) "org.dom4j.tree.ConcurrentReaderHashMap$Entry", (Object) integer0);
      BiFunction<Integer, Object, String> biFunction0 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("x").when(biFunction0).apply(anyInt() , any());
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.compute(biFunction0, biFunction0);
      concurrentReaderHashMap0.clone();
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap2.new KeyIterator();
      concurrentReaderHashMap_KeyIterator0.hasMoreElements();
      concurrentReaderHashMap2.sput((Object) null, "x", 2823);
      concurrentReaderHashMap2.remove((Object) null);
      Integer integer1 = new Integer(206);
      concurrentReaderHashMap2.containsValue("x");
      concurrentReaderHashMap0.loadFactor();
      Integer integer2 = new Integer(0);
      concurrentReaderHashMap2.containsKey(integer2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(4587);
      hashMap0.put("5KF8B*f,Dv\"KJjoRR@", integer0);
      hashMap0.put("", (Integer) null);
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      concurrentReaderHashMap0.put("8", 32);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      concurrentReaderHashMap0.sput(32, "8", 1024);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap0.lastWrite;
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      concurrentReaderHashMap0.sput((Object) null, concurrentReaderHashMap_ValueIterator0, 0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, concurrentReaderHashMap1, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      concurrentReaderHashMap_Entry0.equals((Object) null);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap2.new ValueIterator();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.sput(concurrentReaderHashMap0, concurrentReaderHashMap0, 32);
      concurrentReaderHashMap0.putIfAbsent((Object) null, concurrentReaderHashMap0);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      BiFunction<ConcurrentReaderHashMap, ConcurrentReaderHashMap, ConcurrentReaderHashMap> biFunction0 = (BiFunction<ConcurrentReaderHashMap, ConcurrentReaderHashMap, ConcurrentReaderHashMap>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap1.lastWrite;
      concurrentReaderHashMap0.sput(concurrentReaderHashMap0, concurrentReaderHashMap_Entry0, 32);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.rehash();
      concurrentReaderHashMap0.getTableForReading();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.values();
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator1 = concurrentReaderHashMap0.new HashIterator();
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(30, 30);
      concurrentReaderHashMap0.elements();
      concurrentReaderHashMap0.elements();
      concurrentReaderHashMap1.keySet();
      concurrentReaderHashMap0.values();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      Integer integer0 = new Integer(32);
      concurrentReaderHashMap0.put("8", integer0);
      concurrentReaderHashMap0.values();
      concurrentReaderHashMap0.sput(integer0, "8", 1024);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = (ConcurrentReaderHashMap.Entry)concurrentReaderHashMap0.lastWrite;
      Integer integer1 = new Integer(16);
      concurrentReaderHashMap0.put(integer1, integer1);
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.putAll(concurrentReaderHashMap1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(0, 0.75F);
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap1.replace((Object) concurrentReaderHashMap2, (Object) concurrentReaderHashMap3);
      // Undeclared exception!
      try { 
        concurrentReaderHashMap3.put("org.dom4j.tree.ConcurrentReaderHashMap$HashIterator", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, concurrentReaderHashMap1, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn("").when(biFunction0).apply(anyString() , any());
      concurrentReaderHashMap_Entry0.setValue(concurrentReaderHashMap0);
      concurrentReaderHashMap1.compute(concurrentReaderHashMap_Entry0, biFunction0);
      Integer integer0 = new Integer(3000);
      concurrentReaderHashMap0.put(concurrentReaderHashMap_Entry0, concurrentReaderHashMap1);
      concurrentReaderHashMap1.putAll(concurrentReaderHashMap0);
      concurrentReaderHashMap1.clear();
      BiFunction<String, Object, String> biFunction1 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap0.computeIfPresent((Object) null, biFunction1);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1115);
      concurrentReaderHashMap0.containsKey(concurrentReaderHashMap2);
      concurrentReaderHashMap0.keySet();
      concurrentReaderHashMap0.size();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = new ConcurrentReaderHashMap.Entry(0, concurrentReaderHashMap1, concurrentReaderHashMap0, (ConcurrentReaderHashMap.Entry) null);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer(3000);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(1);
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(32);
      ConcurrentReaderHashMap concurrentReaderHashMap4 = new ConcurrentReaderHashMap(concurrentReaderHashMap2);
      Integer integer1 = new Integer(32);
      BiFunction<Integer, Object, String> biFunction1 = (BiFunction<Integer, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      concurrentReaderHashMap2.merge(integer1, concurrentReaderHashMap0, biFunction1);
      concurrentReaderHashMap3.sremove("", 32);
      concurrentReaderHashMap1.rehash();
      concurrentReaderHashMap2.rehash();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32);
      concurrentReaderHashMap1.sput(concurrentReaderHashMap0, concurrentReaderHashMap0, 32);
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap1.new HashIterator();
      concurrentReaderHashMap_HashIterator0.hasNext();
      concurrentReaderHashMap1.remove((Object) null, (Object) concurrentReaderHashMap1);
      Integer integer0 = new Integer((-1));
      concurrentReaderHashMap1.containsValue(concurrentReaderHashMap0);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap2.loadFactor();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Map<String, String> map0 = null;
      ConcurrentReaderHashMap concurrentReaderHashMap0 = null;
      try {
        concurrentReaderHashMap0 = new ConcurrentReaderHashMap((Map) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32);
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(32);
      concurrentReaderHashMap0.clone();
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(15);
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap3.new ValueIterator();
      Object object0 = concurrentReaderHashMap_ValueIterator0.currentValue;
      concurrentReaderHashMap1.keySet();
      concurrentReaderHashMap1.elements();
      concurrentReaderHashMap3.remove((Object) null);
      concurrentReaderHashMap1.keySet();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      concurrentReaderHashMap0.eq(concurrentReaderHashMap0, "");
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      concurrentReaderHashMap0.capacity();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      concurrentReaderHashMap1.keySet();
  }
}
